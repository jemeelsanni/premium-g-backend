
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model DistributionOrder
 * 
 */
export type DistributionOrder = $Result.DefaultSelection<Prisma.$DistributionOrderPayload>
/**
 * Model DistributionOrderItem
 * 
 */
export type DistributionOrderItem = $Result.DefaultSelection<Prisma.$DistributionOrderItemPayload>
/**
 * Model PalletPricing
 * 
 */
export type PalletPricing = $Result.DefaultSelection<Prisma.$PalletPricingPayload>
/**
 * Model PriceAdjustment
 * 
 */
export type PriceAdjustment = $Result.DefaultSelection<Prisma.$PriceAdjustmentPayload>
/**
 * Model TruckCapacity
 * 
 */
export type TruckCapacity = $Result.DefaultSelection<Prisma.$TruckCapacityPayload>
/**
 * Model TransportOrder
 * 
 */
export type TransportOrder = $Result.DefaultSelection<Prisma.$TransportOrderPayload>
/**
 * Model WarehouseInventory
 * 
 */
export type WarehouseInventory = $Result.DefaultSelection<Prisma.$WarehouseInventoryPayload>
/**
 * Model WarehouseSale
 * 
 */
export type WarehouseSale = $Result.DefaultSelection<Prisma.$WarehouseSalePayload>
/**
 * Model CashFlow
 * 
 */
export type CashFlow = $Result.DefaultSelection<Prisma.$CashFlowPayload>
/**
 * Model SystemConfig
 * 
 */
export type SystemConfig = $Result.DefaultSelection<Prisma.$SystemConfigPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  DISTRIBUTION_ADMIN: 'DISTRIBUTION_ADMIN',
  TRANSPORT_ADMIN: 'TRANSPORT_ADMIN',
  WAREHOUSE_ADMIN: 'WAREHOUSE_ADMIN',
  DISTRIBUTION_SALES_REP: 'DISTRIBUTION_SALES_REP',
  WAREHOUSE_SALES_OFFICER: 'WAREHOUSE_SALES_OFFICER',
  CASHIER: 'CASHIER',
  TRANSPORT_STAFF: 'TRANSPORT_STAFF'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const OrderStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  PARTIALLY_DELIVERED: 'PARTIALLY_DELIVERED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const DeliveryStatus: {
  ASSIGNED: 'ASSIGNED',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  PARTIALLY_DELIVERED: 'PARTIALLY_DELIVERED',
  DELAYED: 'DELAYED',
  CANCELLED: 'CANCELLED'
};

export type DeliveryStatus = (typeof DeliveryStatus)[keyof typeof DeliveryStatus]


export const UnitType: {
  PALLETS: 'PALLETS',
  PACKS: 'PACKS',
  UNITS: 'UNITS'
};

export type UnitType = (typeof UnitType)[keyof typeof UnitType]


export const PaymentMethod: {
  CASH: 'CASH',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  CARD: 'CARD',
  MOBILE_MONEY: 'MOBILE_MONEY'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const TransactionType: {
  CASH_IN: 'CASH_IN',
  CASH_OUT: 'CASH_OUT',
  SALE: 'SALE',
  EXPENSE: 'EXPENSE',
  ADJUSTMENT: 'ADJUSTMENT'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type DeliveryStatus = $Enums.DeliveryStatus

export const DeliveryStatus: typeof $Enums.DeliveryStatus

export type UnitType = $Enums.UnitType

export const UnitType: typeof $Enums.UnitType

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.distributionOrder`: Exposes CRUD operations for the **DistributionOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DistributionOrders
    * const distributionOrders = await prisma.distributionOrder.findMany()
    * ```
    */
  get distributionOrder(): Prisma.DistributionOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.distributionOrderItem`: Exposes CRUD operations for the **DistributionOrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DistributionOrderItems
    * const distributionOrderItems = await prisma.distributionOrderItem.findMany()
    * ```
    */
  get distributionOrderItem(): Prisma.DistributionOrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.palletPricing`: Exposes CRUD operations for the **PalletPricing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PalletPricings
    * const palletPricings = await prisma.palletPricing.findMany()
    * ```
    */
  get palletPricing(): Prisma.PalletPricingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.priceAdjustment`: Exposes CRUD operations for the **PriceAdjustment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceAdjustments
    * const priceAdjustments = await prisma.priceAdjustment.findMany()
    * ```
    */
  get priceAdjustment(): Prisma.PriceAdjustmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.truckCapacity`: Exposes CRUD operations for the **TruckCapacity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TruckCapacities
    * const truckCapacities = await prisma.truckCapacity.findMany()
    * ```
    */
  get truckCapacity(): Prisma.TruckCapacityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transportOrder`: Exposes CRUD operations for the **TransportOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransportOrders
    * const transportOrders = await prisma.transportOrder.findMany()
    * ```
    */
  get transportOrder(): Prisma.TransportOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.warehouseInventory`: Exposes CRUD operations for the **WarehouseInventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WarehouseInventories
    * const warehouseInventories = await prisma.warehouseInventory.findMany()
    * ```
    */
  get warehouseInventory(): Prisma.WarehouseInventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.warehouseSale`: Exposes CRUD operations for the **WarehouseSale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WarehouseSales
    * const warehouseSales = await prisma.warehouseSale.findMany()
    * ```
    */
  get warehouseSale(): Prisma.WarehouseSaleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cashFlow`: Exposes CRUD operations for the **CashFlow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CashFlows
    * const cashFlows = await prisma.cashFlow.findMany()
    * ```
    */
  get cashFlow(): Prisma.CashFlowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemConfig`: Exposes CRUD operations for the **SystemConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemConfigs
    * const systemConfigs = await prisma.systemConfig.findMany()
    * ```
    */
  get systemConfig(): Prisma.SystemConfigDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserSession: 'UserSession',
    AuditLog: 'AuditLog',
    Product: 'Product',
    Customer: 'Customer',
    Location: 'Location',
    DistributionOrder: 'DistributionOrder',
    DistributionOrderItem: 'DistributionOrderItem',
    PalletPricing: 'PalletPricing',
    PriceAdjustment: 'PriceAdjustment',
    TruckCapacity: 'TruckCapacity',
    TransportOrder: 'TransportOrder',
    WarehouseInventory: 'WarehouseInventory',
    WarehouseSale: 'WarehouseSale',
    CashFlow: 'CashFlow',
    SystemConfig: 'SystemConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userSession" | "auditLog" | "product" | "customer" | "location" | "distributionOrder" | "distributionOrderItem" | "palletPricing" | "priceAdjustment" | "truckCapacity" | "transportOrder" | "warehouseInventory" | "warehouseSale" | "cashFlow" | "systemConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      DistributionOrder: {
        payload: Prisma.$DistributionOrderPayload<ExtArgs>
        fields: Prisma.DistributionOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistributionOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistributionOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>
          }
          findFirst: {
            args: Prisma.DistributionOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistributionOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>
          }
          findMany: {
            args: Prisma.DistributionOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>[]
          }
          create: {
            args: Prisma.DistributionOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>
          }
          createMany: {
            args: Prisma.DistributionOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DistributionOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>[]
          }
          delete: {
            args: Prisma.DistributionOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>
          }
          update: {
            args: Prisma.DistributionOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>
          }
          deleteMany: {
            args: Prisma.DistributionOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DistributionOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DistributionOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>[]
          }
          upsert: {
            args: Prisma.DistributionOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderPayload>
          }
          aggregate: {
            args: Prisma.DistributionOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistributionOrder>
          }
          groupBy: {
            args: Prisma.DistributionOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistributionOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistributionOrderCountArgs<ExtArgs>
            result: $Utils.Optional<DistributionOrderCountAggregateOutputType> | number
          }
        }
      }
      DistributionOrderItem: {
        payload: Prisma.$DistributionOrderItemPayload<ExtArgs>
        fields: Prisma.DistributionOrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistributionOrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistributionOrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>
          }
          findFirst: {
            args: Prisma.DistributionOrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistributionOrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>
          }
          findMany: {
            args: Prisma.DistributionOrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>[]
          }
          create: {
            args: Prisma.DistributionOrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>
          }
          createMany: {
            args: Prisma.DistributionOrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DistributionOrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>[]
          }
          delete: {
            args: Prisma.DistributionOrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>
          }
          update: {
            args: Prisma.DistributionOrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>
          }
          deleteMany: {
            args: Prisma.DistributionOrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DistributionOrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DistributionOrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>[]
          }
          upsert: {
            args: Prisma.DistributionOrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionOrderItemPayload>
          }
          aggregate: {
            args: Prisma.DistributionOrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistributionOrderItem>
          }
          groupBy: {
            args: Prisma.DistributionOrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistributionOrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistributionOrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<DistributionOrderItemCountAggregateOutputType> | number
          }
        }
      }
      PalletPricing: {
        payload: Prisma.$PalletPricingPayload<ExtArgs>
        fields: Prisma.PalletPricingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PalletPricingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PalletPricingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>
          }
          findFirst: {
            args: Prisma.PalletPricingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PalletPricingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>
          }
          findMany: {
            args: Prisma.PalletPricingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>[]
          }
          create: {
            args: Prisma.PalletPricingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>
          }
          createMany: {
            args: Prisma.PalletPricingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PalletPricingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>[]
          }
          delete: {
            args: Prisma.PalletPricingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>
          }
          update: {
            args: Prisma.PalletPricingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>
          }
          deleteMany: {
            args: Prisma.PalletPricingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PalletPricingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PalletPricingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>[]
          }
          upsert: {
            args: Prisma.PalletPricingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PalletPricingPayload>
          }
          aggregate: {
            args: Prisma.PalletPricingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePalletPricing>
          }
          groupBy: {
            args: Prisma.PalletPricingGroupByArgs<ExtArgs>
            result: $Utils.Optional<PalletPricingGroupByOutputType>[]
          }
          count: {
            args: Prisma.PalletPricingCountArgs<ExtArgs>
            result: $Utils.Optional<PalletPricingCountAggregateOutputType> | number
          }
        }
      }
      PriceAdjustment: {
        payload: Prisma.$PriceAdjustmentPayload<ExtArgs>
        fields: Prisma.PriceAdjustmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceAdjustmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceAdjustmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>
          }
          findFirst: {
            args: Prisma.PriceAdjustmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceAdjustmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>
          }
          findMany: {
            args: Prisma.PriceAdjustmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>[]
          }
          create: {
            args: Prisma.PriceAdjustmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>
          }
          createMany: {
            args: Prisma.PriceAdjustmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PriceAdjustmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>[]
          }
          delete: {
            args: Prisma.PriceAdjustmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>
          }
          update: {
            args: Prisma.PriceAdjustmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>
          }
          deleteMany: {
            args: Prisma.PriceAdjustmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PriceAdjustmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PriceAdjustmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>[]
          }
          upsert: {
            args: Prisma.PriceAdjustmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceAdjustmentPayload>
          }
          aggregate: {
            args: Prisma.PriceAdjustmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePriceAdjustment>
          }
          groupBy: {
            args: Prisma.PriceAdjustmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PriceAdjustmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceAdjustmentCountArgs<ExtArgs>
            result: $Utils.Optional<PriceAdjustmentCountAggregateOutputType> | number
          }
        }
      }
      TruckCapacity: {
        payload: Prisma.$TruckCapacityPayload<ExtArgs>
        fields: Prisma.TruckCapacityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TruckCapacityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TruckCapacityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>
          }
          findFirst: {
            args: Prisma.TruckCapacityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TruckCapacityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>
          }
          findMany: {
            args: Prisma.TruckCapacityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>[]
          }
          create: {
            args: Prisma.TruckCapacityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>
          }
          createMany: {
            args: Prisma.TruckCapacityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TruckCapacityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>[]
          }
          delete: {
            args: Prisma.TruckCapacityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>
          }
          update: {
            args: Prisma.TruckCapacityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>
          }
          deleteMany: {
            args: Prisma.TruckCapacityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TruckCapacityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TruckCapacityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>[]
          }
          upsert: {
            args: Prisma.TruckCapacityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TruckCapacityPayload>
          }
          aggregate: {
            args: Prisma.TruckCapacityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTruckCapacity>
          }
          groupBy: {
            args: Prisma.TruckCapacityGroupByArgs<ExtArgs>
            result: $Utils.Optional<TruckCapacityGroupByOutputType>[]
          }
          count: {
            args: Prisma.TruckCapacityCountArgs<ExtArgs>
            result: $Utils.Optional<TruckCapacityCountAggregateOutputType> | number
          }
        }
      }
      TransportOrder: {
        payload: Prisma.$TransportOrderPayload<ExtArgs>
        fields: Prisma.TransportOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransportOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransportOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>
          }
          findFirst: {
            args: Prisma.TransportOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransportOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>
          }
          findMany: {
            args: Prisma.TransportOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>[]
          }
          create: {
            args: Prisma.TransportOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>
          }
          createMany: {
            args: Prisma.TransportOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransportOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>[]
          }
          delete: {
            args: Prisma.TransportOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>
          }
          update: {
            args: Prisma.TransportOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>
          }
          deleteMany: {
            args: Prisma.TransportOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransportOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransportOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>[]
          }
          upsert: {
            args: Prisma.TransportOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportOrderPayload>
          }
          aggregate: {
            args: Prisma.TransportOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransportOrder>
          }
          groupBy: {
            args: Prisma.TransportOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransportOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransportOrderCountArgs<ExtArgs>
            result: $Utils.Optional<TransportOrderCountAggregateOutputType> | number
          }
        }
      }
      WarehouseInventory: {
        payload: Prisma.$WarehouseInventoryPayload<ExtArgs>
        fields: Prisma.WarehouseInventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WarehouseInventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WarehouseInventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>
          }
          findFirst: {
            args: Prisma.WarehouseInventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WarehouseInventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>
          }
          findMany: {
            args: Prisma.WarehouseInventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>[]
          }
          create: {
            args: Prisma.WarehouseInventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>
          }
          createMany: {
            args: Prisma.WarehouseInventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WarehouseInventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>[]
          }
          delete: {
            args: Prisma.WarehouseInventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>
          }
          update: {
            args: Prisma.WarehouseInventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>
          }
          deleteMany: {
            args: Prisma.WarehouseInventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WarehouseInventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WarehouseInventoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>[]
          }
          upsert: {
            args: Prisma.WarehouseInventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseInventoryPayload>
          }
          aggregate: {
            args: Prisma.WarehouseInventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWarehouseInventory>
          }
          groupBy: {
            args: Prisma.WarehouseInventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<WarehouseInventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.WarehouseInventoryCountArgs<ExtArgs>
            result: $Utils.Optional<WarehouseInventoryCountAggregateOutputType> | number
          }
        }
      }
      WarehouseSale: {
        payload: Prisma.$WarehouseSalePayload<ExtArgs>
        fields: Prisma.WarehouseSaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WarehouseSaleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WarehouseSaleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>
          }
          findFirst: {
            args: Prisma.WarehouseSaleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WarehouseSaleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>
          }
          findMany: {
            args: Prisma.WarehouseSaleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>[]
          }
          create: {
            args: Prisma.WarehouseSaleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>
          }
          createMany: {
            args: Prisma.WarehouseSaleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WarehouseSaleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>[]
          }
          delete: {
            args: Prisma.WarehouseSaleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>
          }
          update: {
            args: Prisma.WarehouseSaleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>
          }
          deleteMany: {
            args: Prisma.WarehouseSaleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WarehouseSaleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WarehouseSaleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>[]
          }
          upsert: {
            args: Prisma.WarehouseSaleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehouseSalePayload>
          }
          aggregate: {
            args: Prisma.WarehouseSaleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWarehouseSale>
          }
          groupBy: {
            args: Prisma.WarehouseSaleGroupByArgs<ExtArgs>
            result: $Utils.Optional<WarehouseSaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.WarehouseSaleCountArgs<ExtArgs>
            result: $Utils.Optional<WarehouseSaleCountAggregateOutputType> | number
          }
        }
      }
      CashFlow: {
        payload: Prisma.$CashFlowPayload<ExtArgs>
        fields: Prisma.CashFlowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CashFlowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CashFlowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          findFirst: {
            args: Prisma.CashFlowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CashFlowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          findMany: {
            args: Prisma.CashFlowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>[]
          }
          create: {
            args: Prisma.CashFlowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          createMany: {
            args: Prisma.CashFlowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CashFlowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>[]
          }
          delete: {
            args: Prisma.CashFlowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          update: {
            args: Prisma.CashFlowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          deleteMany: {
            args: Prisma.CashFlowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CashFlowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CashFlowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>[]
          }
          upsert: {
            args: Prisma.CashFlowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashFlowPayload>
          }
          aggregate: {
            args: Prisma.CashFlowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCashFlow>
          }
          groupBy: {
            args: Prisma.CashFlowGroupByArgs<ExtArgs>
            result: $Utils.Optional<CashFlowGroupByOutputType>[]
          }
          count: {
            args: Prisma.CashFlowCountArgs<ExtArgs>
            result: $Utils.Optional<CashFlowCountAggregateOutputType> | number
          }
        }
      }
      SystemConfig: {
        payload: Prisma.$SystemConfigPayload<ExtArgs>
        fields: Prisma.SystemConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findFirst: {
            args: Prisma.SystemConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findMany: {
            args: Prisma.SystemConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          create: {
            args: Prisma.SystemConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          createMany: {
            args: Prisma.SystemConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          delete: {
            args: Prisma.SystemConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          update: {
            args: Prisma.SystemConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          deleteMany: {
            args: Prisma.SystemConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          upsert: {
            args: Prisma.SystemConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          aggregate: {
            args: Prisma.SystemConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemConfig>
          }
          groupBy: {
            args: Prisma.SystemConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userSession?: UserSessionOmit
    auditLog?: AuditLogOmit
    product?: ProductOmit
    customer?: CustomerOmit
    location?: LocationOmit
    distributionOrder?: DistributionOrderOmit
    distributionOrderItem?: DistributionOrderItemOmit
    palletPricing?: PalletPricingOmit
    priceAdjustment?: PriceAdjustmentOmit
    truckCapacity?: TruckCapacityOmit
    transportOrder?: TransportOrderOmit
    warehouseInventory?: WarehouseInventoryOmit
    warehouseSale?: WarehouseSaleOmit
    cashFlow?: CashFlowOmit
    systemConfig?: SystemConfigOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    auditLogs: number
    distributionOrders: number
    transportOrders: number
    warehouseSales: number
    cashFlowEntries: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    distributionOrders?: boolean | UserCountOutputTypeCountDistributionOrdersArgs
    transportOrders?: boolean | UserCountOutputTypeCountTransportOrdersArgs
    warehouseSales?: boolean | UserCountOutputTypeCountWarehouseSalesArgs
    cashFlowEntries?: boolean | UserCountOutputTypeCountCashFlowEntriesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDistributionOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransportOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransportOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWarehouseSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarehouseSaleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCashFlowEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashFlowWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    distributionOrderItems: number
    palletPricing: number
    warehouseInventory: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrderItems?: boolean | ProductCountOutputTypeCountDistributionOrderItemsArgs
    palletPricing?: boolean | ProductCountOutputTypeCountPalletPricingArgs
    warehouseInventory?: boolean | ProductCountOutputTypeCountWarehouseInventoryArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountDistributionOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionOrderItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountPalletPricingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PalletPricingWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountWarehouseInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarehouseInventoryWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    distributionOrders: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrders?: boolean | CustomerCountOutputTypeCountDistributionOrdersArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountDistributionOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionOrderWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    distributionOrders: number
    palletPricing: number
    transportOrders: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrders?: boolean | LocationCountOutputTypeCountDistributionOrdersArgs
    palletPricing?: boolean | LocationCountOutputTypeCountPalletPricingArgs
    transportOrders?: boolean | LocationCountOutputTypeCountTransportOrdersArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountDistributionOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionOrderWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountPalletPricingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PalletPricingWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountTransportOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransportOrderWhereInput
  }


  /**
   * Count Type DistributionOrderCountOutputType
   */

  export type DistributionOrderCountOutputType = {
    orderItems: number
    priceAdjustments: number
  }

  export type DistributionOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | DistributionOrderCountOutputTypeCountOrderItemsArgs
    priceAdjustments?: boolean | DistributionOrderCountOutputTypeCountPriceAdjustmentsArgs
  }

  // Custom InputTypes
  /**
   * DistributionOrderCountOutputType without action
   */
  export type DistributionOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderCountOutputType
     */
    select?: DistributionOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DistributionOrderCountOutputType without action
   */
  export type DistributionOrderCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionOrderItemWhereInput
  }

  /**
   * DistributionOrderCountOutputType without action
   */
  export type DistributionOrderCountOutputTypeCountPriceAdjustmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceAdjustmentWhereInput
  }


  /**
   * Count Type TruckCapacityCountOutputType
   */

  export type TruckCapacityCountOutputType = {
    transportOrders: number
  }

  export type TruckCapacityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transportOrders?: boolean | TruckCapacityCountOutputTypeCountTransportOrdersArgs
  }

  // Custom InputTypes
  /**
   * TruckCapacityCountOutputType without action
   */
  export type TruckCapacityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacityCountOutputType
     */
    select?: TruckCapacityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TruckCapacityCountOutputType without action
   */
  export type TruckCapacityCountOutputTypeCountTransportOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransportOrderWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    passwordHash: number
    role: number
    isActive: number
    permissions: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    permissions?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive: boolean
    permissions: JsonValue | null
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    distributionOrders?: boolean | User$distributionOrdersArgs<ExtArgs>
    transportOrders?: boolean | User$transportOrdersArgs<ExtArgs>
    warehouseSales?: boolean | User$warehouseSalesArgs<ExtArgs>
    cashFlowEntries?: boolean | User$cashFlowEntriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "passwordHash" | "role" | "isActive" | "permissions" | "createdAt" | "updatedAt" | "lastLoginAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    distributionOrders?: boolean | User$distributionOrdersArgs<ExtArgs>
    transportOrders?: boolean | User$transportOrdersArgs<ExtArgs>
    warehouseSales?: boolean | User$warehouseSalesArgs<ExtArgs>
    cashFlowEntries?: boolean | User$cashFlowEntriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      distributionOrders: Prisma.$DistributionOrderPayload<ExtArgs>[]
      transportOrders: Prisma.$TransportOrderPayload<ExtArgs>[]
      warehouseSales: Prisma.$WarehouseSalePayload<ExtArgs>[]
      cashFlowEntries: Prisma.$CashFlowPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      passwordHash: string
      role: $Enums.UserRole
      isActive: boolean
      permissions: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    distributionOrders<T extends User$distributionOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$distributionOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transportOrders<T extends User$transportOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$transportOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    warehouseSales<T extends User$warehouseSalesArgs<ExtArgs> = {}>(args?: Subset<T, User$warehouseSalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cashFlowEntries<T extends User$cashFlowEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$cashFlowEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly permissions: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.distributionOrders
   */
  export type User$distributionOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    where?: DistributionOrderWhereInput
    orderBy?: DistributionOrderOrderByWithRelationInput | DistributionOrderOrderByWithRelationInput[]
    cursor?: DistributionOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DistributionOrderScalarFieldEnum | DistributionOrderScalarFieldEnum[]
  }

  /**
   * User.transportOrders
   */
  export type User$transportOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    where?: TransportOrderWhereInput
    orderBy?: TransportOrderOrderByWithRelationInput | TransportOrderOrderByWithRelationInput[]
    cursor?: TransportOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransportOrderScalarFieldEnum | TransportOrderScalarFieldEnum[]
  }

  /**
   * User.warehouseSales
   */
  export type User$warehouseSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    where?: WarehouseSaleWhereInput
    orderBy?: WarehouseSaleOrderByWithRelationInput | WarehouseSaleOrderByWithRelationInput[]
    cursor?: WarehouseSaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WarehouseSaleScalarFieldEnum | WarehouseSaleScalarFieldEnum[]
  }

  /**
   * User.cashFlowEntries
   */
  export type User$cashFlowEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    where?: CashFlowWhereInput
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    cursor?: CashFlowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashFlowScalarFieldEnum | CashFlowScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    ipAddress: number
    userAgent: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    createdAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    createdAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean
    createdAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type UserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "ipAddress" | "userAgent" | "isActive" | "createdAt", ExtArgs["result"]["userSession"]>
  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      ipAddress: string | null
      userAgent: string | null
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions and returns the data updated in the database.
     * @param {UserSessionUpdateManyAndReturnArgs} args - Arguments to update many UserSessions.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly token: FieldRef<"UserSession", 'String'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly ipAddress: FieldRef<"UserSession", 'String'>
    readonly userAgent: FieldRef<"UserSession", 'String'>
    readonly isActive: FieldRef<"UserSession", 'Boolean'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession updateManyAndReturn
   */
  export type UserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to delete.
     */
    limit?: number
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entity: number
    entityId: number
    oldValues: number
    newValues: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string | null
    action: string
    entity: string
    entityId: string | null
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "entity" | "entityId" | "oldValues" | "newValues" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      action: string
      entity: string
      entityId: string | null
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    packsPerPallet: number | null
    pricePerPack: Decimal | null
  }

  export type ProductSumAggregateOutputType = {
    packsPerPallet: number | null
    pricePerPack: Decimal | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    productNo: string | null
    name: string | null
    description: string | null
    packsPerPallet: number | null
    pricePerPack: Decimal | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    productNo: string | null
    name: string | null
    description: string | null
    packsPerPallet: number | null
    pricePerPack: Decimal | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    productNo: number
    name: number
    description: number
    packsPerPallet: number
    pricePerPack: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    packsPerPallet?: true
    pricePerPack?: true
  }

  export type ProductSumAggregateInputType = {
    packsPerPallet?: true
    pricePerPack?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    productNo?: true
    name?: true
    description?: true
    packsPerPallet?: true
    pricePerPack?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    productNo?: true
    name?: true
    description?: true
    packsPerPallet?: true
    pricePerPack?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    productNo?: true
    name?: true
    description?: true
    packsPerPallet?: true
    pricePerPack?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    productNo: string
    name: string
    description: string | null
    packsPerPallet: number
    pricePerPack: Decimal
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productNo?: boolean
    name?: boolean
    description?: boolean
    packsPerPallet?: boolean
    pricePerPack?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    distributionOrderItems?: boolean | Product$distributionOrderItemsArgs<ExtArgs>
    palletPricing?: boolean | Product$palletPricingArgs<ExtArgs>
    warehouseInventory?: boolean | Product$warehouseInventoryArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productNo?: boolean
    name?: boolean
    description?: boolean
    packsPerPallet?: boolean
    pricePerPack?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productNo?: boolean
    name?: boolean
    description?: boolean
    packsPerPallet?: boolean
    pricePerPack?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    productNo?: boolean
    name?: boolean
    description?: boolean
    packsPerPallet?: boolean
    pricePerPack?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productNo" | "name" | "description" | "packsPerPallet" | "pricePerPack" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrderItems?: boolean | Product$distributionOrderItemsArgs<ExtArgs>
    palletPricing?: boolean | Product$palletPricingArgs<ExtArgs>
    warehouseInventory?: boolean | Product$warehouseInventoryArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      distributionOrderItems: Prisma.$DistributionOrderItemPayload<ExtArgs>[]
      palletPricing: Prisma.$PalletPricingPayload<ExtArgs>[]
      warehouseInventory: Prisma.$WarehouseInventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productNo: string
      name: string
      description: string | null
      packsPerPallet: number
      pricePerPack: Prisma.Decimal
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distributionOrderItems<T extends Product$distributionOrderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$distributionOrderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    palletPricing<T extends Product$palletPricingArgs<ExtArgs> = {}>(args?: Subset<T, Product$palletPricingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    warehouseInventory<T extends Product$warehouseInventoryArgs<ExtArgs> = {}>(args?: Subset<T, Product$warehouseInventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly productNo: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly packsPerPallet: FieldRef<"Product", 'Int'>
    readonly pricePerPack: FieldRef<"Product", 'Decimal'>
    readonly isActive: FieldRef<"Product", 'Boolean'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.distributionOrderItems
   */
  export type Product$distributionOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    where?: DistributionOrderItemWhereInput
    orderBy?: DistributionOrderItemOrderByWithRelationInput | DistributionOrderItemOrderByWithRelationInput[]
    cursor?: DistributionOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DistributionOrderItemScalarFieldEnum | DistributionOrderItemScalarFieldEnum[]
  }

  /**
   * Product.palletPricing
   */
  export type Product$palletPricingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    where?: PalletPricingWhereInput
    orderBy?: PalletPricingOrderByWithRelationInput | PalletPricingOrderByWithRelationInput[]
    cursor?: PalletPricingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PalletPricingScalarFieldEnum | PalletPricingScalarFieldEnum[]
  }

  /**
   * Product.warehouseInventory
   */
  export type Product$warehouseInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    where?: WarehouseInventoryWhereInput
    orderBy?: WarehouseInventoryOrderByWithRelationInput | WarehouseInventoryOrderByWithRelationInput[]
    cursor?: WarehouseInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WarehouseInventoryScalarFieldEnum | WarehouseInventoryScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    address: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    name: string
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    distributionOrders?: boolean | Customer$distributionOrdersArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "address" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrders?: boolean | Customer$distributionOrdersArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      distributionOrders: Prisma.$DistributionOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string | null
      phone: string | null
      address: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distributionOrders<T extends Customer$distributionOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Customer$distributionOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly isActive: FieldRef<"Customer", 'Boolean'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.distributionOrders
   */
  export type Customer$distributionOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    where?: DistributionOrderWhereInput
    orderBy?: DistributionOrderOrderByWithRelationInput | DistributionOrderOrderByWithRelationInput[]
    cursor?: DistributionOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DistributionOrderScalarFieldEnum | DistributionOrderScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    fuelAdjustment: Decimal | null
  }

  export type LocationSumAggregateOutputType = {
    fuelAdjustment: Decimal | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    fuelAdjustment: Decimal | null
    deliveryNotes: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    fuelAdjustment: Decimal | null
    deliveryNotes: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    fuelAdjustment: number
    deliveryNotes: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    fuelAdjustment?: true
  }

  export type LocationSumAggregateInputType = {
    fuelAdjustment?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    fuelAdjustment?: true
    deliveryNotes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    fuelAdjustment?: true
    deliveryNotes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    fuelAdjustment?: true
    deliveryNotes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    name: string
    address: string | null
    fuelAdjustment: Decimal
    deliveryNotes: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    fuelAdjustment?: boolean
    deliveryNotes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    distributionOrders?: boolean | Location$distributionOrdersArgs<ExtArgs>
    palletPricing?: boolean | Location$palletPricingArgs<ExtArgs>
    transportOrders?: boolean | Location$transportOrdersArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    fuelAdjustment?: boolean
    deliveryNotes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    fuelAdjustment?: boolean
    deliveryNotes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    fuelAdjustment?: boolean
    deliveryNotes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "fuelAdjustment" | "deliveryNotes" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrders?: boolean | Location$distributionOrdersArgs<ExtArgs>
    palletPricing?: boolean | Location$palletPricingArgs<ExtArgs>
    transportOrders?: boolean | Location$transportOrdersArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      distributionOrders: Prisma.$DistributionOrderPayload<ExtArgs>[]
      palletPricing: Prisma.$PalletPricingPayload<ExtArgs>[]
      transportOrders: Prisma.$TransportOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      fuelAdjustment: Prisma.Decimal
      deliveryNotes: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations and returns the data updated in the database.
     * @param {LocationUpdateManyAndReturnArgs} args - Arguments to update many Locations.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distributionOrders<T extends Location$distributionOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Location$distributionOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    palletPricing<T extends Location$palletPricingArgs<ExtArgs> = {}>(args?: Subset<T, Location$palletPricingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transportOrders<T extends Location$transportOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Location$transportOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly name: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
    readonly fuelAdjustment: FieldRef<"Location", 'Decimal'>
    readonly deliveryNotes: FieldRef<"Location", 'String'>
    readonly isActive: FieldRef<"Location", 'Boolean'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location updateManyAndReturn
   */
  export type LocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location.distributionOrders
   */
  export type Location$distributionOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    where?: DistributionOrderWhereInput
    orderBy?: DistributionOrderOrderByWithRelationInput | DistributionOrderOrderByWithRelationInput[]
    cursor?: DistributionOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DistributionOrderScalarFieldEnum | DistributionOrderScalarFieldEnum[]
  }

  /**
   * Location.palletPricing
   */
  export type Location$palletPricingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    where?: PalletPricingWhereInput
    orderBy?: PalletPricingOrderByWithRelationInput | PalletPricingOrderByWithRelationInput[]
    cursor?: PalletPricingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PalletPricingScalarFieldEnum | PalletPricingScalarFieldEnum[]
  }

  /**
   * Location.transportOrders
   */
  export type Location$transportOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    where?: TransportOrderWhereInput
    orderBy?: TransportOrderOrderByWithRelationInput | TransportOrderOrderByWithRelationInput[]
    cursor?: TransportOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransportOrderScalarFieldEnum | TransportOrderScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model DistributionOrder
   */

  export type AggregateDistributionOrder = {
    _count: DistributionOrderCountAggregateOutputType | null
    _avg: DistributionOrderAvgAggregateOutputType | null
    _sum: DistributionOrderSumAggregateOutputType | null
    _min: DistributionOrderMinAggregateOutputType | null
    _max: DistributionOrderMaxAggregateOutputType | null
  }

  export type DistributionOrderAvgAggregateOutputType = {
    totalPallets: number | null
    totalPacks: number | null
    originalAmount: Decimal | null
    balance: Decimal | null
    finalAmount: Decimal | null
  }

  export type DistributionOrderSumAggregateOutputType = {
    totalPallets: number | null
    totalPacks: number | null
    originalAmount: Decimal | null
    balance: Decimal | null
    finalAmount: Decimal | null
  }

  export type DistributionOrderMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    locationId: string | null
    totalPallets: number | null
    totalPacks: number | null
    originalAmount: Decimal | null
    balance: Decimal | null
    finalAmount: Decimal | null
    status: $Enums.OrderStatus | null
    transporterCompany: string | null
    driverNumber: string | null
    remark: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DistributionOrderMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    locationId: string | null
    totalPallets: number | null
    totalPacks: number | null
    originalAmount: Decimal | null
    balance: Decimal | null
    finalAmount: Decimal | null
    status: $Enums.OrderStatus | null
    transporterCompany: string | null
    driverNumber: string | null
    remark: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DistributionOrderCountAggregateOutputType = {
    id: number
    customerId: number
    locationId: number
    totalPallets: number
    totalPacks: number
    originalAmount: number
    balance: number
    finalAmount: number
    status: number
    transporterCompany: number
    driverNumber: number
    remark: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DistributionOrderAvgAggregateInputType = {
    totalPallets?: true
    totalPacks?: true
    originalAmount?: true
    balance?: true
    finalAmount?: true
  }

  export type DistributionOrderSumAggregateInputType = {
    totalPallets?: true
    totalPacks?: true
    originalAmount?: true
    balance?: true
    finalAmount?: true
  }

  export type DistributionOrderMinAggregateInputType = {
    id?: true
    customerId?: true
    locationId?: true
    totalPallets?: true
    totalPacks?: true
    originalAmount?: true
    balance?: true
    finalAmount?: true
    status?: true
    transporterCompany?: true
    driverNumber?: true
    remark?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DistributionOrderMaxAggregateInputType = {
    id?: true
    customerId?: true
    locationId?: true
    totalPallets?: true
    totalPacks?: true
    originalAmount?: true
    balance?: true
    finalAmount?: true
    status?: true
    transporterCompany?: true
    driverNumber?: true
    remark?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DistributionOrderCountAggregateInputType = {
    id?: true
    customerId?: true
    locationId?: true
    totalPallets?: true
    totalPacks?: true
    originalAmount?: true
    balance?: true
    finalAmount?: true
    status?: true
    transporterCompany?: true
    driverNumber?: true
    remark?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DistributionOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributionOrder to aggregate.
     */
    where?: DistributionOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionOrders to fetch.
     */
    orderBy?: DistributionOrderOrderByWithRelationInput | DistributionOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistributionOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DistributionOrders
    **/
    _count?: true | DistributionOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistributionOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistributionOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistributionOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistributionOrderMaxAggregateInputType
  }

  export type GetDistributionOrderAggregateType<T extends DistributionOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateDistributionOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistributionOrder[P]>
      : GetScalarType<T[P], AggregateDistributionOrder[P]>
  }




  export type DistributionOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionOrderWhereInput
    orderBy?: DistributionOrderOrderByWithAggregationInput | DistributionOrderOrderByWithAggregationInput[]
    by: DistributionOrderScalarFieldEnum[] | DistributionOrderScalarFieldEnum
    having?: DistributionOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistributionOrderCountAggregateInputType | true
    _avg?: DistributionOrderAvgAggregateInputType
    _sum?: DistributionOrderSumAggregateInputType
    _min?: DistributionOrderMinAggregateInputType
    _max?: DistributionOrderMaxAggregateInputType
  }

  export type DistributionOrderGroupByOutputType = {
    id: string
    customerId: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal
    balance: Decimal
    finalAmount: Decimal
    status: $Enums.OrderStatus
    transporterCompany: string | null
    driverNumber: string | null
    remark: string | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: DistributionOrderCountAggregateOutputType | null
    _avg: DistributionOrderAvgAggregateOutputType | null
    _sum: DistributionOrderSumAggregateOutputType | null
    _min: DistributionOrderMinAggregateOutputType | null
    _max: DistributionOrderMaxAggregateOutputType | null
  }

  type GetDistributionOrderGroupByPayload<T extends DistributionOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistributionOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistributionOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistributionOrderGroupByOutputType[P]>
            : GetScalarType<T[P], DistributionOrderGroupByOutputType[P]>
        }
      >
    >


  export type DistributionOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    locationId?: boolean
    totalPallets?: boolean
    totalPacks?: boolean
    originalAmount?: boolean
    balance?: boolean
    finalAmount?: boolean
    status?: boolean
    transporterCompany?: boolean
    driverNumber?: boolean
    remark?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    orderItems?: boolean | DistributionOrder$orderItemsArgs<ExtArgs>
    priceAdjustments?: boolean | DistributionOrder$priceAdjustmentsArgs<ExtArgs>
    transportOrder?: boolean | DistributionOrder$transportOrderArgs<ExtArgs>
    _count?: boolean | DistributionOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributionOrder"]>

  export type DistributionOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    locationId?: boolean
    totalPallets?: boolean
    totalPacks?: boolean
    originalAmount?: boolean
    balance?: boolean
    finalAmount?: boolean
    status?: boolean
    transporterCompany?: boolean
    driverNumber?: boolean
    remark?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributionOrder"]>

  export type DistributionOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    locationId?: boolean
    totalPallets?: boolean
    totalPacks?: boolean
    originalAmount?: boolean
    balance?: boolean
    finalAmount?: boolean
    status?: boolean
    transporterCompany?: boolean
    driverNumber?: boolean
    remark?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributionOrder"]>

  export type DistributionOrderSelectScalar = {
    id?: boolean
    customerId?: boolean
    locationId?: boolean
    totalPallets?: boolean
    totalPacks?: boolean
    originalAmount?: boolean
    balance?: boolean
    finalAmount?: boolean
    status?: boolean
    transporterCompany?: boolean
    driverNumber?: boolean
    remark?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DistributionOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "locationId" | "totalPallets" | "totalPacks" | "originalAmount" | "balance" | "finalAmount" | "status" | "transporterCompany" | "driverNumber" | "remark" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["distributionOrder"]>
  export type DistributionOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    orderItems?: boolean | DistributionOrder$orderItemsArgs<ExtArgs>
    priceAdjustments?: boolean | DistributionOrder$priceAdjustmentsArgs<ExtArgs>
    transportOrder?: boolean | DistributionOrder$transportOrderArgs<ExtArgs>
    _count?: boolean | DistributionOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DistributionOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DistributionOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DistributionOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DistributionOrder"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
      createdByUser: Prisma.$UserPayload<ExtArgs>
      orderItems: Prisma.$DistributionOrderItemPayload<ExtArgs>[]
      priceAdjustments: Prisma.$PriceAdjustmentPayload<ExtArgs>[]
      transportOrder: Prisma.$TransportOrderPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      locationId: string
      totalPallets: number
      totalPacks: number
      originalAmount: Prisma.Decimal
      balance: Prisma.Decimal
      finalAmount: Prisma.Decimal
      status: $Enums.OrderStatus
      transporterCompany: string | null
      driverNumber: string | null
      remark: string | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["distributionOrder"]>
    composites: {}
  }

  type DistributionOrderGetPayload<S extends boolean | null | undefined | DistributionOrderDefaultArgs> = $Result.GetResult<Prisma.$DistributionOrderPayload, S>

  type DistributionOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DistributionOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DistributionOrderCountAggregateInputType | true
    }

  export interface DistributionOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DistributionOrder'], meta: { name: 'DistributionOrder' } }
    /**
     * Find zero or one DistributionOrder that matches the filter.
     * @param {DistributionOrderFindUniqueArgs} args - Arguments to find a DistributionOrder
     * @example
     * // Get one DistributionOrder
     * const distributionOrder = await prisma.distributionOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DistributionOrderFindUniqueArgs>(args: SelectSubset<T, DistributionOrderFindUniqueArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DistributionOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DistributionOrderFindUniqueOrThrowArgs} args - Arguments to find a DistributionOrder
     * @example
     * // Get one DistributionOrder
     * const distributionOrder = await prisma.distributionOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DistributionOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, DistributionOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DistributionOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderFindFirstArgs} args - Arguments to find a DistributionOrder
     * @example
     * // Get one DistributionOrder
     * const distributionOrder = await prisma.distributionOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DistributionOrderFindFirstArgs>(args?: SelectSubset<T, DistributionOrderFindFirstArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DistributionOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderFindFirstOrThrowArgs} args - Arguments to find a DistributionOrder
     * @example
     * // Get one DistributionOrder
     * const distributionOrder = await prisma.distributionOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DistributionOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, DistributionOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DistributionOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DistributionOrders
     * const distributionOrders = await prisma.distributionOrder.findMany()
     * 
     * // Get first 10 DistributionOrders
     * const distributionOrders = await prisma.distributionOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const distributionOrderWithIdOnly = await prisma.distributionOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DistributionOrderFindManyArgs>(args?: SelectSubset<T, DistributionOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DistributionOrder.
     * @param {DistributionOrderCreateArgs} args - Arguments to create a DistributionOrder.
     * @example
     * // Create one DistributionOrder
     * const DistributionOrder = await prisma.distributionOrder.create({
     *   data: {
     *     // ... data to create a DistributionOrder
     *   }
     * })
     * 
     */
    create<T extends DistributionOrderCreateArgs>(args: SelectSubset<T, DistributionOrderCreateArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DistributionOrders.
     * @param {DistributionOrderCreateManyArgs} args - Arguments to create many DistributionOrders.
     * @example
     * // Create many DistributionOrders
     * const distributionOrder = await prisma.distributionOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DistributionOrderCreateManyArgs>(args?: SelectSubset<T, DistributionOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DistributionOrders and returns the data saved in the database.
     * @param {DistributionOrderCreateManyAndReturnArgs} args - Arguments to create many DistributionOrders.
     * @example
     * // Create many DistributionOrders
     * const distributionOrder = await prisma.distributionOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DistributionOrders and only return the `id`
     * const distributionOrderWithIdOnly = await prisma.distributionOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DistributionOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, DistributionOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DistributionOrder.
     * @param {DistributionOrderDeleteArgs} args - Arguments to delete one DistributionOrder.
     * @example
     * // Delete one DistributionOrder
     * const DistributionOrder = await prisma.distributionOrder.delete({
     *   where: {
     *     // ... filter to delete one DistributionOrder
     *   }
     * })
     * 
     */
    delete<T extends DistributionOrderDeleteArgs>(args: SelectSubset<T, DistributionOrderDeleteArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DistributionOrder.
     * @param {DistributionOrderUpdateArgs} args - Arguments to update one DistributionOrder.
     * @example
     * // Update one DistributionOrder
     * const distributionOrder = await prisma.distributionOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DistributionOrderUpdateArgs>(args: SelectSubset<T, DistributionOrderUpdateArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DistributionOrders.
     * @param {DistributionOrderDeleteManyArgs} args - Arguments to filter DistributionOrders to delete.
     * @example
     * // Delete a few DistributionOrders
     * const { count } = await prisma.distributionOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DistributionOrderDeleteManyArgs>(args?: SelectSubset<T, DistributionOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributionOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DistributionOrders
     * const distributionOrder = await prisma.distributionOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DistributionOrderUpdateManyArgs>(args: SelectSubset<T, DistributionOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributionOrders and returns the data updated in the database.
     * @param {DistributionOrderUpdateManyAndReturnArgs} args - Arguments to update many DistributionOrders.
     * @example
     * // Update many DistributionOrders
     * const distributionOrder = await prisma.distributionOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DistributionOrders and only return the `id`
     * const distributionOrderWithIdOnly = await prisma.distributionOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DistributionOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, DistributionOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DistributionOrder.
     * @param {DistributionOrderUpsertArgs} args - Arguments to update or create a DistributionOrder.
     * @example
     * // Update or create a DistributionOrder
     * const distributionOrder = await prisma.distributionOrder.upsert({
     *   create: {
     *     // ... data to create a DistributionOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DistributionOrder we want to update
     *   }
     * })
     */
    upsert<T extends DistributionOrderUpsertArgs>(args: SelectSubset<T, DistributionOrderUpsertArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DistributionOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderCountArgs} args - Arguments to filter DistributionOrders to count.
     * @example
     * // Count the number of DistributionOrders
     * const count = await prisma.distributionOrder.count({
     *   where: {
     *     // ... the filter for the DistributionOrders we want to count
     *   }
     * })
    **/
    count<T extends DistributionOrderCountArgs>(
      args?: Subset<T, DistributionOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistributionOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DistributionOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistributionOrderAggregateArgs>(args: Subset<T, DistributionOrderAggregateArgs>): Prisma.PrismaPromise<GetDistributionOrderAggregateType<T>>

    /**
     * Group by DistributionOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistributionOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistributionOrderGroupByArgs['orderBy'] }
        : { orderBy?: DistributionOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistributionOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistributionOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DistributionOrder model
   */
  readonly fields: DistributionOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DistributionOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistributionOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends DistributionOrder$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, DistributionOrder$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    priceAdjustments<T extends DistributionOrder$priceAdjustmentsArgs<ExtArgs> = {}>(args?: Subset<T, DistributionOrder$priceAdjustmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transportOrder<T extends DistributionOrder$transportOrderArgs<ExtArgs> = {}>(args?: Subset<T, DistributionOrder$transportOrderArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DistributionOrder model
   */
  interface DistributionOrderFieldRefs {
    readonly id: FieldRef<"DistributionOrder", 'String'>
    readonly customerId: FieldRef<"DistributionOrder", 'String'>
    readonly locationId: FieldRef<"DistributionOrder", 'String'>
    readonly totalPallets: FieldRef<"DistributionOrder", 'Int'>
    readonly totalPacks: FieldRef<"DistributionOrder", 'Int'>
    readonly originalAmount: FieldRef<"DistributionOrder", 'Decimal'>
    readonly balance: FieldRef<"DistributionOrder", 'Decimal'>
    readonly finalAmount: FieldRef<"DistributionOrder", 'Decimal'>
    readonly status: FieldRef<"DistributionOrder", 'OrderStatus'>
    readonly transporterCompany: FieldRef<"DistributionOrder", 'String'>
    readonly driverNumber: FieldRef<"DistributionOrder", 'String'>
    readonly remark: FieldRef<"DistributionOrder", 'String'>
    readonly createdBy: FieldRef<"DistributionOrder", 'String'>
    readonly createdAt: FieldRef<"DistributionOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"DistributionOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DistributionOrder findUnique
   */
  export type DistributionOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrder to fetch.
     */
    where: DistributionOrderWhereUniqueInput
  }

  /**
   * DistributionOrder findUniqueOrThrow
   */
  export type DistributionOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrder to fetch.
     */
    where: DistributionOrderWhereUniqueInput
  }

  /**
   * DistributionOrder findFirst
   */
  export type DistributionOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrder to fetch.
     */
    where?: DistributionOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionOrders to fetch.
     */
    orderBy?: DistributionOrderOrderByWithRelationInput | DistributionOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributionOrders.
     */
    cursor?: DistributionOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributionOrders.
     */
    distinct?: DistributionOrderScalarFieldEnum | DistributionOrderScalarFieldEnum[]
  }

  /**
   * DistributionOrder findFirstOrThrow
   */
  export type DistributionOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrder to fetch.
     */
    where?: DistributionOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionOrders to fetch.
     */
    orderBy?: DistributionOrderOrderByWithRelationInput | DistributionOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributionOrders.
     */
    cursor?: DistributionOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributionOrders.
     */
    distinct?: DistributionOrderScalarFieldEnum | DistributionOrderScalarFieldEnum[]
  }

  /**
   * DistributionOrder findMany
   */
  export type DistributionOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrders to fetch.
     */
    where?: DistributionOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionOrders to fetch.
     */
    orderBy?: DistributionOrderOrderByWithRelationInput | DistributionOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DistributionOrders.
     */
    cursor?: DistributionOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionOrders.
     */
    skip?: number
    distinct?: DistributionOrderScalarFieldEnum | DistributionOrderScalarFieldEnum[]
  }

  /**
   * DistributionOrder create
   */
  export type DistributionOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a DistributionOrder.
     */
    data: XOR<DistributionOrderCreateInput, DistributionOrderUncheckedCreateInput>
  }

  /**
   * DistributionOrder createMany
   */
  export type DistributionOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DistributionOrders.
     */
    data: DistributionOrderCreateManyInput | DistributionOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DistributionOrder createManyAndReturn
   */
  export type DistributionOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * The data used to create many DistributionOrders.
     */
    data: DistributionOrderCreateManyInput | DistributionOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DistributionOrder update
   */
  export type DistributionOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a DistributionOrder.
     */
    data: XOR<DistributionOrderUpdateInput, DistributionOrderUncheckedUpdateInput>
    /**
     * Choose, which DistributionOrder to update.
     */
    where: DistributionOrderWhereUniqueInput
  }

  /**
   * DistributionOrder updateMany
   */
  export type DistributionOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DistributionOrders.
     */
    data: XOR<DistributionOrderUpdateManyMutationInput, DistributionOrderUncheckedUpdateManyInput>
    /**
     * Filter which DistributionOrders to update
     */
    where?: DistributionOrderWhereInput
    /**
     * Limit how many DistributionOrders to update.
     */
    limit?: number
  }

  /**
   * DistributionOrder updateManyAndReturn
   */
  export type DistributionOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * The data used to update DistributionOrders.
     */
    data: XOR<DistributionOrderUpdateManyMutationInput, DistributionOrderUncheckedUpdateManyInput>
    /**
     * Filter which DistributionOrders to update
     */
    where?: DistributionOrderWhereInput
    /**
     * Limit how many DistributionOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DistributionOrder upsert
   */
  export type DistributionOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the DistributionOrder to update in case it exists.
     */
    where: DistributionOrderWhereUniqueInput
    /**
     * In case the DistributionOrder found by the `where` argument doesn't exist, create a new DistributionOrder with this data.
     */
    create: XOR<DistributionOrderCreateInput, DistributionOrderUncheckedCreateInput>
    /**
     * In case the DistributionOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistributionOrderUpdateInput, DistributionOrderUncheckedUpdateInput>
  }

  /**
   * DistributionOrder delete
   */
  export type DistributionOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    /**
     * Filter which DistributionOrder to delete.
     */
    where: DistributionOrderWhereUniqueInput
  }

  /**
   * DistributionOrder deleteMany
   */
  export type DistributionOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributionOrders to delete
     */
    where?: DistributionOrderWhereInput
    /**
     * Limit how many DistributionOrders to delete.
     */
    limit?: number
  }

  /**
   * DistributionOrder.orderItems
   */
  export type DistributionOrder$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    where?: DistributionOrderItemWhereInput
    orderBy?: DistributionOrderItemOrderByWithRelationInput | DistributionOrderItemOrderByWithRelationInput[]
    cursor?: DistributionOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DistributionOrderItemScalarFieldEnum | DistributionOrderItemScalarFieldEnum[]
  }

  /**
   * DistributionOrder.priceAdjustments
   */
  export type DistributionOrder$priceAdjustmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    where?: PriceAdjustmentWhereInput
    orderBy?: PriceAdjustmentOrderByWithRelationInput | PriceAdjustmentOrderByWithRelationInput[]
    cursor?: PriceAdjustmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PriceAdjustmentScalarFieldEnum | PriceAdjustmentScalarFieldEnum[]
  }

  /**
   * DistributionOrder.transportOrder
   */
  export type DistributionOrder$transportOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    where?: TransportOrderWhereInput
  }

  /**
   * DistributionOrder without action
   */
  export type DistributionOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
  }


  /**
   * Model DistributionOrderItem
   */

  export type AggregateDistributionOrderItem = {
    _count: DistributionOrderItemCountAggregateOutputType | null
    _avg: DistributionOrderItemAvgAggregateOutputType | null
    _sum: DistributionOrderItemSumAggregateOutputType | null
    _min: DistributionOrderItemMinAggregateOutputType | null
    _max: DistributionOrderItemMaxAggregateOutputType | null
  }

  export type DistributionOrderItemAvgAggregateOutputType = {
    pallets: number | null
    packs: number | null
    amount: Decimal | null
  }

  export type DistributionOrderItemSumAggregateOutputType = {
    pallets: number | null
    packs: number | null
    amount: Decimal | null
  }

  export type DistributionOrderItemMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    productId: string | null
    pallets: number | null
    packs: number | null
    amount: Decimal | null
  }

  export type DistributionOrderItemMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    productId: string | null
    pallets: number | null
    packs: number | null
    amount: Decimal | null
  }

  export type DistributionOrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    productId: number
    pallets: number
    packs: number
    amount: number
    _all: number
  }


  export type DistributionOrderItemAvgAggregateInputType = {
    pallets?: true
    packs?: true
    amount?: true
  }

  export type DistributionOrderItemSumAggregateInputType = {
    pallets?: true
    packs?: true
    amount?: true
  }

  export type DistributionOrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    pallets?: true
    packs?: true
    amount?: true
  }

  export type DistributionOrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    pallets?: true
    packs?: true
    amount?: true
  }

  export type DistributionOrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    pallets?: true
    packs?: true
    amount?: true
    _all?: true
  }

  export type DistributionOrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributionOrderItem to aggregate.
     */
    where?: DistributionOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionOrderItems to fetch.
     */
    orderBy?: DistributionOrderItemOrderByWithRelationInput | DistributionOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistributionOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DistributionOrderItems
    **/
    _count?: true | DistributionOrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistributionOrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistributionOrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistributionOrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistributionOrderItemMaxAggregateInputType
  }

  export type GetDistributionOrderItemAggregateType<T extends DistributionOrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateDistributionOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistributionOrderItem[P]>
      : GetScalarType<T[P], AggregateDistributionOrderItem[P]>
  }




  export type DistributionOrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionOrderItemWhereInput
    orderBy?: DistributionOrderItemOrderByWithAggregationInput | DistributionOrderItemOrderByWithAggregationInput[]
    by: DistributionOrderItemScalarFieldEnum[] | DistributionOrderItemScalarFieldEnum
    having?: DistributionOrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistributionOrderItemCountAggregateInputType | true
    _avg?: DistributionOrderItemAvgAggregateInputType
    _sum?: DistributionOrderItemSumAggregateInputType
    _min?: DistributionOrderItemMinAggregateInputType
    _max?: DistributionOrderItemMaxAggregateInputType
  }

  export type DistributionOrderItemGroupByOutputType = {
    id: string
    orderId: string
    productId: string
    pallets: number
    packs: number
    amount: Decimal
    _count: DistributionOrderItemCountAggregateOutputType | null
    _avg: DistributionOrderItemAvgAggregateOutputType | null
    _sum: DistributionOrderItemSumAggregateOutputType | null
    _min: DistributionOrderItemMinAggregateOutputType | null
    _max: DistributionOrderItemMaxAggregateOutputType | null
  }

  type GetDistributionOrderItemGroupByPayload<T extends DistributionOrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistributionOrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistributionOrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistributionOrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], DistributionOrderItemGroupByOutputType[P]>
        }
      >
    >


  export type DistributionOrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    pallets?: boolean
    packs?: boolean
    amount?: boolean
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributionOrderItem"]>

  export type DistributionOrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    pallets?: boolean
    packs?: boolean
    amount?: boolean
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributionOrderItem"]>

  export type DistributionOrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    pallets?: boolean
    packs?: boolean
    amount?: boolean
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributionOrderItem"]>

  export type DistributionOrderItemSelectScalar = {
    id?: boolean
    orderId?: boolean
    productId?: boolean
    pallets?: boolean
    packs?: boolean
    amount?: boolean
  }

  export type DistributionOrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "productId" | "pallets" | "packs" | "amount", ExtArgs["result"]["distributionOrderItem"]>
  export type DistributionOrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type DistributionOrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type DistributionOrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $DistributionOrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DistributionOrderItem"
    objects: {
      order: Prisma.$DistributionOrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      productId: string
      pallets: number
      packs: number
      amount: Prisma.Decimal
    }, ExtArgs["result"]["distributionOrderItem"]>
    composites: {}
  }

  type DistributionOrderItemGetPayload<S extends boolean | null | undefined | DistributionOrderItemDefaultArgs> = $Result.GetResult<Prisma.$DistributionOrderItemPayload, S>

  type DistributionOrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DistributionOrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DistributionOrderItemCountAggregateInputType | true
    }

  export interface DistributionOrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DistributionOrderItem'], meta: { name: 'DistributionOrderItem' } }
    /**
     * Find zero or one DistributionOrderItem that matches the filter.
     * @param {DistributionOrderItemFindUniqueArgs} args - Arguments to find a DistributionOrderItem
     * @example
     * // Get one DistributionOrderItem
     * const distributionOrderItem = await prisma.distributionOrderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DistributionOrderItemFindUniqueArgs>(args: SelectSubset<T, DistributionOrderItemFindUniqueArgs<ExtArgs>>): Prisma__DistributionOrderItemClient<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DistributionOrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DistributionOrderItemFindUniqueOrThrowArgs} args - Arguments to find a DistributionOrderItem
     * @example
     * // Get one DistributionOrderItem
     * const distributionOrderItem = await prisma.distributionOrderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DistributionOrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, DistributionOrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DistributionOrderItemClient<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DistributionOrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderItemFindFirstArgs} args - Arguments to find a DistributionOrderItem
     * @example
     * // Get one DistributionOrderItem
     * const distributionOrderItem = await prisma.distributionOrderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DistributionOrderItemFindFirstArgs>(args?: SelectSubset<T, DistributionOrderItemFindFirstArgs<ExtArgs>>): Prisma__DistributionOrderItemClient<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DistributionOrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderItemFindFirstOrThrowArgs} args - Arguments to find a DistributionOrderItem
     * @example
     * // Get one DistributionOrderItem
     * const distributionOrderItem = await prisma.distributionOrderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DistributionOrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, DistributionOrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__DistributionOrderItemClient<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DistributionOrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DistributionOrderItems
     * const distributionOrderItems = await prisma.distributionOrderItem.findMany()
     * 
     * // Get first 10 DistributionOrderItems
     * const distributionOrderItems = await prisma.distributionOrderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const distributionOrderItemWithIdOnly = await prisma.distributionOrderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DistributionOrderItemFindManyArgs>(args?: SelectSubset<T, DistributionOrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DistributionOrderItem.
     * @param {DistributionOrderItemCreateArgs} args - Arguments to create a DistributionOrderItem.
     * @example
     * // Create one DistributionOrderItem
     * const DistributionOrderItem = await prisma.distributionOrderItem.create({
     *   data: {
     *     // ... data to create a DistributionOrderItem
     *   }
     * })
     * 
     */
    create<T extends DistributionOrderItemCreateArgs>(args: SelectSubset<T, DistributionOrderItemCreateArgs<ExtArgs>>): Prisma__DistributionOrderItemClient<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DistributionOrderItems.
     * @param {DistributionOrderItemCreateManyArgs} args - Arguments to create many DistributionOrderItems.
     * @example
     * // Create many DistributionOrderItems
     * const distributionOrderItem = await prisma.distributionOrderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DistributionOrderItemCreateManyArgs>(args?: SelectSubset<T, DistributionOrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DistributionOrderItems and returns the data saved in the database.
     * @param {DistributionOrderItemCreateManyAndReturnArgs} args - Arguments to create many DistributionOrderItems.
     * @example
     * // Create many DistributionOrderItems
     * const distributionOrderItem = await prisma.distributionOrderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DistributionOrderItems and only return the `id`
     * const distributionOrderItemWithIdOnly = await prisma.distributionOrderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DistributionOrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, DistributionOrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DistributionOrderItem.
     * @param {DistributionOrderItemDeleteArgs} args - Arguments to delete one DistributionOrderItem.
     * @example
     * // Delete one DistributionOrderItem
     * const DistributionOrderItem = await prisma.distributionOrderItem.delete({
     *   where: {
     *     // ... filter to delete one DistributionOrderItem
     *   }
     * })
     * 
     */
    delete<T extends DistributionOrderItemDeleteArgs>(args: SelectSubset<T, DistributionOrderItemDeleteArgs<ExtArgs>>): Prisma__DistributionOrderItemClient<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DistributionOrderItem.
     * @param {DistributionOrderItemUpdateArgs} args - Arguments to update one DistributionOrderItem.
     * @example
     * // Update one DistributionOrderItem
     * const distributionOrderItem = await prisma.distributionOrderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DistributionOrderItemUpdateArgs>(args: SelectSubset<T, DistributionOrderItemUpdateArgs<ExtArgs>>): Prisma__DistributionOrderItemClient<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DistributionOrderItems.
     * @param {DistributionOrderItemDeleteManyArgs} args - Arguments to filter DistributionOrderItems to delete.
     * @example
     * // Delete a few DistributionOrderItems
     * const { count } = await prisma.distributionOrderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DistributionOrderItemDeleteManyArgs>(args?: SelectSubset<T, DistributionOrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributionOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DistributionOrderItems
     * const distributionOrderItem = await prisma.distributionOrderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DistributionOrderItemUpdateManyArgs>(args: SelectSubset<T, DistributionOrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributionOrderItems and returns the data updated in the database.
     * @param {DistributionOrderItemUpdateManyAndReturnArgs} args - Arguments to update many DistributionOrderItems.
     * @example
     * // Update many DistributionOrderItems
     * const distributionOrderItem = await prisma.distributionOrderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DistributionOrderItems and only return the `id`
     * const distributionOrderItemWithIdOnly = await prisma.distributionOrderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DistributionOrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, DistributionOrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DistributionOrderItem.
     * @param {DistributionOrderItemUpsertArgs} args - Arguments to update or create a DistributionOrderItem.
     * @example
     * // Update or create a DistributionOrderItem
     * const distributionOrderItem = await prisma.distributionOrderItem.upsert({
     *   create: {
     *     // ... data to create a DistributionOrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DistributionOrderItem we want to update
     *   }
     * })
     */
    upsert<T extends DistributionOrderItemUpsertArgs>(args: SelectSubset<T, DistributionOrderItemUpsertArgs<ExtArgs>>): Prisma__DistributionOrderItemClient<$Result.GetResult<Prisma.$DistributionOrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DistributionOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderItemCountArgs} args - Arguments to filter DistributionOrderItems to count.
     * @example
     * // Count the number of DistributionOrderItems
     * const count = await prisma.distributionOrderItem.count({
     *   where: {
     *     // ... the filter for the DistributionOrderItems we want to count
     *   }
     * })
    **/
    count<T extends DistributionOrderItemCountArgs>(
      args?: Subset<T, DistributionOrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistributionOrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DistributionOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistributionOrderItemAggregateArgs>(args: Subset<T, DistributionOrderItemAggregateArgs>): Prisma.PrismaPromise<GetDistributionOrderItemAggregateType<T>>

    /**
     * Group by DistributionOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionOrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistributionOrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistributionOrderItemGroupByArgs['orderBy'] }
        : { orderBy?: DistributionOrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistributionOrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistributionOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DistributionOrderItem model
   */
  readonly fields: DistributionOrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DistributionOrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistributionOrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends DistributionOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DistributionOrderDefaultArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DistributionOrderItem model
   */
  interface DistributionOrderItemFieldRefs {
    readonly id: FieldRef<"DistributionOrderItem", 'String'>
    readonly orderId: FieldRef<"DistributionOrderItem", 'String'>
    readonly productId: FieldRef<"DistributionOrderItem", 'String'>
    readonly pallets: FieldRef<"DistributionOrderItem", 'Int'>
    readonly packs: FieldRef<"DistributionOrderItem", 'Int'>
    readonly amount: FieldRef<"DistributionOrderItem", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * DistributionOrderItem findUnique
   */
  export type DistributionOrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrderItem to fetch.
     */
    where: DistributionOrderItemWhereUniqueInput
  }

  /**
   * DistributionOrderItem findUniqueOrThrow
   */
  export type DistributionOrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrderItem to fetch.
     */
    where: DistributionOrderItemWhereUniqueInput
  }

  /**
   * DistributionOrderItem findFirst
   */
  export type DistributionOrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrderItem to fetch.
     */
    where?: DistributionOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionOrderItems to fetch.
     */
    orderBy?: DistributionOrderItemOrderByWithRelationInput | DistributionOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributionOrderItems.
     */
    cursor?: DistributionOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributionOrderItems.
     */
    distinct?: DistributionOrderItemScalarFieldEnum | DistributionOrderItemScalarFieldEnum[]
  }

  /**
   * DistributionOrderItem findFirstOrThrow
   */
  export type DistributionOrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrderItem to fetch.
     */
    where?: DistributionOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionOrderItems to fetch.
     */
    orderBy?: DistributionOrderItemOrderByWithRelationInput | DistributionOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributionOrderItems.
     */
    cursor?: DistributionOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributionOrderItems.
     */
    distinct?: DistributionOrderItemScalarFieldEnum | DistributionOrderItemScalarFieldEnum[]
  }

  /**
   * DistributionOrderItem findMany
   */
  export type DistributionOrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which DistributionOrderItems to fetch.
     */
    where?: DistributionOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionOrderItems to fetch.
     */
    orderBy?: DistributionOrderItemOrderByWithRelationInput | DistributionOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DistributionOrderItems.
     */
    cursor?: DistributionOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionOrderItems.
     */
    skip?: number
    distinct?: DistributionOrderItemScalarFieldEnum | DistributionOrderItemScalarFieldEnum[]
  }

  /**
   * DistributionOrderItem create
   */
  export type DistributionOrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a DistributionOrderItem.
     */
    data: XOR<DistributionOrderItemCreateInput, DistributionOrderItemUncheckedCreateInput>
  }

  /**
   * DistributionOrderItem createMany
   */
  export type DistributionOrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DistributionOrderItems.
     */
    data: DistributionOrderItemCreateManyInput | DistributionOrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DistributionOrderItem createManyAndReturn
   */
  export type DistributionOrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many DistributionOrderItems.
     */
    data: DistributionOrderItemCreateManyInput | DistributionOrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DistributionOrderItem update
   */
  export type DistributionOrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a DistributionOrderItem.
     */
    data: XOR<DistributionOrderItemUpdateInput, DistributionOrderItemUncheckedUpdateInput>
    /**
     * Choose, which DistributionOrderItem to update.
     */
    where: DistributionOrderItemWhereUniqueInput
  }

  /**
   * DistributionOrderItem updateMany
   */
  export type DistributionOrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DistributionOrderItems.
     */
    data: XOR<DistributionOrderItemUpdateManyMutationInput, DistributionOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which DistributionOrderItems to update
     */
    where?: DistributionOrderItemWhereInput
    /**
     * Limit how many DistributionOrderItems to update.
     */
    limit?: number
  }

  /**
   * DistributionOrderItem updateManyAndReturn
   */
  export type DistributionOrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * The data used to update DistributionOrderItems.
     */
    data: XOR<DistributionOrderItemUpdateManyMutationInput, DistributionOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which DistributionOrderItems to update
     */
    where?: DistributionOrderItemWhereInput
    /**
     * Limit how many DistributionOrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DistributionOrderItem upsert
   */
  export type DistributionOrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the DistributionOrderItem to update in case it exists.
     */
    where: DistributionOrderItemWhereUniqueInput
    /**
     * In case the DistributionOrderItem found by the `where` argument doesn't exist, create a new DistributionOrderItem with this data.
     */
    create: XOR<DistributionOrderItemCreateInput, DistributionOrderItemUncheckedCreateInput>
    /**
     * In case the DistributionOrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistributionOrderItemUpdateInput, DistributionOrderItemUncheckedUpdateInput>
  }

  /**
   * DistributionOrderItem delete
   */
  export type DistributionOrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
    /**
     * Filter which DistributionOrderItem to delete.
     */
    where: DistributionOrderItemWhereUniqueInput
  }

  /**
   * DistributionOrderItem deleteMany
   */
  export type DistributionOrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributionOrderItems to delete
     */
    where?: DistributionOrderItemWhereInput
    /**
     * Limit how many DistributionOrderItems to delete.
     */
    limit?: number
  }

  /**
   * DistributionOrderItem without action
   */
  export type DistributionOrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrderItem
     */
    select?: DistributionOrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrderItem
     */
    omit?: DistributionOrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderItemInclude<ExtArgs> | null
  }


  /**
   * Model PalletPricing
   */

  export type AggregatePalletPricing = {
    _count: PalletPricingCountAggregateOutputType | null
    _avg: PalletPricingAvgAggregateOutputType | null
    _sum: PalletPricingSumAggregateOutputType | null
    _min: PalletPricingMinAggregateOutputType | null
    _max: PalletPricingMaxAggregateOutputType | null
  }

  export type PalletPricingAvgAggregateOutputType = {
    pricePerPack: Decimal | null
    fuelAdjustment: Decimal | null
  }

  export type PalletPricingSumAggregateOutputType = {
    pricePerPack: Decimal | null
    fuelAdjustment: Decimal | null
  }

  export type PalletPricingMinAggregateOutputType = {
    id: string | null
    productId: string | null
    locationId: string | null
    pricePerPack: Decimal | null
    fuelAdjustment: Decimal | null
    effectiveDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PalletPricingMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    locationId: string | null
    pricePerPack: Decimal | null
    fuelAdjustment: Decimal | null
    effectiveDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PalletPricingCountAggregateOutputType = {
    id: number
    productId: number
    locationId: number
    pricePerPack: number
    fuelAdjustment: number
    effectiveDate: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PalletPricingAvgAggregateInputType = {
    pricePerPack?: true
    fuelAdjustment?: true
  }

  export type PalletPricingSumAggregateInputType = {
    pricePerPack?: true
    fuelAdjustment?: true
  }

  export type PalletPricingMinAggregateInputType = {
    id?: true
    productId?: true
    locationId?: true
    pricePerPack?: true
    fuelAdjustment?: true
    effectiveDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PalletPricingMaxAggregateInputType = {
    id?: true
    productId?: true
    locationId?: true
    pricePerPack?: true
    fuelAdjustment?: true
    effectiveDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PalletPricingCountAggregateInputType = {
    id?: true
    productId?: true
    locationId?: true
    pricePerPack?: true
    fuelAdjustment?: true
    effectiveDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PalletPricingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PalletPricing to aggregate.
     */
    where?: PalletPricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PalletPricings to fetch.
     */
    orderBy?: PalletPricingOrderByWithRelationInput | PalletPricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PalletPricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PalletPricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PalletPricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PalletPricings
    **/
    _count?: true | PalletPricingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PalletPricingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PalletPricingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PalletPricingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PalletPricingMaxAggregateInputType
  }

  export type GetPalletPricingAggregateType<T extends PalletPricingAggregateArgs> = {
        [P in keyof T & keyof AggregatePalletPricing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePalletPricing[P]>
      : GetScalarType<T[P], AggregatePalletPricing[P]>
  }




  export type PalletPricingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PalletPricingWhereInput
    orderBy?: PalletPricingOrderByWithAggregationInput | PalletPricingOrderByWithAggregationInput[]
    by: PalletPricingScalarFieldEnum[] | PalletPricingScalarFieldEnum
    having?: PalletPricingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PalletPricingCountAggregateInputType | true
    _avg?: PalletPricingAvgAggregateInputType
    _sum?: PalletPricingSumAggregateInputType
    _min?: PalletPricingMinAggregateInputType
    _max?: PalletPricingMaxAggregateInputType
  }

  export type PalletPricingGroupByOutputType = {
    id: string
    productId: string
    locationId: string | null
    pricePerPack: Decimal
    fuelAdjustment: Decimal
    effectiveDate: Date
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: PalletPricingCountAggregateOutputType | null
    _avg: PalletPricingAvgAggregateOutputType | null
    _sum: PalletPricingSumAggregateOutputType | null
    _min: PalletPricingMinAggregateOutputType | null
    _max: PalletPricingMaxAggregateOutputType | null
  }

  type GetPalletPricingGroupByPayload<T extends PalletPricingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PalletPricingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PalletPricingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PalletPricingGroupByOutputType[P]>
            : GetScalarType<T[P], PalletPricingGroupByOutputType[P]>
        }
      >
    >


  export type PalletPricingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    locationId?: boolean
    pricePerPack?: boolean
    fuelAdjustment?: boolean
    effectiveDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    location?: boolean | PalletPricing$locationArgs<ExtArgs>
  }, ExtArgs["result"]["palletPricing"]>

  export type PalletPricingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    locationId?: boolean
    pricePerPack?: boolean
    fuelAdjustment?: boolean
    effectiveDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    location?: boolean | PalletPricing$locationArgs<ExtArgs>
  }, ExtArgs["result"]["palletPricing"]>

  export type PalletPricingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    locationId?: boolean
    pricePerPack?: boolean
    fuelAdjustment?: boolean
    effectiveDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    location?: boolean | PalletPricing$locationArgs<ExtArgs>
  }, ExtArgs["result"]["palletPricing"]>

  export type PalletPricingSelectScalar = {
    id?: boolean
    productId?: boolean
    locationId?: boolean
    pricePerPack?: boolean
    fuelAdjustment?: boolean
    effectiveDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PalletPricingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "locationId" | "pricePerPack" | "fuelAdjustment" | "effectiveDate" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["palletPricing"]>
  export type PalletPricingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    location?: boolean | PalletPricing$locationArgs<ExtArgs>
  }
  export type PalletPricingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    location?: boolean | PalletPricing$locationArgs<ExtArgs>
  }
  export type PalletPricingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    location?: boolean | PalletPricing$locationArgs<ExtArgs>
  }

  export type $PalletPricingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PalletPricing"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      locationId: string | null
      pricePerPack: Prisma.Decimal
      fuelAdjustment: Prisma.Decimal
      effectiveDate: Date
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["palletPricing"]>
    composites: {}
  }

  type PalletPricingGetPayload<S extends boolean | null | undefined | PalletPricingDefaultArgs> = $Result.GetResult<Prisma.$PalletPricingPayload, S>

  type PalletPricingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PalletPricingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PalletPricingCountAggregateInputType | true
    }

  export interface PalletPricingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PalletPricing'], meta: { name: 'PalletPricing' } }
    /**
     * Find zero or one PalletPricing that matches the filter.
     * @param {PalletPricingFindUniqueArgs} args - Arguments to find a PalletPricing
     * @example
     * // Get one PalletPricing
     * const palletPricing = await prisma.palletPricing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PalletPricingFindUniqueArgs>(args: SelectSubset<T, PalletPricingFindUniqueArgs<ExtArgs>>): Prisma__PalletPricingClient<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PalletPricing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PalletPricingFindUniqueOrThrowArgs} args - Arguments to find a PalletPricing
     * @example
     * // Get one PalletPricing
     * const palletPricing = await prisma.palletPricing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PalletPricingFindUniqueOrThrowArgs>(args: SelectSubset<T, PalletPricingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PalletPricingClient<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PalletPricing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalletPricingFindFirstArgs} args - Arguments to find a PalletPricing
     * @example
     * // Get one PalletPricing
     * const palletPricing = await prisma.palletPricing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PalletPricingFindFirstArgs>(args?: SelectSubset<T, PalletPricingFindFirstArgs<ExtArgs>>): Prisma__PalletPricingClient<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PalletPricing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalletPricingFindFirstOrThrowArgs} args - Arguments to find a PalletPricing
     * @example
     * // Get one PalletPricing
     * const palletPricing = await prisma.palletPricing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PalletPricingFindFirstOrThrowArgs>(args?: SelectSubset<T, PalletPricingFindFirstOrThrowArgs<ExtArgs>>): Prisma__PalletPricingClient<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PalletPricings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalletPricingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PalletPricings
     * const palletPricings = await prisma.palletPricing.findMany()
     * 
     * // Get first 10 PalletPricings
     * const palletPricings = await prisma.palletPricing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const palletPricingWithIdOnly = await prisma.palletPricing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PalletPricingFindManyArgs>(args?: SelectSubset<T, PalletPricingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PalletPricing.
     * @param {PalletPricingCreateArgs} args - Arguments to create a PalletPricing.
     * @example
     * // Create one PalletPricing
     * const PalletPricing = await prisma.palletPricing.create({
     *   data: {
     *     // ... data to create a PalletPricing
     *   }
     * })
     * 
     */
    create<T extends PalletPricingCreateArgs>(args: SelectSubset<T, PalletPricingCreateArgs<ExtArgs>>): Prisma__PalletPricingClient<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PalletPricings.
     * @param {PalletPricingCreateManyArgs} args - Arguments to create many PalletPricings.
     * @example
     * // Create many PalletPricings
     * const palletPricing = await prisma.palletPricing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PalletPricingCreateManyArgs>(args?: SelectSubset<T, PalletPricingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PalletPricings and returns the data saved in the database.
     * @param {PalletPricingCreateManyAndReturnArgs} args - Arguments to create many PalletPricings.
     * @example
     * // Create many PalletPricings
     * const palletPricing = await prisma.palletPricing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PalletPricings and only return the `id`
     * const palletPricingWithIdOnly = await prisma.palletPricing.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PalletPricingCreateManyAndReturnArgs>(args?: SelectSubset<T, PalletPricingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PalletPricing.
     * @param {PalletPricingDeleteArgs} args - Arguments to delete one PalletPricing.
     * @example
     * // Delete one PalletPricing
     * const PalletPricing = await prisma.palletPricing.delete({
     *   where: {
     *     // ... filter to delete one PalletPricing
     *   }
     * })
     * 
     */
    delete<T extends PalletPricingDeleteArgs>(args: SelectSubset<T, PalletPricingDeleteArgs<ExtArgs>>): Prisma__PalletPricingClient<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PalletPricing.
     * @param {PalletPricingUpdateArgs} args - Arguments to update one PalletPricing.
     * @example
     * // Update one PalletPricing
     * const palletPricing = await prisma.palletPricing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PalletPricingUpdateArgs>(args: SelectSubset<T, PalletPricingUpdateArgs<ExtArgs>>): Prisma__PalletPricingClient<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PalletPricings.
     * @param {PalletPricingDeleteManyArgs} args - Arguments to filter PalletPricings to delete.
     * @example
     * // Delete a few PalletPricings
     * const { count } = await prisma.palletPricing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PalletPricingDeleteManyArgs>(args?: SelectSubset<T, PalletPricingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PalletPricings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalletPricingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PalletPricings
     * const palletPricing = await prisma.palletPricing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PalletPricingUpdateManyArgs>(args: SelectSubset<T, PalletPricingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PalletPricings and returns the data updated in the database.
     * @param {PalletPricingUpdateManyAndReturnArgs} args - Arguments to update many PalletPricings.
     * @example
     * // Update many PalletPricings
     * const palletPricing = await prisma.palletPricing.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PalletPricings and only return the `id`
     * const palletPricingWithIdOnly = await prisma.palletPricing.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PalletPricingUpdateManyAndReturnArgs>(args: SelectSubset<T, PalletPricingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PalletPricing.
     * @param {PalletPricingUpsertArgs} args - Arguments to update or create a PalletPricing.
     * @example
     * // Update or create a PalletPricing
     * const palletPricing = await prisma.palletPricing.upsert({
     *   create: {
     *     // ... data to create a PalletPricing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PalletPricing we want to update
     *   }
     * })
     */
    upsert<T extends PalletPricingUpsertArgs>(args: SelectSubset<T, PalletPricingUpsertArgs<ExtArgs>>): Prisma__PalletPricingClient<$Result.GetResult<Prisma.$PalletPricingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PalletPricings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalletPricingCountArgs} args - Arguments to filter PalletPricings to count.
     * @example
     * // Count the number of PalletPricings
     * const count = await prisma.palletPricing.count({
     *   where: {
     *     // ... the filter for the PalletPricings we want to count
     *   }
     * })
    **/
    count<T extends PalletPricingCountArgs>(
      args?: Subset<T, PalletPricingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PalletPricingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PalletPricing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalletPricingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PalletPricingAggregateArgs>(args: Subset<T, PalletPricingAggregateArgs>): Prisma.PrismaPromise<GetPalletPricingAggregateType<T>>

    /**
     * Group by PalletPricing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PalletPricingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PalletPricingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PalletPricingGroupByArgs['orderBy'] }
        : { orderBy?: PalletPricingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PalletPricingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPalletPricingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PalletPricing model
   */
  readonly fields: PalletPricingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PalletPricing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PalletPricingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends PalletPricing$locationArgs<ExtArgs> = {}>(args?: Subset<T, PalletPricing$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PalletPricing model
   */
  interface PalletPricingFieldRefs {
    readonly id: FieldRef<"PalletPricing", 'String'>
    readonly productId: FieldRef<"PalletPricing", 'String'>
    readonly locationId: FieldRef<"PalletPricing", 'String'>
    readonly pricePerPack: FieldRef<"PalletPricing", 'Decimal'>
    readonly fuelAdjustment: FieldRef<"PalletPricing", 'Decimal'>
    readonly effectiveDate: FieldRef<"PalletPricing", 'DateTime'>
    readonly isActive: FieldRef<"PalletPricing", 'Boolean'>
    readonly createdAt: FieldRef<"PalletPricing", 'DateTime'>
    readonly updatedAt: FieldRef<"PalletPricing", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PalletPricing findUnique
   */
  export type PalletPricingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * Filter, which PalletPricing to fetch.
     */
    where: PalletPricingWhereUniqueInput
  }

  /**
   * PalletPricing findUniqueOrThrow
   */
  export type PalletPricingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * Filter, which PalletPricing to fetch.
     */
    where: PalletPricingWhereUniqueInput
  }

  /**
   * PalletPricing findFirst
   */
  export type PalletPricingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * Filter, which PalletPricing to fetch.
     */
    where?: PalletPricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PalletPricings to fetch.
     */
    orderBy?: PalletPricingOrderByWithRelationInput | PalletPricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PalletPricings.
     */
    cursor?: PalletPricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PalletPricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PalletPricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PalletPricings.
     */
    distinct?: PalletPricingScalarFieldEnum | PalletPricingScalarFieldEnum[]
  }

  /**
   * PalletPricing findFirstOrThrow
   */
  export type PalletPricingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * Filter, which PalletPricing to fetch.
     */
    where?: PalletPricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PalletPricings to fetch.
     */
    orderBy?: PalletPricingOrderByWithRelationInput | PalletPricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PalletPricings.
     */
    cursor?: PalletPricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PalletPricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PalletPricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PalletPricings.
     */
    distinct?: PalletPricingScalarFieldEnum | PalletPricingScalarFieldEnum[]
  }

  /**
   * PalletPricing findMany
   */
  export type PalletPricingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * Filter, which PalletPricings to fetch.
     */
    where?: PalletPricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PalletPricings to fetch.
     */
    orderBy?: PalletPricingOrderByWithRelationInput | PalletPricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PalletPricings.
     */
    cursor?: PalletPricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PalletPricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PalletPricings.
     */
    skip?: number
    distinct?: PalletPricingScalarFieldEnum | PalletPricingScalarFieldEnum[]
  }

  /**
   * PalletPricing create
   */
  export type PalletPricingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * The data needed to create a PalletPricing.
     */
    data: XOR<PalletPricingCreateInput, PalletPricingUncheckedCreateInput>
  }

  /**
   * PalletPricing createMany
   */
  export type PalletPricingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PalletPricings.
     */
    data: PalletPricingCreateManyInput | PalletPricingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PalletPricing createManyAndReturn
   */
  export type PalletPricingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * The data used to create many PalletPricings.
     */
    data: PalletPricingCreateManyInput | PalletPricingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PalletPricing update
   */
  export type PalletPricingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * The data needed to update a PalletPricing.
     */
    data: XOR<PalletPricingUpdateInput, PalletPricingUncheckedUpdateInput>
    /**
     * Choose, which PalletPricing to update.
     */
    where: PalletPricingWhereUniqueInput
  }

  /**
   * PalletPricing updateMany
   */
  export type PalletPricingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PalletPricings.
     */
    data: XOR<PalletPricingUpdateManyMutationInput, PalletPricingUncheckedUpdateManyInput>
    /**
     * Filter which PalletPricings to update
     */
    where?: PalletPricingWhereInput
    /**
     * Limit how many PalletPricings to update.
     */
    limit?: number
  }

  /**
   * PalletPricing updateManyAndReturn
   */
  export type PalletPricingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * The data used to update PalletPricings.
     */
    data: XOR<PalletPricingUpdateManyMutationInput, PalletPricingUncheckedUpdateManyInput>
    /**
     * Filter which PalletPricings to update
     */
    where?: PalletPricingWhereInput
    /**
     * Limit how many PalletPricings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PalletPricing upsert
   */
  export type PalletPricingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * The filter to search for the PalletPricing to update in case it exists.
     */
    where: PalletPricingWhereUniqueInput
    /**
     * In case the PalletPricing found by the `where` argument doesn't exist, create a new PalletPricing with this data.
     */
    create: XOR<PalletPricingCreateInput, PalletPricingUncheckedCreateInput>
    /**
     * In case the PalletPricing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PalletPricingUpdateInput, PalletPricingUncheckedUpdateInput>
  }

  /**
   * PalletPricing delete
   */
  export type PalletPricingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
    /**
     * Filter which PalletPricing to delete.
     */
    where: PalletPricingWhereUniqueInput
  }

  /**
   * PalletPricing deleteMany
   */
  export type PalletPricingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PalletPricings to delete
     */
    where?: PalletPricingWhereInput
    /**
     * Limit how many PalletPricings to delete.
     */
    limit?: number
  }

  /**
   * PalletPricing.location
   */
  export type PalletPricing$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * PalletPricing without action
   */
  export type PalletPricingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PalletPricing
     */
    select?: PalletPricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PalletPricing
     */
    omit?: PalletPricingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PalletPricingInclude<ExtArgs> | null
  }


  /**
   * Model PriceAdjustment
   */

  export type AggregatePriceAdjustment = {
    _count: PriceAdjustmentCountAggregateOutputType | null
    _avg: PriceAdjustmentAvgAggregateOutputType | null
    _sum: PriceAdjustmentSumAggregateOutputType | null
    _min: PriceAdjustmentMinAggregateOutputType | null
    _max: PriceAdjustmentMaxAggregateOutputType | null
  }

  export type PriceAdjustmentAvgAggregateOutputType = {
    originalAmount: Decimal | null
    adjustedAmount: Decimal | null
    locationFuelCost: Decimal | null
  }

  export type PriceAdjustmentSumAggregateOutputType = {
    originalAmount: Decimal | null
    adjustedAmount: Decimal | null
    locationFuelCost: Decimal | null
  }

  export type PriceAdjustmentMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    originalAmount: Decimal | null
    adjustedAmount: Decimal | null
    adjustmentType: string | null
    reason: string | null
    locationFuelCost: Decimal | null
    createdAt: Date | null
  }

  export type PriceAdjustmentMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    originalAmount: Decimal | null
    adjustedAmount: Decimal | null
    adjustmentType: string | null
    reason: string | null
    locationFuelCost: Decimal | null
    createdAt: Date | null
  }

  export type PriceAdjustmentCountAggregateOutputType = {
    id: number
    orderId: number
    originalAmount: number
    adjustedAmount: number
    adjustmentType: number
    reason: number
    locationFuelCost: number
    createdAt: number
    _all: number
  }


  export type PriceAdjustmentAvgAggregateInputType = {
    originalAmount?: true
    adjustedAmount?: true
    locationFuelCost?: true
  }

  export type PriceAdjustmentSumAggregateInputType = {
    originalAmount?: true
    adjustedAmount?: true
    locationFuelCost?: true
  }

  export type PriceAdjustmentMinAggregateInputType = {
    id?: true
    orderId?: true
    originalAmount?: true
    adjustedAmount?: true
    adjustmentType?: true
    reason?: true
    locationFuelCost?: true
    createdAt?: true
  }

  export type PriceAdjustmentMaxAggregateInputType = {
    id?: true
    orderId?: true
    originalAmount?: true
    adjustedAmount?: true
    adjustmentType?: true
    reason?: true
    locationFuelCost?: true
    createdAt?: true
  }

  export type PriceAdjustmentCountAggregateInputType = {
    id?: true
    orderId?: true
    originalAmount?: true
    adjustedAmount?: true
    adjustmentType?: true
    reason?: true
    locationFuelCost?: true
    createdAt?: true
    _all?: true
  }

  export type PriceAdjustmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceAdjustment to aggregate.
     */
    where?: PriceAdjustmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceAdjustments to fetch.
     */
    orderBy?: PriceAdjustmentOrderByWithRelationInput | PriceAdjustmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceAdjustmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceAdjustments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceAdjustments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceAdjustments
    **/
    _count?: true | PriceAdjustmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriceAdjustmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PriceAdjustmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceAdjustmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceAdjustmentMaxAggregateInputType
  }

  export type GetPriceAdjustmentAggregateType<T extends PriceAdjustmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceAdjustment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceAdjustment[P]>
      : GetScalarType<T[P], AggregatePriceAdjustment[P]>
  }




  export type PriceAdjustmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceAdjustmentWhereInput
    orderBy?: PriceAdjustmentOrderByWithAggregationInput | PriceAdjustmentOrderByWithAggregationInput[]
    by: PriceAdjustmentScalarFieldEnum[] | PriceAdjustmentScalarFieldEnum
    having?: PriceAdjustmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceAdjustmentCountAggregateInputType | true
    _avg?: PriceAdjustmentAvgAggregateInputType
    _sum?: PriceAdjustmentSumAggregateInputType
    _min?: PriceAdjustmentMinAggregateInputType
    _max?: PriceAdjustmentMaxAggregateInputType
  }

  export type PriceAdjustmentGroupByOutputType = {
    id: string
    orderId: string
    originalAmount: Decimal
    adjustedAmount: Decimal
    adjustmentType: string
    reason: string | null
    locationFuelCost: Decimal | null
    createdAt: Date
    _count: PriceAdjustmentCountAggregateOutputType | null
    _avg: PriceAdjustmentAvgAggregateOutputType | null
    _sum: PriceAdjustmentSumAggregateOutputType | null
    _min: PriceAdjustmentMinAggregateOutputType | null
    _max: PriceAdjustmentMaxAggregateOutputType | null
  }

  type GetPriceAdjustmentGroupByPayload<T extends PriceAdjustmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceAdjustmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceAdjustmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceAdjustmentGroupByOutputType[P]>
            : GetScalarType<T[P], PriceAdjustmentGroupByOutputType[P]>
        }
      >
    >


  export type PriceAdjustmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    originalAmount?: boolean
    adjustedAmount?: boolean
    adjustmentType?: boolean
    reason?: boolean
    locationFuelCost?: boolean
    createdAt?: boolean
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceAdjustment"]>

  export type PriceAdjustmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    originalAmount?: boolean
    adjustedAmount?: boolean
    adjustmentType?: boolean
    reason?: boolean
    locationFuelCost?: boolean
    createdAt?: boolean
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceAdjustment"]>

  export type PriceAdjustmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    originalAmount?: boolean
    adjustedAmount?: boolean
    adjustmentType?: boolean
    reason?: boolean
    locationFuelCost?: boolean
    createdAt?: boolean
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceAdjustment"]>

  export type PriceAdjustmentSelectScalar = {
    id?: boolean
    orderId?: boolean
    originalAmount?: boolean
    adjustedAmount?: boolean
    adjustmentType?: boolean
    reason?: boolean
    locationFuelCost?: boolean
    createdAt?: boolean
  }

  export type PriceAdjustmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "originalAmount" | "adjustedAmount" | "adjustmentType" | "reason" | "locationFuelCost" | "createdAt", ExtArgs["result"]["priceAdjustment"]>
  export type PriceAdjustmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
  }
  export type PriceAdjustmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
  }
  export type PriceAdjustmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | DistributionOrderDefaultArgs<ExtArgs>
  }

  export type $PriceAdjustmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceAdjustment"
    objects: {
      order: Prisma.$DistributionOrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      originalAmount: Prisma.Decimal
      adjustedAmount: Prisma.Decimal
      adjustmentType: string
      reason: string | null
      locationFuelCost: Prisma.Decimal | null
      createdAt: Date
    }, ExtArgs["result"]["priceAdjustment"]>
    composites: {}
  }

  type PriceAdjustmentGetPayload<S extends boolean | null | undefined | PriceAdjustmentDefaultArgs> = $Result.GetResult<Prisma.$PriceAdjustmentPayload, S>

  type PriceAdjustmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PriceAdjustmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PriceAdjustmentCountAggregateInputType | true
    }

  export interface PriceAdjustmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceAdjustment'], meta: { name: 'PriceAdjustment' } }
    /**
     * Find zero or one PriceAdjustment that matches the filter.
     * @param {PriceAdjustmentFindUniqueArgs} args - Arguments to find a PriceAdjustment
     * @example
     * // Get one PriceAdjustment
     * const priceAdjustment = await prisma.priceAdjustment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PriceAdjustmentFindUniqueArgs>(args: SelectSubset<T, PriceAdjustmentFindUniqueArgs<ExtArgs>>): Prisma__PriceAdjustmentClient<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PriceAdjustment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PriceAdjustmentFindUniqueOrThrowArgs} args - Arguments to find a PriceAdjustment
     * @example
     * // Get one PriceAdjustment
     * const priceAdjustment = await prisma.priceAdjustment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PriceAdjustmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PriceAdjustmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PriceAdjustmentClient<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceAdjustment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceAdjustmentFindFirstArgs} args - Arguments to find a PriceAdjustment
     * @example
     * // Get one PriceAdjustment
     * const priceAdjustment = await prisma.priceAdjustment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PriceAdjustmentFindFirstArgs>(args?: SelectSubset<T, PriceAdjustmentFindFirstArgs<ExtArgs>>): Prisma__PriceAdjustmentClient<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceAdjustment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceAdjustmentFindFirstOrThrowArgs} args - Arguments to find a PriceAdjustment
     * @example
     * // Get one PriceAdjustment
     * const priceAdjustment = await prisma.priceAdjustment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PriceAdjustmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PriceAdjustmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PriceAdjustmentClient<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PriceAdjustments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceAdjustmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceAdjustments
     * const priceAdjustments = await prisma.priceAdjustment.findMany()
     * 
     * // Get first 10 PriceAdjustments
     * const priceAdjustments = await prisma.priceAdjustment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceAdjustmentWithIdOnly = await prisma.priceAdjustment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PriceAdjustmentFindManyArgs>(args?: SelectSubset<T, PriceAdjustmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PriceAdjustment.
     * @param {PriceAdjustmentCreateArgs} args - Arguments to create a PriceAdjustment.
     * @example
     * // Create one PriceAdjustment
     * const PriceAdjustment = await prisma.priceAdjustment.create({
     *   data: {
     *     // ... data to create a PriceAdjustment
     *   }
     * })
     * 
     */
    create<T extends PriceAdjustmentCreateArgs>(args: SelectSubset<T, PriceAdjustmentCreateArgs<ExtArgs>>): Prisma__PriceAdjustmentClient<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PriceAdjustments.
     * @param {PriceAdjustmentCreateManyArgs} args - Arguments to create many PriceAdjustments.
     * @example
     * // Create many PriceAdjustments
     * const priceAdjustment = await prisma.priceAdjustment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PriceAdjustmentCreateManyArgs>(args?: SelectSubset<T, PriceAdjustmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PriceAdjustments and returns the data saved in the database.
     * @param {PriceAdjustmentCreateManyAndReturnArgs} args - Arguments to create many PriceAdjustments.
     * @example
     * // Create many PriceAdjustments
     * const priceAdjustment = await prisma.priceAdjustment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PriceAdjustments and only return the `id`
     * const priceAdjustmentWithIdOnly = await prisma.priceAdjustment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PriceAdjustmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PriceAdjustmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PriceAdjustment.
     * @param {PriceAdjustmentDeleteArgs} args - Arguments to delete one PriceAdjustment.
     * @example
     * // Delete one PriceAdjustment
     * const PriceAdjustment = await prisma.priceAdjustment.delete({
     *   where: {
     *     // ... filter to delete one PriceAdjustment
     *   }
     * })
     * 
     */
    delete<T extends PriceAdjustmentDeleteArgs>(args: SelectSubset<T, PriceAdjustmentDeleteArgs<ExtArgs>>): Prisma__PriceAdjustmentClient<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PriceAdjustment.
     * @param {PriceAdjustmentUpdateArgs} args - Arguments to update one PriceAdjustment.
     * @example
     * // Update one PriceAdjustment
     * const priceAdjustment = await prisma.priceAdjustment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PriceAdjustmentUpdateArgs>(args: SelectSubset<T, PriceAdjustmentUpdateArgs<ExtArgs>>): Prisma__PriceAdjustmentClient<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PriceAdjustments.
     * @param {PriceAdjustmentDeleteManyArgs} args - Arguments to filter PriceAdjustments to delete.
     * @example
     * // Delete a few PriceAdjustments
     * const { count } = await prisma.priceAdjustment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PriceAdjustmentDeleteManyArgs>(args?: SelectSubset<T, PriceAdjustmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceAdjustments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceAdjustmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceAdjustments
     * const priceAdjustment = await prisma.priceAdjustment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PriceAdjustmentUpdateManyArgs>(args: SelectSubset<T, PriceAdjustmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceAdjustments and returns the data updated in the database.
     * @param {PriceAdjustmentUpdateManyAndReturnArgs} args - Arguments to update many PriceAdjustments.
     * @example
     * // Update many PriceAdjustments
     * const priceAdjustment = await prisma.priceAdjustment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PriceAdjustments and only return the `id`
     * const priceAdjustmentWithIdOnly = await prisma.priceAdjustment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PriceAdjustmentUpdateManyAndReturnArgs>(args: SelectSubset<T, PriceAdjustmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PriceAdjustment.
     * @param {PriceAdjustmentUpsertArgs} args - Arguments to update or create a PriceAdjustment.
     * @example
     * // Update or create a PriceAdjustment
     * const priceAdjustment = await prisma.priceAdjustment.upsert({
     *   create: {
     *     // ... data to create a PriceAdjustment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceAdjustment we want to update
     *   }
     * })
     */
    upsert<T extends PriceAdjustmentUpsertArgs>(args: SelectSubset<T, PriceAdjustmentUpsertArgs<ExtArgs>>): Prisma__PriceAdjustmentClient<$Result.GetResult<Prisma.$PriceAdjustmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PriceAdjustments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceAdjustmentCountArgs} args - Arguments to filter PriceAdjustments to count.
     * @example
     * // Count the number of PriceAdjustments
     * const count = await prisma.priceAdjustment.count({
     *   where: {
     *     // ... the filter for the PriceAdjustments we want to count
     *   }
     * })
    **/
    count<T extends PriceAdjustmentCountArgs>(
      args?: Subset<T, PriceAdjustmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceAdjustmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceAdjustment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceAdjustmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceAdjustmentAggregateArgs>(args: Subset<T, PriceAdjustmentAggregateArgs>): Prisma.PrismaPromise<GetPriceAdjustmentAggregateType<T>>

    /**
     * Group by PriceAdjustment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceAdjustmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceAdjustmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceAdjustmentGroupByArgs['orderBy'] }
        : { orderBy?: PriceAdjustmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceAdjustmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceAdjustmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceAdjustment model
   */
  readonly fields: PriceAdjustmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceAdjustment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceAdjustmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends DistributionOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DistributionOrderDefaultArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PriceAdjustment model
   */
  interface PriceAdjustmentFieldRefs {
    readonly id: FieldRef<"PriceAdjustment", 'String'>
    readonly orderId: FieldRef<"PriceAdjustment", 'String'>
    readonly originalAmount: FieldRef<"PriceAdjustment", 'Decimal'>
    readonly adjustedAmount: FieldRef<"PriceAdjustment", 'Decimal'>
    readonly adjustmentType: FieldRef<"PriceAdjustment", 'String'>
    readonly reason: FieldRef<"PriceAdjustment", 'String'>
    readonly locationFuelCost: FieldRef<"PriceAdjustment", 'Decimal'>
    readonly createdAt: FieldRef<"PriceAdjustment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PriceAdjustment findUnique
   */
  export type PriceAdjustmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * Filter, which PriceAdjustment to fetch.
     */
    where: PriceAdjustmentWhereUniqueInput
  }

  /**
   * PriceAdjustment findUniqueOrThrow
   */
  export type PriceAdjustmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * Filter, which PriceAdjustment to fetch.
     */
    where: PriceAdjustmentWhereUniqueInput
  }

  /**
   * PriceAdjustment findFirst
   */
  export type PriceAdjustmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * Filter, which PriceAdjustment to fetch.
     */
    where?: PriceAdjustmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceAdjustments to fetch.
     */
    orderBy?: PriceAdjustmentOrderByWithRelationInput | PriceAdjustmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceAdjustments.
     */
    cursor?: PriceAdjustmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceAdjustments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceAdjustments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceAdjustments.
     */
    distinct?: PriceAdjustmentScalarFieldEnum | PriceAdjustmentScalarFieldEnum[]
  }

  /**
   * PriceAdjustment findFirstOrThrow
   */
  export type PriceAdjustmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * Filter, which PriceAdjustment to fetch.
     */
    where?: PriceAdjustmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceAdjustments to fetch.
     */
    orderBy?: PriceAdjustmentOrderByWithRelationInput | PriceAdjustmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceAdjustments.
     */
    cursor?: PriceAdjustmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceAdjustments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceAdjustments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceAdjustments.
     */
    distinct?: PriceAdjustmentScalarFieldEnum | PriceAdjustmentScalarFieldEnum[]
  }

  /**
   * PriceAdjustment findMany
   */
  export type PriceAdjustmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * Filter, which PriceAdjustments to fetch.
     */
    where?: PriceAdjustmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceAdjustments to fetch.
     */
    orderBy?: PriceAdjustmentOrderByWithRelationInput | PriceAdjustmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceAdjustments.
     */
    cursor?: PriceAdjustmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceAdjustments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceAdjustments.
     */
    skip?: number
    distinct?: PriceAdjustmentScalarFieldEnum | PriceAdjustmentScalarFieldEnum[]
  }

  /**
   * PriceAdjustment create
   */
  export type PriceAdjustmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceAdjustment.
     */
    data: XOR<PriceAdjustmentCreateInput, PriceAdjustmentUncheckedCreateInput>
  }

  /**
   * PriceAdjustment createMany
   */
  export type PriceAdjustmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceAdjustments.
     */
    data: PriceAdjustmentCreateManyInput | PriceAdjustmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PriceAdjustment createManyAndReturn
   */
  export type PriceAdjustmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * The data used to create many PriceAdjustments.
     */
    data: PriceAdjustmentCreateManyInput | PriceAdjustmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PriceAdjustment update
   */
  export type PriceAdjustmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceAdjustment.
     */
    data: XOR<PriceAdjustmentUpdateInput, PriceAdjustmentUncheckedUpdateInput>
    /**
     * Choose, which PriceAdjustment to update.
     */
    where: PriceAdjustmentWhereUniqueInput
  }

  /**
   * PriceAdjustment updateMany
   */
  export type PriceAdjustmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceAdjustments.
     */
    data: XOR<PriceAdjustmentUpdateManyMutationInput, PriceAdjustmentUncheckedUpdateManyInput>
    /**
     * Filter which PriceAdjustments to update
     */
    where?: PriceAdjustmentWhereInput
    /**
     * Limit how many PriceAdjustments to update.
     */
    limit?: number
  }

  /**
   * PriceAdjustment updateManyAndReturn
   */
  export type PriceAdjustmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * The data used to update PriceAdjustments.
     */
    data: XOR<PriceAdjustmentUpdateManyMutationInput, PriceAdjustmentUncheckedUpdateManyInput>
    /**
     * Filter which PriceAdjustments to update
     */
    where?: PriceAdjustmentWhereInput
    /**
     * Limit how many PriceAdjustments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PriceAdjustment upsert
   */
  export type PriceAdjustmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceAdjustment to update in case it exists.
     */
    where: PriceAdjustmentWhereUniqueInput
    /**
     * In case the PriceAdjustment found by the `where` argument doesn't exist, create a new PriceAdjustment with this data.
     */
    create: XOR<PriceAdjustmentCreateInput, PriceAdjustmentUncheckedCreateInput>
    /**
     * In case the PriceAdjustment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceAdjustmentUpdateInput, PriceAdjustmentUncheckedUpdateInput>
  }

  /**
   * PriceAdjustment delete
   */
  export type PriceAdjustmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
    /**
     * Filter which PriceAdjustment to delete.
     */
    where: PriceAdjustmentWhereUniqueInput
  }

  /**
   * PriceAdjustment deleteMany
   */
  export type PriceAdjustmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceAdjustments to delete
     */
    where?: PriceAdjustmentWhereInput
    /**
     * Limit how many PriceAdjustments to delete.
     */
    limit?: number
  }

  /**
   * PriceAdjustment without action
   */
  export type PriceAdjustmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceAdjustment
     */
    select?: PriceAdjustmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceAdjustment
     */
    omit?: PriceAdjustmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceAdjustmentInclude<ExtArgs> | null
  }


  /**
   * Model TruckCapacity
   */

  export type AggregateTruckCapacity = {
    _count: TruckCapacityCountAggregateOutputType | null
    _avg: TruckCapacityAvgAggregateOutputType | null
    _sum: TruckCapacitySumAggregateOutputType | null
    _min: TruckCapacityMinAggregateOutputType | null
    _max: TruckCapacityMaxAggregateOutputType | null
  }

  export type TruckCapacityAvgAggregateOutputType = {
    maxPallets: number | null
    currentLoad: number | null
    availableSpace: number | null
  }

  export type TruckCapacitySumAggregateOutputType = {
    maxPallets: number | null
    currentLoad: number | null
    availableSpace: number | null
  }

  export type TruckCapacityMinAggregateOutputType = {
    id: string | null
    truckId: string | null
    maxPallets: number | null
    currentLoad: number | null
    availableSpace: number | null
    isActive: boolean | null
    updatedAt: Date | null
  }

  export type TruckCapacityMaxAggregateOutputType = {
    id: string | null
    truckId: string | null
    maxPallets: number | null
    currentLoad: number | null
    availableSpace: number | null
    isActive: boolean | null
    updatedAt: Date | null
  }

  export type TruckCapacityCountAggregateOutputType = {
    id: number
    truckId: number
    maxPallets: number
    currentLoad: number
    availableSpace: number
    isActive: number
    updatedAt: number
    _all: number
  }


  export type TruckCapacityAvgAggregateInputType = {
    maxPallets?: true
    currentLoad?: true
    availableSpace?: true
  }

  export type TruckCapacitySumAggregateInputType = {
    maxPallets?: true
    currentLoad?: true
    availableSpace?: true
  }

  export type TruckCapacityMinAggregateInputType = {
    id?: true
    truckId?: true
    maxPallets?: true
    currentLoad?: true
    availableSpace?: true
    isActive?: true
    updatedAt?: true
  }

  export type TruckCapacityMaxAggregateInputType = {
    id?: true
    truckId?: true
    maxPallets?: true
    currentLoad?: true
    availableSpace?: true
    isActive?: true
    updatedAt?: true
  }

  export type TruckCapacityCountAggregateInputType = {
    id?: true
    truckId?: true
    maxPallets?: true
    currentLoad?: true
    availableSpace?: true
    isActive?: true
    updatedAt?: true
    _all?: true
  }

  export type TruckCapacityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TruckCapacity to aggregate.
     */
    where?: TruckCapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckCapacities to fetch.
     */
    orderBy?: TruckCapacityOrderByWithRelationInput | TruckCapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TruckCapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckCapacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckCapacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TruckCapacities
    **/
    _count?: true | TruckCapacityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TruckCapacityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TruckCapacitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TruckCapacityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TruckCapacityMaxAggregateInputType
  }

  export type GetTruckCapacityAggregateType<T extends TruckCapacityAggregateArgs> = {
        [P in keyof T & keyof AggregateTruckCapacity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTruckCapacity[P]>
      : GetScalarType<T[P], AggregateTruckCapacity[P]>
  }




  export type TruckCapacityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TruckCapacityWhereInput
    orderBy?: TruckCapacityOrderByWithAggregationInput | TruckCapacityOrderByWithAggregationInput[]
    by: TruckCapacityScalarFieldEnum[] | TruckCapacityScalarFieldEnum
    having?: TruckCapacityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TruckCapacityCountAggregateInputType | true
    _avg?: TruckCapacityAvgAggregateInputType
    _sum?: TruckCapacitySumAggregateInputType
    _min?: TruckCapacityMinAggregateInputType
    _max?: TruckCapacityMaxAggregateInputType
  }

  export type TruckCapacityGroupByOutputType = {
    id: string
    truckId: string
    maxPallets: number
    currentLoad: number
    availableSpace: number
    isActive: boolean
    updatedAt: Date
    _count: TruckCapacityCountAggregateOutputType | null
    _avg: TruckCapacityAvgAggregateOutputType | null
    _sum: TruckCapacitySumAggregateOutputType | null
    _min: TruckCapacityMinAggregateOutputType | null
    _max: TruckCapacityMaxAggregateOutputType | null
  }

  type GetTruckCapacityGroupByPayload<T extends TruckCapacityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TruckCapacityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TruckCapacityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TruckCapacityGroupByOutputType[P]>
            : GetScalarType<T[P], TruckCapacityGroupByOutputType[P]>
        }
      >
    >


  export type TruckCapacitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    truckId?: boolean
    maxPallets?: boolean
    currentLoad?: boolean
    availableSpace?: boolean
    isActive?: boolean
    updatedAt?: boolean
    transportOrders?: boolean | TruckCapacity$transportOrdersArgs<ExtArgs>
    _count?: boolean | TruckCapacityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["truckCapacity"]>

  export type TruckCapacitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    truckId?: boolean
    maxPallets?: boolean
    currentLoad?: boolean
    availableSpace?: boolean
    isActive?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["truckCapacity"]>

  export type TruckCapacitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    truckId?: boolean
    maxPallets?: boolean
    currentLoad?: boolean
    availableSpace?: boolean
    isActive?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["truckCapacity"]>

  export type TruckCapacitySelectScalar = {
    id?: boolean
    truckId?: boolean
    maxPallets?: boolean
    currentLoad?: boolean
    availableSpace?: boolean
    isActive?: boolean
    updatedAt?: boolean
  }

  export type TruckCapacityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "truckId" | "maxPallets" | "currentLoad" | "availableSpace" | "isActive" | "updatedAt", ExtArgs["result"]["truckCapacity"]>
  export type TruckCapacityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transportOrders?: boolean | TruckCapacity$transportOrdersArgs<ExtArgs>
    _count?: boolean | TruckCapacityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TruckCapacityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TruckCapacityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TruckCapacityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TruckCapacity"
    objects: {
      transportOrders: Prisma.$TransportOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      truckId: string
      maxPallets: number
      currentLoad: number
      availableSpace: number
      isActive: boolean
      updatedAt: Date
    }, ExtArgs["result"]["truckCapacity"]>
    composites: {}
  }

  type TruckCapacityGetPayload<S extends boolean | null | undefined | TruckCapacityDefaultArgs> = $Result.GetResult<Prisma.$TruckCapacityPayload, S>

  type TruckCapacityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TruckCapacityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TruckCapacityCountAggregateInputType | true
    }

  export interface TruckCapacityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TruckCapacity'], meta: { name: 'TruckCapacity' } }
    /**
     * Find zero or one TruckCapacity that matches the filter.
     * @param {TruckCapacityFindUniqueArgs} args - Arguments to find a TruckCapacity
     * @example
     * // Get one TruckCapacity
     * const truckCapacity = await prisma.truckCapacity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TruckCapacityFindUniqueArgs>(args: SelectSubset<T, TruckCapacityFindUniqueArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TruckCapacity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TruckCapacityFindUniqueOrThrowArgs} args - Arguments to find a TruckCapacity
     * @example
     * // Get one TruckCapacity
     * const truckCapacity = await prisma.truckCapacity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TruckCapacityFindUniqueOrThrowArgs>(args: SelectSubset<T, TruckCapacityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TruckCapacity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckCapacityFindFirstArgs} args - Arguments to find a TruckCapacity
     * @example
     * // Get one TruckCapacity
     * const truckCapacity = await prisma.truckCapacity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TruckCapacityFindFirstArgs>(args?: SelectSubset<T, TruckCapacityFindFirstArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TruckCapacity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckCapacityFindFirstOrThrowArgs} args - Arguments to find a TruckCapacity
     * @example
     * // Get one TruckCapacity
     * const truckCapacity = await prisma.truckCapacity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TruckCapacityFindFirstOrThrowArgs>(args?: SelectSubset<T, TruckCapacityFindFirstOrThrowArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TruckCapacities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckCapacityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TruckCapacities
     * const truckCapacities = await prisma.truckCapacity.findMany()
     * 
     * // Get first 10 TruckCapacities
     * const truckCapacities = await prisma.truckCapacity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const truckCapacityWithIdOnly = await prisma.truckCapacity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TruckCapacityFindManyArgs>(args?: SelectSubset<T, TruckCapacityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TruckCapacity.
     * @param {TruckCapacityCreateArgs} args - Arguments to create a TruckCapacity.
     * @example
     * // Create one TruckCapacity
     * const TruckCapacity = await prisma.truckCapacity.create({
     *   data: {
     *     // ... data to create a TruckCapacity
     *   }
     * })
     * 
     */
    create<T extends TruckCapacityCreateArgs>(args: SelectSubset<T, TruckCapacityCreateArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TruckCapacities.
     * @param {TruckCapacityCreateManyArgs} args - Arguments to create many TruckCapacities.
     * @example
     * // Create many TruckCapacities
     * const truckCapacity = await prisma.truckCapacity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TruckCapacityCreateManyArgs>(args?: SelectSubset<T, TruckCapacityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TruckCapacities and returns the data saved in the database.
     * @param {TruckCapacityCreateManyAndReturnArgs} args - Arguments to create many TruckCapacities.
     * @example
     * // Create many TruckCapacities
     * const truckCapacity = await prisma.truckCapacity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TruckCapacities and only return the `id`
     * const truckCapacityWithIdOnly = await prisma.truckCapacity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TruckCapacityCreateManyAndReturnArgs>(args?: SelectSubset<T, TruckCapacityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TruckCapacity.
     * @param {TruckCapacityDeleteArgs} args - Arguments to delete one TruckCapacity.
     * @example
     * // Delete one TruckCapacity
     * const TruckCapacity = await prisma.truckCapacity.delete({
     *   where: {
     *     // ... filter to delete one TruckCapacity
     *   }
     * })
     * 
     */
    delete<T extends TruckCapacityDeleteArgs>(args: SelectSubset<T, TruckCapacityDeleteArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TruckCapacity.
     * @param {TruckCapacityUpdateArgs} args - Arguments to update one TruckCapacity.
     * @example
     * // Update one TruckCapacity
     * const truckCapacity = await prisma.truckCapacity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TruckCapacityUpdateArgs>(args: SelectSubset<T, TruckCapacityUpdateArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TruckCapacities.
     * @param {TruckCapacityDeleteManyArgs} args - Arguments to filter TruckCapacities to delete.
     * @example
     * // Delete a few TruckCapacities
     * const { count } = await prisma.truckCapacity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TruckCapacityDeleteManyArgs>(args?: SelectSubset<T, TruckCapacityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TruckCapacities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckCapacityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TruckCapacities
     * const truckCapacity = await prisma.truckCapacity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TruckCapacityUpdateManyArgs>(args: SelectSubset<T, TruckCapacityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TruckCapacities and returns the data updated in the database.
     * @param {TruckCapacityUpdateManyAndReturnArgs} args - Arguments to update many TruckCapacities.
     * @example
     * // Update many TruckCapacities
     * const truckCapacity = await prisma.truckCapacity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TruckCapacities and only return the `id`
     * const truckCapacityWithIdOnly = await prisma.truckCapacity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TruckCapacityUpdateManyAndReturnArgs>(args: SelectSubset<T, TruckCapacityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TruckCapacity.
     * @param {TruckCapacityUpsertArgs} args - Arguments to update or create a TruckCapacity.
     * @example
     * // Update or create a TruckCapacity
     * const truckCapacity = await prisma.truckCapacity.upsert({
     *   create: {
     *     // ... data to create a TruckCapacity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TruckCapacity we want to update
     *   }
     * })
     */
    upsert<T extends TruckCapacityUpsertArgs>(args: SelectSubset<T, TruckCapacityUpsertArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TruckCapacities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckCapacityCountArgs} args - Arguments to filter TruckCapacities to count.
     * @example
     * // Count the number of TruckCapacities
     * const count = await prisma.truckCapacity.count({
     *   where: {
     *     // ... the filter for the TruckCapacities we want to count
     *   }
     * })
    **/
    count<T extends TruckCapacityCountArgs>(
      args?: Subset<T, TruckCapacityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TruckCapacityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TruckCapacity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckCapacityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TruckCapacityAggregateArgs>(args: Subset<T, TruckCapacityAggregateArgs>): Prisma.PrismaPromise<GetTruckCapacityAggregateType<T>>

    /**
     * Group by TruckCapacity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TruckCapacityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TruckCapacityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TruckCapacityGroupByArgs['orderBy'] }
        : { orderBy?: TruckCapacityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TruckCapacityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTruckCapacityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TruckCapacity model
   */
  readonly fields: TruckCapacityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TruckCapacity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TruckCapacityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transportOrders<T extends TruckCapacity$transportOrdersArgs<ExtArgs> = {}>(args?: Subset<T, TruckCapacity$transportOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TruckCapacity model
   */
  interface TruckCapacityFieldRefs {
    readonly id: FieldRef<"TruckCapacity", 'String'>
    readonly truckId: FieldRef<"TruckCapacity", 'String'>
    readonly maxPallets: FieldRef<"TruckCapacity", 'Int'>
    readonly currentLoad: FieldRef<"TruckCapacity", 'Int'>
    readonly availableSpace: FieldRef<"TruckCapacity", 'Int'>
    readonly isActive: FieldRef<"TruckCapacity", 'Boolean'>
    readonly updatedAt: FieldRef<"TruckCapacity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TruckCapacity findUnique
   */
  export type TruckCapacityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * Filter, which TruckCapacity to fetch.
     */
    where: TruckCapacityWhereUniqueInput
  }

  /**
   * TruckCapacity findUniqueOrThrow
   */
  export type TruckCapacityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * Filter, which TruckCapacity to fetch.
     */
    where: TruckCapacityWhereUniqueInput
  }

  /**
   * TruckCapacity findFirst
   */
  export type TruckCapacityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * Filter, which TruckCapacity to fetch.
     */
    where?: TruckCapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckCapacities to fetch.
     */
    orderBy?: TruckCapacityOrderByWithRelationInput | TruckCapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TruckCapacities.
     */
    cursor?: TruckCapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckCapacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckCapacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TruckCapacities.
     */
    distinct?: TruckCapacityScalarFieldEnum | TruckCapacityScalarFieldEnum[]
  }

  /**
   * TruckCapacity findFirstOrThrow
   */
  export type TruckCapacityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * Filter, which TruckCapacity to fetch.
     */
    where?: TruckCapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckCapacities to fetch.
     */
    orderBy?: TruckCapacityOrderByWithRelationInput | TruckCapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TruckCapacities.
     */
    cursor?: TruckCapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckCapacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckCapacities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TruckCapacities.
     */
    distinct?: TruckCapacityScalarFieldEnum | TruckCapacityScalarFieldEnum[]
  }

  /**
   * TruckCapacity findMany
   */
  export type TruckCapacityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * Filter, which TruckCapacities to fetch.
     */
    where?: TruckCapacityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TruckCapacities to fetch.
     */
    orderBy?: TruckCapacityOrderByWithRelationInput | TruckCapacityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TruckCapacities.
     */
    cursor?: TruckCapacityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TruckCapacities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TruckCapacities.
     */
    skip?: number
    distinct?: TruckCapacityScalarFieldEnum | TruckCapacityScalarFieldEnum[]
  }

  /**
   * TruckCapacity create
   */
  export type TruckCapacityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * The data needed to create a TruckCapacity.
     */
    data: XOR<TruckCapacityCreateInput, TruckCapacityUncheckedCreateInput>
  }

  /**
   * TruckCapacity createMany
   */
  export type TruckCapacityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TruckCapacities.
     */
    data: TruckCapacityCreateManyInput | TruckCapacityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TruckCapacity createManyAndReturn
   */
  export type TruckCapacityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * The data used to create many TruckCapacities.
     */
    data: TruckCapacityCreateManyInput | TruckCapacityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TruckCapacity update
   */
  export type TruckCapacityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * The data needed to update a TruckCapacity.
     */
    data: XOR<TruckCapacityUpdateInput, TruckCapacityUncheckedUpdateInput>
    /**
     * Choose, which TruckCapacity to update.
     */
    where: TruckCapacityWhereUniqueInput
  }

  /**
   * TruckCapacity updateMany
   */
  export type TruckCapacityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TruckCapacities.
     */
    data: XOR<TruckCapacityUpdateManyMutationInput, TruckCapacityUncheckedUpdateManyInput>
    /**
     * Filter which TruckCapacities to update
     */
    where?: TruckCapacityWhereInput
    /**
     * Limit how many TruckCapacities to update.
     */
    limit?: number
  }

  /**
   * TruckCapacity updateManyAndReturn
   */
  export type TruckCapacityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * The data used to update TruckCapacities.
     */
    data: XOR<TruckCapacityUpdateManyMutationInput, TruckCapacityUncheckedUpdateManyInput>
    /**
     * Filter which TruckCapacities to update
     */
    where?: TruckCapacityWhereInput
    /**
     * Limit how many TruckCapacities to update.
     */
    limit?: number
  }

  /**
   * TruckCapacity upsert
   */
  export type TruckCapacityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * The filter to search for the TruckCapacity to update in case it exists.
     */
    where: TruckCapacityWhereUniqueInput
    /**
     * In case the TruckCapacity found by the `where` argument doesn't exist, create a new TruckCapacity with this data.
     */
    create: XOR<TruckCapacityCreateInput, TruckCapacityUncheckedCreateInput>
    /**
     * In case the TruckCapacity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TruckCapacityUpdateInput, TruckCapacityUncheckedUpdateInput>
  }

  /**
   * TruckCapacity delete
   */
  export type TruckCapacityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    /**
     * Filter which TruckCapacity to delete.
     */
    where: TruckCapacityWhereUniqueInput
  }

  /**
   * TruckCapacity deleteMany
   */
  export type TruckCapacityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TruckCapacities to delete
     */
    where?: TruckCapacityWhereInput
    /**
     * Limit how many TruckCapacities to delete.
     */
    limit?: number
  }

  /**
   * TruckCapacity.transportOrders
   */
  export type TruckCapacity$transportOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    where?: TransportOrderWhereInput
    orderBy?: TransportOrderOrderByWithRelationInput | TransportOrderOrderByWithRelationInput[]
    cursor?: TransportOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransportOrderScalarFieldEnum | TransportOrderScalarFieldEnum[]
  }

  /**
   * TruckCapacity without action
   */
  export type TruckCapacityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
  }


  /**
   * Model TransportOrder
   */

  export type AggregateTransportOrder = {
    _count: TransportOrderCountAggregateOutputType | null
    _avg: TransportOrderAvgAggregateOutputType | null
    _sum: TransportOrderSumAggregateOutputType | null
    _min: TransportOrderMinAggregateOutputType | null
    _max: TransportOrderMaxAggregateOutputType | null
  }

  export type TransportOrderAvgAggregateOutputType = {
    totalOrderAmount: Decimal | null
    fuelRequired: Decimal | null
    fuelPricePerLiter: Decimal | null
    totalFuelCost: Decimal | null
    serviceCharge: Decimal | null
    truckExpenses: Decimal | null
    driverSalary: Decimal | null
  }

  export type TransportOrderSumAggregateOutputType = {
    totalOrderAmount: Decimal | null
    fuelRequired: Decimal | null
    fuelPricePerLiter: Decimal | null
    totalFuelCost: Decimal | null
    serviceCharge: Decimal | null
    truckExpenses: Decimal | null
    driverSalary: Decimal | null
  }

  export type TransportOrderMinAggregateOutputType = {
    id: string | null
    distributionOrderId: string | null
    orderNumber: string | null
    invoiceNumber: string | null
    locationId: string | null
    truckId: string | null
    totalOrderAmount: Decimal | null
    fuelRequired: Decimal | null
    fuelPricePerLiter: Decimal | null
    totalFuelCost: Decimal | null
    serviceCharge: Decimal | null
    truckExpenses: Decimal | null
    driverSalary: Decimal | null
    driverDetails: string | null
    deliveryStatus: $Enums.DeliveryStatus | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deliveredAt: Date | null
  }

  export type TransportOrderMaxAggregateOutputType = {
    id: string | null
    distributionOrderId: string | null
    orderNumber: string | null
    invoiceNumber: string | null
    locationId: string | null
    truckId: string | null
    totalOrderAmount: Decimal | null
    fuelRequired: Decimal | null
    fuelPricePerLiter: Decimal | null
    totalFuelCost: Decimal | null
    serviceCharge: Decimal | null
    truckExpenses: Decimal | null
    driverSalary: Decimal | null
    driverDetails: string | null
    deliveryStatus: $Enums.DeliveryStatus | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deliveredAt: Date | null
  }

  export type TransportOrderCountAggregateOutputType = {
    id: number
    distributionOrderId: number
    orderNumber: number
    invoiceNumber: number
    locationId: number
    truckId: number
    totalOrderAmount: number
    fuelRequired: number
    fuelPricePerLiter: number
    totalFuelCost: number
    serviceCharge: number
    truckExpenses: number
    driverSalary: number
    driverDetails: number
    deliveryStatus: number
    createdBy: number
    createdAt: number
    updatedAt: number
    deliveredAt: number
    _all: number
  }


  export type TransportOrderAvgAggregateInputType = {
    totalOrderAmount?: true
    fuelRequired?: true
    fuelPricePerLiter?: true
    totalFuelCost?: true
    serviceCharge?: true
    truckExpenses?: true
    driverSalary?: true
  }

  export type TransportOrderSumAggregateInputType = {
    totalOrderAmount?: true
    fuelRequired?: true
    fuelPricePerLiter?: true
    totalFuelCost?: true
    serviceCharge?: true
    truckExpenses?: true
    driverSalary?: true
  }

  export type TransportOrderMinAggregateInputType = {
    id?: true
    distributionOrderId?: true
    orderNumber?: true
    invoiceNumber?: true
    locationId?: true
    truckId?: true
    totalOrderAmount?: true
    fuelRequired?: true
    fuelPricePerLiter?: true
    totalFuelCost?: true
    serviceCharge?: true
    truckExpenses?: true
    driverSalary?: true
    driverDetails?: true
    deliveryStatus?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    deliveredAt?: true
  }

  export type TransportOrderMaxAggregateInputType = {
    id?: true
    distributionOrderId?: true
    orderNumber?: true
    invoiceNumber?: true
    locationId?: true
    truckId?: true
    totalOrderAmount?: true
    fuelRequired?: true
    fuelPricePerLiter?: true
    totalFuelCost?: true
    serviceCharge?: true
    truckExpenses?: true
    driverSalary?: true
    driverDetails?: true
    deliveryStatus?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    deliveredAt?: true
  }

  export type TransportOrderCountAggregateInputType = {
    id?: true
    distributionOrderId?: true
    orderNumber?: true
    invoiceNumber?: true
    locationId?: true
    truckId?: true
    totalOrderAmount?: true
    fuelRequired?: true
    fuelPricePerLiter?: true
    totalFuelCost?: true
    serviceCharge?: true
    truckExpenses?: true
    driverSalary?: true
    driverDetails?: true
    deliveryStatus?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    deliveredAt?: true
    _all?: true
  }

  export type TransportOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransportOrder to aggregate.
     */
    where?: TransportOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransportOrders to fetch.
     */
    orderBy?: TransportOrderOrderByWithRelationInput | TransportOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransportOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransportOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransportOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransportOrders
    **/
    _count?: true | TransportOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransportOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransportOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransportOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransportOrderMaxAggregateInputType
  }

  export type GetTransportOrderAggregateType<T extends TransportOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateTransportOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransportOrder[P]>
      : GetScalarType<T[P], AggregateTransportOrder[P]>
  }




  export type TransportOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransportOrderWhereInput
    orderBy?: TransportOrderOrderByWithAggregationInput | TransportOrderOrderByWithAggregationInput[]
    by: TransportOrderScalarFieldEnum[] | TransportOrderScalarFieldEnum
    having?: TransportOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransportOrderCountAggregateInputType | true
    _avg?: TransportOrderAvgAggregateInputType
    _sum?: TransportOrderSumAggregateInputType
    _min?: TransportOrderMinAggregateInputType
    _max?: TransportOrderMaxAggregateInputType
  }

  export type TransportOrderGroupByOutputType = {
    id: string
    distributionOrderId: string | null
    orderNumber: string
    invoiceNumber: string | null
    locationId: string
    truckId: string | null
    totalOrderAmount: Decimal
    fuelRequired: Decimal
    fuelPricePerLiter: Decimal
    totalFuelCost: Decimal
    serviceCharge: Decimal
    truckExpenses: Decimal
    driverSalary: Decimal
    driverDetails: string | null
    deliveryStatus: $Enums.DeliveryStatus
    createdBy: string
    createdAt: Date
    updatedAt: Date
    deliveredAt: Date | null
    _count: TransportOrderCountAggregateOutputType | null
    _avg: TransportOrderAvgAggregateOutputType | null
    _sum: TransportOrderSumAggregateOutputType | null
    _min: TransportOrderMinAggregateOutputType | null
    _max: TransportOrderMaxAggregateOutputType | null
  }

  type GetTransportOrderGroupByPayload<T extends TransportOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransportOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransportOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransportOrderGroupByOutputType[P]>
            : GetScalarType<T[P], TransportOrderGroupByOutputType[P]>
        }
      >
    >


  export type TransportOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionOrderId?: boolean
    orderNumber?: boolean
    invoiceNumber?: boolean
    locationId?: boolean
    truckId?: boolean
    totalOrderAmount?: boolean
    fuelRequired?: boolean
    fuelPricePerLiter?: boolean
    totalFuelCost?: boolean
    serviceCharge?: boolean
    truckExpenses?: boolean
    driverSalary?: boolean
    driverDetails?: boolean
    deliveryStatus?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deliveredAt?: boolean
    distributionOrder?: boolean | TransportOrder$distributionOrderArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    truck?: boolean | TransportOrder$truckArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transportOrder"]>

  export type TransportOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionOrderId?: boolean
    orderNumber?: boolean
    invoiceNumber?: boolean
    locationId?: boolean
    truckId?: boolean
    totalOrderAmount?: boolean
    fuelRequired?: boolean
    fuelPricePerLiter?: boolean
    totalFuelCost?: boolean
    serviceCharge?: boolean
    truckExpenses?: boolean
    driverSalary?: boolean
    driverDetails?: boolean
    deliveryStatus?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deliveredAt?: boolean
    distributionOrder?: boolean | TransportOrder$distributionOrderArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    truck?: boolean | TransportOrder$truckArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transportOrder"]>

  export type TransportOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionOrderId?: boolean
    orderNumber?: boolean
    invoiceNumber?: boolean
    locationId?: boolean
    truckId?: boolean
    totalOrderAmount?: boolean
    fuelRequired?: boolean
    fuelPricePerLiter?: boolean
    totalFuelCost?: boolean
    serviceCharge?: boolean
    truckExpenses?: boolean
    driverSalary?: boolean
    driverDetails?: boolean
    deliveryStatus?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deliveredAt?: boolean
    distributionOrder?: boolean | TransportOrder$distributionOrderArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    truck?: boolean | TransportOrder$truckArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transportOrder"]>

  export type TransportOrderSelectScalar = {
    id?: boolean
    distributionOrderId?: boolean
    orderNumber?: boolean
    invoiceNumber?: boolean
    locationId?: boolean
    truckId?: boolean
    totalOrderAmount?: boolean
    fuelRequired?: boolean
    fuelPricePerLiter?: boolean
    totalFuelCost?: boolean
    serviceCharge?: boolean
    truckExpenses?: boolean
    driverSalary?: boolean
    driverDetails?: boolean
    deliveryStatus?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deliveredAt?: boolean
  }

  export type TransportOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "distributionOrderId" | "orderNumber" | "invoiceNumber" | "locationId" | "truckId" | "totalOrderAmount" | "fuelRequired" | "fuelPricePerLiter" | "totalFuelCost" | "serviceCharge" | "truckExpenses" | "driverSalary" | "driverDetails" | "deliveryStatus" | "createdBy" | "createdAt" | "updatedAt" | "deliveredAt", ExtArgs["result"]["transportOrder"]>
  export type TransportOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrder?: boolean | TransportOrder$distributionOrderArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    truck?: boolean | TransportOrder$truckArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TransportOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrder?: boolean | TransportOrder$distributionOrderArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    truck?: boolean | TransportOrder$truckArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TransportOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionOrder?: boolean | TransportOrder$distributionOrderArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    truck?: boolean | TransportOrder$truckArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TransportOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransportOrder"
    objects: {
      distributionOrder: Prisma.$DistributionOrderPayload<ExtArgs> | null
      location: Prisma.$LocationPayload<ExtArgs>
      truck: Prisma.$TruckCapacityPayload<ExtArgs> | null
      createdByUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      distributionOrderId: string | null
      orderNumber: string
      invoiceNumber: string | null
      locationId: string
      truckId: string | null
      totalOrderAmount: Prisma.Decimal
      fuelRequired: Prisma.Decimal
      fuelPricePerLiter: Prisma.Decimal
      totalFuelCost: Prisma.Decimal
      serviceCharge: Prisma.Decimal
      truckExpenses: Prisma.Decimal
      driverSalary: Prisma.Decimal
      driverDetails: string | null
      deliveryStatus: $Enums.DeliveryStatus
      createdBy: string
      createdAt: Date
      updatedAt: Date
      deliveredAt: Date | null
    }, ExtArgs["result"]["transportOrder"]>
    composites: {}
  }

  type TransportOrderGetPayload<S extends boolean | null | undefined | TransportOrderDefaultArgs> = $Result.GetResult<Prisma.$TransportOrderPayload, S>

  type TransportOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransportOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransportOrderCountAggregateInputType | true
    }

  export interface TransportOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransportOrder'], meta: { name: 'TransportOrder' } }
    /**
     * Find zero or one TransportOrder that matches the filter.
     * @param {TransportOrderFindUniqueArgs} args - Arguments to find a TransportOrder
     * @example
     * // Get one TransportOrder
     * const transportOrder = await prisma.transportOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransportOrderFindUniqueArgs>(args: SelectSubset<T, TransportOrderFindUniqueArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TransportOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransportOrderFindUniqueOrThrowArgs} args - Arguments to find a TransportOrder
     * @example
     * // Get one TransportOrder
     * const transportOrder = await prisma.transportOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransportOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, TransportOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransportOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportOrderFindFirstArgs} args - Arguments to find a TransportOrder
     * @example
     * // Get one TransportOrder
     * const transportOrder = await prisma.transportOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransportOrderFindFirstArgs>(args?: SelectSubset<T, TransportOrderFindFirstArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransportOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportOrderFindFirstOrThrowArgs} args - Arguments to find a TransportOrder
     * @example
     * // Get one TransportOrder
     * const transportOrder = await prisma.transportOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransportOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, TransportOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TransportOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransportOrders
     * const transportOrders = await prisma.transportOrder.findMany()
     * 
     * // Get first 10 TransportOrders
     * const transportOrders = await prisma.transportOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transportOrderWithIdOnly = await prisma.transportOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransportOrderFindManyArgs>(args?: SelectSubset<T, TransportOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TransportOrder.
     * @param {TransportOrderCreateArgs} args - Arguments to create a TransportOrder.
     * @example
     * // Create one TransportOrder
     * const TransportOrder = await prisma.transportOrder.create({
     *   data: {
     *     // ... data to create a TransportOrder
     *   }
     * })
     * 
     */
    create<T extends TransportOrderCreateArgs>(args: SelectSubset<T, TransportOrderCreateArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TransportOrders.
     * @param {TransportOrderCreateManyArgs} args - Arguments to create many TransportOrders.
     * @example
     * // Create many TransportOrders
     * const transportOrder = await prisma.transportOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransportOrderCreateManyArgs>(args?: SelectSubset<T, TransportOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TransportOrders and returns the data saved in the database.
     * @param {TransportOrderCreateManyAndReturnArgs} args - Arguments to create many TransportOrders.
     * @example
     * // Create many TransportOrders
     * const transportOrder = await prisma.transportOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TransportOrders and only return the `id`
     * const transportOrderWithIdOnly = await prisma.transportOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransportOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, TransportOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TransportOrder.
     * @param {TransportOrderDeleteArgs} args - Arguments to delete one TransportOrder.
     * @example
     * // Delete one TransportOrder
     * const TransportOrder = await prisma.transportOrder.delete({
     *   where: {
     *     // ... filter to delete one TransportOrder
     *   }
     * })
     * 
     */
    delete<T extends TransportOrderDeleteArgs>(args: SelectSubset<T, TransportOrderDeleteArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TransportOrder.
     * @param {TransportOrderUpdateArgs} args - Arguments to update one TransportOrder.
     * @example
     * // Update one TransportOrder
     * const transportOrder = await prisma.transportOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransportOrderUpdateArgs>(args: SelectSubset<T, TransportOrderUpdateArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TransportOrders.
     * @param {TransportOrderDeleteManyArgs} args - Arguments to filter TransportOrders to delete.
     * @example
     * // Delete a few TransportOrders
     * const { count } = await prisma.transportOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransportOrderDeleteManyArgs>(args?: SelectSubset<T, TransportOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransportOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransportOrders
     * const transportOrder = await prisma.transportOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransportOrderUpdateManyArgs>(args: SelectSubset<T, TransportOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransportOrders and returns the data updated in the database.
     * @param {TransportOrderUpdateManyAndReturnArgs} args - Arguments to update many TransportOrders.
     * @example
     * // Update many TransportOrders
     * const transportOrder = await prisma.transportOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TransportOrders and only return the `id`
     * const transportOrderWithIdOnly = await prisma.transportOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransportOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, TransportOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TransportOrder.
     * @param {TransportOrderUpsertArgs} args - Arguments to update or create a TransportOrder.
     * @example
     * // Update or create a TransportOrder
     * const transportOrder = await prisma.transportOrder.upsert({
     *   create: {
     *     // ... data to create a TransportOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransportOrder we want to update
     *   }
     * })
     */
    upsert<T extends TransportOrderUpsertArgs>(args: SelectSubset<T, TransportOrderUpsertArgs<ExtArgs>>): Prisma__TransportOrderClient<$Result.GetResult<Prisma.$TransportOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TransportOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportOrderCountArgs} args - Arguments to filter TransportOrders to count.
     * @example
     * // Count the number of TransportOrders
     * const count = await prisma.transportOrder.count({
     *   where: {
     *     // ... the filter for the TransportOrders we want to count
     *   }
     * })
    **/
    count<T extends TransportOrderCountArgs>(
      args?: Subset<T, TransportOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransportOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransportOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransportOrderAggregateArgs>(args: Subset<T, TransportOrderAggregateArgs>): Prisma.PrismaPromise<GetTransportOrderAggregateType<T>>

    /**
     * Group by TransportOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransportOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransportOrderGroupByArgs['orderBy'] }
        : { orderBy?: TransportOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransportOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransportOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransportOrder model
   */
  readonly fields: TransportOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransportOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransportOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distributionOrder<T extends TransportOrder$distributionOrderArgs<ExtArgs> = {}>(args?: Subset<T, TransportOrder$distributionOrderArgs<ExtArgs>>): Prisma__DistributionOrderClient<$Result.GetResult<Prisma.$DistributionOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    truck<T extends TransportOrder$truckArgs<ExtArgs> = {}>(args?: Subset<T, TransportOrder$truckArgs<ExtArgs>>): Prisma__TruckCapacityClient<$Result.GetResult<Prisma.$TruckCapacityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TransportOrder model
   */
  interface TransportOrderFieldRefs {
    readonly id: FieldRef<"TransportOrder", 'String'>
    readonly distributionOrderId: FieldRef<"TransportOrder", 'String'>
    readonly orderNumber: FieldRef<"TransportOrder", 'String'>
    readonly invoiceNumber: FieldRef<"TransportOrder", 'String'>
    readonly locationId: FieldRef<"TransportOrder", 'String'>
    readonly truckId: FieldRef<"TransportOrder", 'String'>
    readonly totalOrderAmount: FieldRef<"TransportOrder", 'Decimal'>
    readonly fuelRequired: FieldRef<"TransportOrder", 'Decimal'>
    readonly fuelPricePerLiter: FieldRef<"TransportOrder", 'Decimal'>
    readonly totalFuelCost: FieldRef<"TransportOrder", 'Decimal'>
    readonly serviceCharge: FieldRef<"TransportOrder", 'Decimal'>
    readonly truckExpenses: FieldRef<"TransportOrder", 'Decimal'>
    readonly driverSalary: FieldRef<"TransportOrder", 'Decimal'>
    readonly driverDetails: FieldRef<"TransportOrder", 'String'>
    readonly deliveryStatus: FieldRef<"TransportOrder", 'DeliveryStatus'>
    readonly createdBy: FieldRef<"TransportOrder", 'String'>
    readonly createdAt: FieldRef<"TransportOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"TransportOrder", 'DateTime'>
    readonly deliveredAt: FieldRef<"TransportOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TransportOrder findUnique
   */
  export type TransportOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * Filter, which TransportOrder to fetch.
     */
    where: TransportOrderWhereUniqueInput
  }

  /**
   * TransportOrder findUniqueOrThrow
   */
  export type TransportOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * Filter, which TransportOrder to fetch.
     */
    where: TransportOrderWhereUniqueInput
  }

  /**
   * TransportOrder findFirst
   */
  export type TransportOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * Filter, which TransportOrder to fetch.
     */
    where?: TransportOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransportOrders to fetch.
     */
    orderBy?: TransportOrderOrderByWithRelationInput | TransportOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransportOrders.
     */
    cursor?: TransportOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransportOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransportOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransportOrders.
     */
    distinct?: TransportOrderScalarFieldEnum | TransportOrderScalarFieldEnum[]
  }

  /**
   * TransportOrder findFirstOrThrow
   */
  export type TransportOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * Filter, which TransportOrder to fetch.
     */
    where?: TransportOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransportOrders to fetch.
     */
    orderBy?: TransportOrderOrderByWithRelationInput | TransportOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransportOrders.
     */
    cursor?: TransportOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransportOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransportOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransportOrders.
     */
    distinct?: TransportOrderScalarFieldEnum | TransportOrderScalarFieldEnum[]
  }

  /**
   * TransportOrder findMany
   */
  export type TransportOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * Filter, which TransportOrders to fetch.
     */
    where?: TransportOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransportOrders to fetch.
     */
    orderBy?: TransportOrderOrderByWithRelationInput | TransportOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransportOrders.
     */
    cursor?: TransportOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransportOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransportOrders.
     */
    skip?: number
    distinct?: TransportOrderScalarFieldEnum | TransportOrderScalarFieldEnum[]
  }

  /**
   * TransportOrder create
   */
  export type TransportOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a TransportOrder.
     */
    data: XOR<TransportOrderCreateInput, TransportOrderUncheckedCreateInput>
  }

  /**
   * TransportOrder createMany
   */
  export type TransportOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransportOrders.
     */
    data: TransportOrderCreateManyInput | TransportOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TransportOrder createManyAndReturn
   */
  export type TransportOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * The data used to create many TransportOrders.
     */
    data: TransportOrderCreateManyInput | TransportOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransportOrder update
   */
  export type TransportOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a TransportOrder.
     */
    data: XOR<TransportOrderUpdateInput, TransportOrderUncheckedUpdateInput>
    /**
     * Choose, which TransportOrder to update.
     */
    where: TransportOrderWhereUniqueInput
  }

  /**
   * TransportOrder updateMany
   */
  export type TransportOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransportOrders.
     */
    data: XOR<TransportOrderUpdateManyMutationInput, TransportOrderUncheckedUpdateManyInput>
    /**
     * Filter which TransportOrders to update
     */
    where?: TransportOrderWhereInput
    /**
     * Limit how many TransportOrders to update.
     */
    limit?: number
  }

  /**
   * TransportOrder updateManyAndReturn
   */
  export type TransportOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * The data used to update TransportOrders.
     */
    data: XOR<TransportOrderUpdateManyMutationInput, TransportOrderUncheckedUpdateManyInput>
    /**
     * Filter which TransportOrders to update
     */
    where?: TransportOrderWhereInput
    /**
     * Limit how many TransportOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransportOrder upsert
   */
  export type TransportOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the TransportOrder to update in case it exists.
     */
    where: TransportOrderWhereUniqueInput
    /**
     * In case the TransportOrder found by the `where` argument doesn't exist, create a new TransportOrder with this data.
     */
    create: XOR<TransportOrderCreateInput, TransportOrderUncheckedCreateInput>
    /**
     * In case the TransportOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransportOrderUpdateInput, TransportOrderUncheckedUpdateInput>
  }

  /**
   * TransportOrder delete
   */
  export type TransportOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
    /**
     * Filter which TransportOrder to delete.
     */
    where: TransportOrderWhereUniqueInput
  }

  /**
   * TransportOrder deleteMany
   */
  export type TransportOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransportOrders to delete
     */
    where?: TransportOrderWhereInput
    /**
     * Limit how many TransportOrders to delete.
     */
    limit?: number
  }

  /**
   * TransportOrder.distributionOrder
   */
  export type TransportOrder$distributionOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionOrder
     */
    select?: DistributionOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionOrder
     */
    omit?: DistributionOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionOrderInclude<ExtArgs> | null
    where?: DistributionOrderWhereInput
  }

  /**
   * TransportOrder.truck
   */
  export type TransportOrder$truckArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TruckCapacity
     */
    select?: TruckCapacitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TruckCapacity
     */
    omit?: TruckCapacityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TruckCapacityInclude<ExtArgs> | null
    where?: TruckCapacityWhereInput
  }

  /**
   * TransportOrder without action
   */
  export type TransportOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportOrder
     */
    select?: TransportOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransportOrder
     */
    omit?: TransportOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportOrderInclude<ExtArgs> | null
  }


  /**
   * Model WarehouseInventory
   */

  export type AggregateWarehouseInventory = {
    _count: WarehouseInventoryCountAggregateOutputType | null
    _avg: WarehouseInventoryAvgAggregateOutputType | null
    _sum: WarehouseInventorySumAggregateOutputType | null
    _min: WarehouseInventoryMinAggregateOutputType | null
    _max: WarehouseInventoryMaxAggregateOutputType | null
  }

  export type WarehouseInventoryAvgAggregateOutputType = {
    pallets: number | null
    packs: number | null
    units: number | null
    reorderLevel: number | null
    maxStockLevel: number | null
  }

  export type WarehouseInventorySumAggregateOutputType = {
    pallets: number | null
    packs: number | null
    units: number | null
    reorderLevel: number | null
    maxStockLevel: number | null
  }

  export type WarehouseInventoryMinAggregateOutputType = {
    id: string | null
    productId: string | null
    pallets: number | null
    packs: number | null
    units: number | null
    reorderLevel: number | null
    maxStockLevel: number | null
    location: string | null
    lastUpdated: Date | null
    createdAt: Date | null
  }

  export type WarehouseInventoryMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    pallets: number | null
    packs: number | null
    units: number | null
    reorderLevel: number | null
    maxStockLevel: number | null
    location: string | null
    lastUpdated: Date | null
    createdAt: Date | null
  }

  export type WarehouseInventoryCountAggregateOutputType = {
    id: number
    productId: number
    pallets: number
    packs: number
    units: number
    reorderLevel: number
    maxStockLevel: number
    location: number
    lastUpdated: number
    createdAt: number
    _all: number
  }


  export type WarehouseInventoryAvgAggregateInputType = {
    pallets?: true
    packs?: true
    units?: true
    reorderLevel?: true
    maxStockLevel?: true
  }

  export type WarehouseInventorySumAggregateInputType = {
    pallets?: true
    packs?: true
    units?: true
    reorderLevel?: true
    maxStockLevel?: true
  }

  export type WarehouseInventoryMinAggregateInputType = {
    id?: true
    productId?: true
    pallets?: true
    packs?: true
    units?: true
    reorderLevel?: true
    maxStockLevel?: true
    location?: true
    lastUpdated?: true
    createdAt?: true
  }

  export type WarehouseInventoryMaxAggregateInputType = {
    id?: true
    productId?: true
    pallets?: true
    packs?: true
    units?: true
    reorderLevel?: true
    maxStockLevel?: true
    location?: true
    lastUpdated?: true
    createdAt?: true
  }

  export type WarehouseInventoryCountAggregateInputType = {
    id?: true
    productId?: true
    pallets?: true
    packs?: true
    units?: true
    reorderLevel?: true
    maxStockLevel?: true
    location?: true
    lastUpdated?: true
    createdAt?: true
    _all?: true
  }

  export type WarehouseInventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WarehouseInventory to aggregate.
     */
    where?: WarehouseInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarehouseInventories to fetch.
     */
    orderBy?: WarehouseInventoryOrderByWithRelationInput | WarehouseInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WarehouseInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarehouseInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarehouseInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WarehouseInventories
    **/
    _count?: true | WarehouseInventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WarehouseInventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WarehouseInventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarehouseInventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarehouseInventoryMaxAggregateInputType
  }

  export type GetWarehouseInventoryAggregateType<T extends WarehouseInventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateWarehouseInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarehouseInventory[P]>
      : GetScalarType<T[P], AggregateWarehouseInventory[P]>
  }




  export type WarehouseInventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarehouseInventoryWhereInput
    orderBy?: WarehouseInventoryOrderByWithAggregationInput | WarehouseInventoryOrderByWithAggregationInput[]
    by: WarehouseInventoryScalarFieldEnum[] | WarehouseInventoryScalarFieldEnum
    having?: WarehouseInventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarehouseInventoryCountAggregateInputType | true
    _avg?: WarehouseInventoryAvgAggregateInputType
    _sum?: WarehouseInventorySumAggregateInputType
    _min?: WarehouseInventoryMinAggregateInputType
    _max?: WarehouseInventoryMaxAggregateInputType
  }

  export type WarehouseInventoryGroupByOutputType = {
    id: string
    productId: string
    pallets: number
    packs: number
    units: number
    reorderLevel: number
    maxStockLevel: number | null
    location: string | null
    lastUpdated: Date
    createdAt: Date
    _count: WarehouseInventoryCountAggregateOutputType | null
    _avg: WarehouseInventoryAvgAggregateOutputType | null
    _sum: WarehouseInventorySumAggregateOutputType | null
    _min: WarehouseInventoryMinAggregateOutputType | null
    _max: WarehouseInventoryMaxAggregateOutputType | null
  }

  type GetWarehouseInventoryGroupByPayload<T extends WarehouseInventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WarehouseInventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarehouseInventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarehouseInventoryGroupByOutputType[P]>
            : GetScalarType<T[P], WarehouseInventoryGroupByOutputType[P]>
        }
      >
    >


  export type WarehouseInventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    pallets?: boolean
    packs?: boolean
    units?: boolean
    reorderLevel?: boolean
    maxStockLevel?: boolean
    location?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouseInventory"]>

  export type WarehouseInventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    pallets?: boolean
    packs?: boolean
    units?: boolean
    reorderLevel?: boolean
    maxStockLevel?: boolean
    location?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouseInventory"]>

  export type WarehouseInventorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    pallets?: boolean
    packs?: boolean
    units?: boolean
    reorderLevel?: boolean
    maxStockLevel?: boolean
    location?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouseInventory"]>

  export type WarehouseInventorySelectScalar = {
    id?: boolean
    productId?: boolean
    pallets?: boolean
    packs?: boolean
    units?: boolean
    reorderLevel?: boolean
    maxStockLevel?: boolean
    location?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
  }

  export type WarehouseInventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "pallets" | "packs" | "units" | "reorderLevel" | "maxStockLevel" | "location" | "lastUpdated" | "createdAt", ExtArgs["result"]["warehouseInventory"]>
  export type WarehouseInventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type WarehouseInventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type WarehouseInventoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $WarehouseInventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WarehouseInventory"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      pallets: number
      packs: number
      units: number
      reorderLevel: number
      maxStockLevel: number | null
      location: string | null
      lastUpdated: Date
      createdAt: Date
    }, ExtArgs["result"]["warehouseInventory"]>
    composites: {}
  }

  type WarehouseInventoryGetPayload<S extends boolean | null | undefined | WarehouseInventoryDefaultArgs> = $Result.GetResult<Prisma.$WarehouseInventoryPayload, S>

  type WarehouseInventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WarehouseInventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WarehouseInventoryCountAggregateInputType | true
    }

  export interface WarehouseInventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WarehouseInventory'], meta: { name: 'WarehouseInventory' } }
    /**
     * Find zero or one WarehouseInventory that matches the filter.
     * @param {WarehouseInventoryFindUniqueArgs} args - Arguments to find a WarehouseInventory
     * @example
     * // Get one WarehouseInventory
     * const warehouseInventory = await prisma.warehouseInventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WarehouseInventoryFindUniqueArgs>(args: SelectSubset<T, WarehouseInventoryFindUniqueArgs<ExtArgs>>): Prisma__WarehouseInventoryClient<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WarehouseInventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WarehouseInventoryFindUniqueOrThrowArgs} args - Arguments to find a WarehouseInventory
     * @example
     * // Get one WarehouseInventory
     * const warehouseInventory = await prisma.warehouseInventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WarehouseInventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, WarehouseInventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WarehouseInventoryClient<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WarehouseInventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseInventoryFindFirstArgs} args - Arguments to find a WarehouseInventory
     * @example
     * // Get one WarehouseInventory
     * const warehouseInventory = await prisma.warehouseInventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WarehouseInventoryFindFirstArgs>(args?: SelectSubset<T, WarehouseInventoryFindFirstArgs<ExtArgs>>): Prisma__WarehouseInventoryClient<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WarehouseInventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseInventoryFindFirstOrThrowArgs} args - Arguments to find a WarehouseInventory
     * @example
     * // Get one WarehouseInventory
     * const warehouseInventory = await prisma.warehouseInventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WarehouseInventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, WarehouseInventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__WarehouseInventoryClient<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WarehouseInventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseInventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WarehouseInventories
     * const warehouseInventories = await prisma.warehouseInventory.findMany()
     * 
     * // Get first 10 WarehouseInventories
     * const warehouseInventories = await prisma.warehouseInventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warehouseInventoryWithIdOnly = await prisma.warehouseInventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WarehouseInventoryFindManyArgs>(args?: SelectSubset<T, WarehouseInventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WarehouseInventory.
     * @param {WarehouseInventoryCreateArgs} args - Arguments to create a WarehouseInventory.
     * @example
     * // Create one WarehouseInventory
     * const WarehouseInventory = await prisma.warehouseInventory.create({
     *   data: {
     *     // ... data to create a WarehouseInventory
     *   }
     * })
     * 
     */
    create<T extends WarehouseInventoryCreateArgs>(args: SelectSubset<T, WarehouseInventoryCreateArgs<ExtArgs>>): Prisma__WarehouseInventoryClient<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WarehouseInventories.
     * @param {WarehouseInventoryCreateManyArgs} args - Arguments to create many WarehouseInventories.
     * @example
     * // Create many WarehouseInventories
     * const warehouseInventory = await prisma.warehouseInventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WarehouseInventoryCreateManyArgs>(args?: SelectSubset<T, WarehouseInventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WarehouseInventories and returns the data saved in the database.
     * @param {WarehouseInventoryCreateManyAndReturnArgs} args - Arguments to create many WarehouseInventories.
     * @example
     * // Create many WarehouseInventories
     * const warehouseInventory = await prisma.warehouseInventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WarehouseInventories and only return the `id`
     * const warehouseInventoryWithIdOnly = await prisma.warehouseInventory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WarehouseInventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, WarehouseInventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WarehouseInventory.
     * @param {WarehouseInventoryDeleteArgs} args - Arguments to delete one WarehouseInventory.
     * @example
     * // Delete one WarehouseInventory
     * const WarehouseInventory = await prisma.warehouseInventory.delete({
     *   where: {
     *     // ... filter to delete one WarehouseInventory
     *   }
     * })
     * 
     */
    delete<T extends WarehouseInventoryDeleteArgs>(args: SelectSubset<T, WarehouseInventoryDeleteArgs<ExtArgs>>): Prisma__WarehouseInventoryClient<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WarehouseInventory.
     * @param {WarehouseInventoryUpdateArgs} args - Arguments to update one WarehouseInventory.
     * @example
     * // Update one WarehouseInventory
     * const warehouseInventory = await prisma.warehouseInventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WarehouseInventoryUpdateArgs>(args: SelectSubset<T, WarehouseInventoryUpdateArgs<ExtArgs>>): Prisma__WarehouseInventoryClient<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WarehouseInventories.
     * @param {WarehouseInventoryDeleteManyArgs} args - Arguments to filter WarehouseInventories to delete.
     * @example
     * // Delete a few WarehouseInventories
     * const { count } = await prisma.warehouseInventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WarehouseInventoryDeleteManyArgs>(args?: SelectSubset<T, WarehouseInventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WarehouseInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseInventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WarehouseInventories
     * const warehouseInventory = await prisma.warehouseInventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WarehouseInventoryUpdateManyArgs>(args: SelectSubset<T, WarehouseInventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WarehouseInventories and returns the data updated in the database.
     * @param {WarehouseInventoryUpdateManyAndReturnArgs} args - Arguments to update many WarehouseInventories.
     * @example
     * // Update many WarehouseInventories
     * const warehouseInventory = await prisma.warehouseInventory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WarehouseInventories and only return the `id`
     * const warehouseInventoryWithIdOnly = await prisma.warehouseInventory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WarehouseInventoryUpdateManyAndReturnArgs>(args: SelectSubset<T, WarehouseInventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WarehouseInventory.
     * @param {WarehouseInventoryUpsertArgs} args - Arguments to update or create a WarehouseInventory.
     * @example
     * // Update or create a WarehouseInventory
     * const warehouseInventory = await prisma.warehouseInventory.upsert({
     *   create: {
     *     // ... data to create a WarehouseInventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WarehouseInventory we want to update
     *   }
     * })
     */
    upsert<T extends WarehouseInventoryUpsertArgs>(args: SelectSubset<T, WarehouseInventoryUpsertArgs<ExtArgs>>): Prisma__WarehouseInventoryClient<$Result.GetResult<Prisma.$WarehouseInventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WarehouseInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseInventoryCountArgs} args - Arguments to filter WarehouseInventories to count.
     * @example
     * // Count the number of WarehouseInventories
     * const count = await prisma.warehouseInventory.count({
     *   where: {
     *     // ... the filter for the WarehouseInventories we want to count
     *   }
     * })
    **/
    count<T extends WarehouseInventoryCountArgs>(
      args?: Subset<T, WarehouseInventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarehouseInventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WarehouseInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseInventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarehouseInventoryAggregateArgs>(args: Subset<T, WarehouseInventoryAggregateArgs>): Prisma.PrismaPromise<GetWarehouseInventoryAggregateType<T>>

    /**
     * Group by WarehouseInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseInventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarehouseInventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarehouseInventoryGroupByArgs['orderBy'] }
        : { orderBy?: WarehouseInventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarehouseInventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarehouseInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WarehouseInventory model
   */
  readonly fields: WarehouseInventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WarehouseInventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WarehouseInventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WarehouseInventory model
   */
  interface WarehouseInventoryFieldRefs {
    readonly id: FieldRef<"WarehouseInventory", 'String'>
    readonly productId: FieldRef<"WarehouseInventory", 'String'>
    readonly pallets: FieldRef<"WarehouseInventory", 'Int'>
    readonly packs: FieldRef<"WarehouseInventory", 'Int'>
    readonly units: FieldRef<"WarehouseInventory", 'Int'>
    readonly reorderLevel: FieldRef<"WarehouseInventory", 'Int'>
    readonly maxStockLevel: FieldRef<"WarehouseInventory", 'Int'>
    readonly location: FieldRef<"WarehouseInventory", 'String'>
    readonly lastUpdated: FieldRef<"WarehouseInventory", 'DateTime'>
    readonly createdAt: FieldRef<"WarehouseInventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WarehouseInventory findUnique
   */
  export type WarehouseInventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseInventory to fetch.
     */
    where: WarehouseInventoryWhereUniqueInput
  }

  /**
   * WarehouseInventory findUniqueOrThrow
   */
  export type WarehouseInventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseInventory to fetch.
     */
    where: WarehouseInventoryWhereUniqueInput
  }

  /**
   * WarehouseInventory findFirst
   */
  export type WarehouseInventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseInventory to fetch.
     */
    where?: WarehouseInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarehouseInventories to fetch.
     */
    orderBy?: WarehouseInventoryOrderByWithRelationInput | WarehouseInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WarehouseInventories.
     */
    cursor?: WarehouseInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarehouseInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarehouseInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WarehouseInventories.
     */
    distinct?: WarehouseInventoryScalarFieldEnum | WarehouseInventoryScalarFieldEnum[]
  }

  /**
   * WarehouseInventory findFirstOrThrow
   */
  export type WarehouseInventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseInventory to fetch.
     */
    where?: WarehouseInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarehouseInventories to fetch.
     */
    orderBy?: WarehouseInventoryOrderByWithRelationInput | WarehouseInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WarehouseInventories.
     */
    cursor?: WarehouseInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarehouseInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarehouseInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WarehouseInventories.
     */
    distinct?: WarehouseInventoryScalarFieldEnum | WarehouseInventoryScalarFieldEnum[]
  }

  /**
   * WarehouseInventory findMany
   */
  export type WarehouseInventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseInventories to fetch.
     */
    where?: WarehouseInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarehouseInventories to fetch.
     */
    orderBy?: WarehouseInventoryOrderByWithRelationInput | WarehouseInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WarehouseInventories.
     */
    cursor?: WarehouseInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarehouseInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarehouseInventories.
     */
    skip?: number
    distinct?: WarehouseInventoryScalarFieldEnum | WarehouseInventoryScalarFieldEnum[]
  }

  /**
   * WarehouseInventory create
   */
  export type WarehouseInventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a WarehouseInventory.
     */
    data: XOR<WarehouseInventoryCreateInput, WarehouseInventoryUncheckedCreateInput>
  }

  /**
   * WarehouseInventory createMany
   */
  export type WarehouseInventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WarehouseInventories.
     */
    data: WarehouseInventoryCreateManyInput | WarehouseInventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WarehouseInventory createManyAndReturn
   */
  export type WarehouseInventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * The data used to create many WarehouseInventories.
     */
    data: WarehouseInventoryCreateManyInput | WarehouseInventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WarehouseInventory update
   */
  export type WarehouseInventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a WarehouseInventory.
     */
    data: XOR<WarehouseInventoryUpdateInput, WarehouseInventoryUncheckedUpdateInput>
    /**
     * Choose, which WarehouseInventory to update.
     */
    where: WarehouseInventoryWhereUniqueInput
  }

  /**
   * WarehouseInventory updateMany
   */
  export type WarehouseInventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WarehouseInventories.
     */
    data: XOR<WarehouseInventoryUpdateManyMutationInput, WarehouseInventoryUncheckedUpdateManyInput>
    /**
     * Filter which WarehouseInventories to update
     */
    where?: WarehouseInventoryWhereInput
    /**
     * Limit how many WarehouseInventories to update.
     */
    limit?: number
  }

  /**
   * WarehouseInventory updateManyAndReturn
   */
  export type WarehouseInventoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * The data used to update WarehouseInventories.
     */
    data: XOR<WarehouseInventoryUpdateManyMutationInput, WarehouseInventoryUncheckedUpdateManyInput>
    /**
     * Filter which WarehouseInventories to update
     */
    where?: WarehouseInventoryWhereInput
    /**
     * Limit how many WarehouseInventories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WarehouseInventory upsert
   */
  export type WarehouseInventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the WarehouseInventory to update in case it exists.
     */
    where: WarehouseInventoryWhereUniqueInput
    /**
     * In case the WarehouseInventory found by the `where` argument doesn't exist, create a new WarehouseInventory with this data.
     */
    create: XOR<WarehouseInventoryCreateInput, WarehouseInventoryUncheckedCreateInput>
    /**
     * In case the WarehouseInventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WarehouseInventoryUpdateInput, WarehouseInventoryUncheckedUpdateInput>
  }

  /**
   * WarehouseInventory delete
   */
  export type WarehouseInventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
    /**
     * Filter which WarehouseInventory to delete.
     */
    where: WarehouseInventoryWhereUniqueInput
  }

  /**
   * WarehouseInventory deleteMany
   */
  export type WarehouseInventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WarehouseInventories to delete
     */
    where?: WarehouseInventoryWhereInput
    /**
     * Limit how many WarehouseInventories to delete.
     */
    limit?: number
  }

  /**
   * WarehouseInventory without action
   */
  export type WarehouseInventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseInventory
     */
    select?: WarehouseInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseInventory
     */
    omit?: WarehouseInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInventoryInclude<ExtArgs> | null
  }


  /**
   * Model WarehouseSale
   */

  export type AggregateWarehouseSale = {
    _count: WarehouseSaleCountAggregateOutputType | null
    _avg: WarehouseSaleAvgAggregateOutputType | null
    _sum: WarehouseSaleSumAggregateOutputType | null
    _min: WarehouseSaleMinAggregateOutputType | null
    _max: WarehouseSaleMaxAggregateOutputType | null
  }

  export type WarehouseSaleAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    totalAmount: Decimal | null
  }

  export type WarehouseSaleSumAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    totalAmount: Decimal | null
  }

  export type WarehouseSaleMinAggregateOutputType = {
    id: string | null
    productId: string | null
    quantity: number | null
    unitType: $Enums.UnitType | null
    unitPrice: Decimal | null
    totalAmount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    customerName: string | null
    customerPhone: string | null
    receiptNumber: string | null
    salesOfficer: string | null
    createdAt: Date | null
  }

  export type WarehouseSaleMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    quantity: number | null
    unitType: $Enums.UnitType | null
    unitPrice: Decimal | null
    totalAmount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    customerName: string | null
    customerPhone: string | null
    receiptNumber: string | null
    salesOfficer: string | null
    createdAt: Date | null
  }

  export type WarehouseSaleCountAggregateOutputType = {
    id: number
    productId: number
    quantity: number
    unitType: number
    unitPrice: number
    totalAmount: number
    paymentMethod: number
    customerName: number
    customerPhone: number
    receiptNumber: number
    salesOfficer: number
    createdAt: number
    _all: number
  }


  export type WarehouseSaleAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalAmount?: true
  }

  export type WarehouseSaleSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalAmount?: true
  }

  export type WarehouseSaleMinAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    unitType?: true
    unitPrice?: true
    totalAmount?: true
    paymentMethod?: true
    customerName?: true
    customerPhone?: true
    receiptNumber?: true
    salesOfficer?: true
    createdAt?: true
  }

  export type WarehouseSaleMaxAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    unitType?: true
    unitPrice?: true
    totalAmount?: true
    paymentMethod?: true
    customerName?: true
    customerPhone?: true
    receiptNumber?: true
    salesOfficer?: true
    createdAt?: true
  }

  export type WarehouseSaleCountAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    unitType?: true
    unitPrice?: true
    totalAmount?: true
    paymentMethod?: true
    customerName?: true
    customerPhone?: true
    receiptNumber?: true
    salesOfficer?: true
    createdAt?: true
    _all?: true
  }

  export type WarehouseSaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WarehouseSale to aggregate.
     */
    where?: WarehouseSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarehouseSales to fetch.
     */
    orderBy?: WarehouseSaleOrderByWithRelationInput | WarehouseSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WarehouseSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarehouseSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarehouseSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WarehouseSales
    **/
    _count?: true | WarehouseSaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WarehouseSaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WarehouseSaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarehouseSaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarehouseSaleMaxAggregateInputType
  }

  export type GetWarehouseSaleAggregateType<T extends WarehouseSaleAggregateArgs> = {
        [P in keyof T & keyof AggregateWarehouseSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarehouseSale[P]>
      : GetScalarType<T[P], AggregateWarehouseSale[P]>
  }




  export type WarehouseSaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarehouseSaleWhereInput
    orderBy?: WarehouseSaleOrderByWithAggregationInput | WarehouseSaleOrderByWithAggregationInput[]
    by: WarehouseSaleScalarFieldEnum[] | WarehouseSaleScalarFieldEnum
    having?: WarehouseSaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarehouseSaleCountAggregateInputType | true
    _avg?: WarehouseSaleAvgAggregateInputType
    _sum?: WarehouseSaleSumAggregateInputType
    _min?: WarehouseSaleMinAggregateInputType
    _max?: WarehouseSaleMaxAggregateInputType
  }

  export type WarehouseSaleGroupByOutputType = {
    id: string
    productId: string
    quantity: number
    unitType: $Enums.UnitType
    unitPrice: Decimal
    totalAmount: Decimal
    paymentMethod: $Enums.PaymentMethod
    customerName: string | null
    customerPhone: string | null
    receiptNumber: string
    salesOfficer: string
    createdAt: Date
    _count: WarehouseSaleCountAggregateOutputType | null
    _avg: WarehouseSaleAvgAggregateOutputType | null
    _sum: WarehouseSaleSumAggregateOutputType | null
    _min: WarehouseSaleMinAggregateOutputType | null
    _max: WarehouseSaleMaxAggregateOutputType | null
  }

  type GetWarehouseSaleGroupByPayload<T extends WarehouseSaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WarehouseSaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarehouseSaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarehouseSaleGroupByOutputType[P]>
            : GetScalarType<T[P], WarehouseSaleGroupByOutputType[P]>
        }
      >
    >


  export type WarehouseSaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    quantity?: boolean
    unitType?: boolean
    unitPrice?: boolean
    totalAmount?: boolean
    paymentMethod?: boolean
    customerName?: boolean
    customerPhone?: boolean
    receiptNumber?: boolean
    salesOfficer?: boolean
    createdAt?: boolean
    salesOfficerUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouseSale"]>

  export type WarehouseSaleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    quantity?: boolean
    unitType?: boolean
    unitPrice?: boolean
    totalAmount?: boolean
    paymentMethod?: boolean
    customerName?: boolean
    customerPhone?: boolean
    receiptNumber?: boolean
    salesOfficer?: boolean
    createdAt?: boolean
    salesOfficerUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouseSale"]>

  export type WarehouseSaleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    quantity?: boolean
    unitType?: boolean
    unitPrice?: boolean
    totalAmount?: boolean
    paymentMethod?: boolean
    customerName?: boolean
    customerPhone?: boolean
    receiptNumber?: boolean
    salesOfficer?: boolean
    createdAt?: boolean
    salesOfficerUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouseSale"]>

  export type WarehouseSaleSelectScalar = {
    id?: boolean
    productId?: boolean
    quantity?: boolean
    unitType?: boolean
    unitPrice?: boolean
    totalAmount?: boolean
    paymentMethod?: boolean
    customerName?: boolean
    customerPhone?: boolean
    receiptNumber?: boolean
    salesOfficer?: boolean
    createdAt?: boolean
  }

  export type WarehouseSaleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "quantity" | "unitType" | "unitPrice" | "totalAmount" | "paymentMethod" | "customerName" | "customerPhone" | "receiptNumber" | "salesOfficer" | "createdAt", ExtArgs["result"]["warehouseSale"]>
  export type WarehouseSaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salesOfficerUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WarehouseSaleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salesOfficerUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WarehouseSaleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salesOfficerUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WarehouseSalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WarehouseSale"
    objects: {
      salesOfficerUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      quantity: number
      unitType: $Enums.UnitType
      unitPrice: Prisma.Decimal
      totalAmount: Prisma.Decimal
      paymentMethod: $Enums.PaymentMethod
      customerName: string | null
      customerPhone: string | null
      receiptNumber: string
      salesOfficer: string
      createdAt: Date
    }, ExtArgs["result"]["warehouseSale"]>
    composites: {}
  }

  type WarehouseSaleGetPayload<S extends boolean | null | undefined | WarehouseSaleDefaultArgs> = $Result.GetResult<Prisma.$WarehouseSalePayload, S>

  type WarehouseSaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WarehouseSaleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WarehouseSaleCountAggregateInputType | true
    }

  export interface WarehouseSaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WarehouseSale'], meta: { name: 'WarehouseSale' } }
    /**
     * Find zero or one WarehouseSale that matches the filter.
     * @param {WarehouseSaleFindUniqueArgs} args - Arguments to find a WarehouseSale
     * @example
     * // Get one WarehouseSale
     * const warehouseSale = await prisma.warehouseSale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WarehouseSaleFindUniqueArgs>(args: SelectSubset<T, WarehouseSaleFindUniqueArgs<ExtArgs>>): Prisma__WarehouseSaleClient<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WarehouseSale that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WarehouseSaleFindUniqueOrThrowArgs} args - Arguments to find a WarehouseSale
     * @example
     * // Get one WarehouseSale
     * const warehouseSale = await prisma.warehouseSale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WarehouseSaleFindUniqueOrThrowArgs>(args: SelectSubset<T, WarehouseSaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WarehouseSaleClient<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WarehouseSale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseSaleFindFirstArgs} args - Arguments to find a WarehouseSale
     * @example
     * // Get one WarehouseSale
     * const warehouseSale = await prisma.warehouseSale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WarehouseSaleFindFirstArgs>(args?: SelectSubset<T, WarehouseSaleFindFirstArgs<ExtArgs>>): Prisma__WarehouseSaleClient<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WarehouseSale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseSaleFindFirstOrThrowArgs} args - Arguments to find a WarehouseSale
     * @example
     * // Get one WarehouseSale
     * const warehouseSale = await prisma.warehouseSale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WarehouseSaleFindFirstOrThrowArgs>(args?: SelectSubset<T, WarehouseSaleFindFirstOrThrowArgs<ExtArgs>>): Prisma__WarehouseSaleClient<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WarehouseSales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseSaleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WarehouseSales
     * const warehouseSales = await prisma.warehouseSale.findMany()
     * 
     * // Get first 10 WarehouseSales
     * const warehouseSales = await prisma.warehouseSale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warehouseSaleWithIdOnly = await prisma.warehouseSale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WarehouseSaleFindManyArgs>(args?: SelectSubset<T, WarehouseSaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WarehouseSale.
     * @param {WarehouseSaleCreateArgs} args - Arguments to create a WarehouseSale.
     * @example
     * // Create one WarehouseSale
     * const WarehouseSale = await prisma.warehouseSale.create({
     *   data: {
     *     // ... data to create a WarehouseSale
     *   }
     * })
     * 
     */
    create<T extends WarehouseSaleCreateArgs>(args: SelectSubset<T, WarehouseSaleCreateArgs<ExtArgs>>): Prisma__WarehouseSaleClient<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WarehouseSales.
     * @param {WarehouseSaleCreateManyArgs} args - Arguments to create many WarehouseSales.
     * @example
     * // Create many WarehouseSales
     * const warehouseSale = await prisma.warehouseSale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WarehouseSaleCreateManyArgs>(args?: SelectSubset<T, WarehouseSaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WarehouseSales and returns the data saved in the database.
     * @param {WarehouseSaleCreateManyAndReturnArgs} args - Arguments to create many WarehouseSales.
     * @example
     * // Create many WarehouseSales
     * const warehouseSale = await prisma.warehouseSale.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WarehouseSales and only return the `id`
     * const warehouseSaleWithIdOnly = await prisma.warehouseSale.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WarehouseSaleCreateManyAndReturnArgs>(args?: SelectSubset<T, WarehouseSaleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WarehouseSale.
     * @param {WarehouseSaleDeleteArgs} args - Arguments to delete one WarehouseSale.
     * @example
     * // Delete one WarehouseSale
     * const WarehouseSale = await prisma.warehouseSale.delete({
     *   where: {
     *     // ... filter to delete one WarehouseSale
     *   }
     * })
     * 
     */
    delete<T extends WarehouseSaleDeleteArgs>(args: SelectSubset<T, WarehouseSaleDeleteArgs<ExtArgs>>): Prisma__WarehouseSaleClient<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WarehouseSale.
     * @param {WarehouseSaleUpdateArgs} args - Arguments to update one WarehouseSale.
     * @example
     * // Update one WarehouseSale
     * const warehouseSale = await prisma.warehouseSale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WarehouseSaleUpdateArgs>(args: SelectSubset<T, WarehouseSaleUpdateArgs<ExtArgs>>): Prisma__WarehouseSaleClient<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WarehouseSales.
     * @param {WarehouseSaleDeleteManyArgs} args - Arguments to filter WarehouseSales to delete.
     * @example
     * // Delete a few WarehouseSales
     * const { count } = await prisma.warehouseSale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WarehouseSaleDeleteManyArgs>(args?: SelectSubset<T, WarehouseSaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WarehouseSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseSaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WarehouseSales
     * const warehouseSale = await prisma.warehouseSale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WarehouseSaleUpdateManyArgs>(args: SelectSubset<T, WarehouseSaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WarehouseSales and returns the data updated in the database.
     * @param {WarehouseSaleUpdateManyAndReturnArgs} args - Arguments to update many WarehouseSales.
     * @example
     * // Update many WarehouseSales
     * const warehouseSale = await prisma.warehouseSale.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WarehouseSales and only return the `id`
     * const warehouseSaleWithIdOnly = await prisma.warehouseSale.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WarehouseSaleUpdateManyAndReturnArgs>(args: SelectSubset<T, WarehouseSaleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WarehouseSale.
     * @param {WarehouseSaleUpsertArgs} args - Arguments to update or create a WarehouseSale.
     * @example
     * // Update or create a WarehouseSale
     * const warehouseSale = await prisma.warehouseSale.upsert({
     *   create: {
     *     // ... data to create a WarehouseSale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WarehouseSale we want to update
     *   }
     * })
     */
    upsert<T extends WarehouseSaleUpsertArgs>(args: SelectSubset<T, WarehouseSaleUpsertArgs<ExtArgs>>): Prisma__WarehouseSaleClient<$Result.GetResult<Prisma.$WarehouseSalePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WarehouseSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseSaleCountArgs} args - Arguments to filter WarehouseSales to count.
     * @example
     * // Count the number of WarehouseSales
     * const count = await prisma.warehouseSale.count({
     *   where: {
     *     // ... the filter for the WarehouseSales we want to count
     *   }
     * })
    **/
    count<T extends WarehouseSaleCountArgs>(
      args?: Subset<T, WarehouseSaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarehouseSaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WarehouseSale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseSaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarehouseSaleAggregateArgs>(args: Subset<T, WarehouseSaleAggregateArgs>): Prisma.PrismaPromise<GetWarehouseSaleAggregateType<T>>

    /**
     * Group by WarehouseSale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseSaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarehouseSaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarehouseSaleGroupByArgs['orderBy'] }
        : { orderBy?: WarehouseSaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarehouseSaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarehouseSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WarehouseSale model
   */
  readonly fields: WarehouseSaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WarehouseSale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WarehouseSaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    salesOfficerUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WarehouseSale model
   */
  interface WarehouseSaleFieldRefs {
    readonly id: FieldRef<"WarehouseSale", 'String'>
    readonly productId: FieldRef<"WarehouseSale", 'String'>
    readonly quantity: FieldRef<"WarehouseSale", 'Int'>
    readonly unitType: FieldRef<"WarehouseSale", 'UnitType'>
    readonly unitPrice: FieldRef<"WarehouseSale", 'Decimal'>
    readonly totalAmount: FieldRef<"WarehouseSale", 'Decimal'>
    readonly paymentMethod: FieldRef<"WarehouseSale", 'PaymentMethod'>
    readonly customerName: FieldRef<"WarehouseSale", 'String'>
    readonly customerPhone: FieldRef<"WarehouseSale", 'String'>
    readonly receiptNumber: FieldRef<"WarehouseSale", 'String'>
    readonly salesOfficer: FieldRef<"WarehouseSale", 'String'>
    readonly createdAt: FieldRef<"WarehouseSale", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WarehouseSale findUnique
   */
  export type WarehouseSaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseSale to fetch.
     */
    where: WarehouseSaleWhereUniqueInput
  }

  /**
   * WarehouseSale findUniqueOrThrow
   */
  export type WarehouseSaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseSale to fetch.
     */
    where: WarehouseSaleWhereUniqueInput
  }

  /**
   * WarehouseSale findFirst
   */
  export type WarehouseSaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseSale to fetch.
     */
    where?: WarehouseSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarehouseSales to fetch.
     */
    orderBy?: WarehouseSaleOrderByWithRelationInput | WarehouseSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WarehouseSales.
     */
    cursor?: WarehouseSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarehouseSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarehouseSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WarehouseSales.
     */
    distinct?: WarehouseSaleScalarFieldEnum | WarehouseSaleScalarFieldEnum[]
  }

  /**
   * WarehouseSale findFirstOrThrow
   */
  export type WarehouseSaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseSale to fetch.
     */
    where?: WarehouseSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarehouseSales to fetch.
     */
    orderBy?: WarehouseSaleOrderByWithRelationInput | WarehouseSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WarehouseSales.
     */
    cursor?: WarehouseSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarehouseSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarehouseSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WarehouseSales.
     */
    distinct?: WarehouseSaleScalarFieldEnum | WarehouseSaleScalarFieldEnum[]
  }

  /**
   * WarehouseSale findMany
   */
  export type WarehouseSaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * Filter, which WarehouseSales to fetch.
     */
    where?: WarehouseSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WarehouseSales to fetch.
     */
    orderBy?: WarehouseSaleOrderByWithRelationInput | WarehouseSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WarehouseSales.
     */
    cursor?: WarehouseSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WarehouseSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WarehouseSales.
     */
    skip?: number
    distinct?: WarehouseSaleScalarFieldEnum | WarehouseSaleScalarFieldEnum[]
  }

  /**
   * WarehouseSale create
   */
  export type WarehouseSaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * The data needed to create a WarehouseSale.
     */
    data: XOR<WarehouseSaleCreateInput, WarehouseSaleUncheckedCreateInput>
  }

  /**
   * WarehouseSale createMany
   */
  export type WarehouseSaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WarehouseSales.
     */
    data: WarehouseSaleCreateManyInput | WarehouseSaleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WarehouseSale createManyAndReturn
   */
  export type WarehouseSaleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * The data used to create many WarehouseSales.
     */
    data: WarehouseSaleCreateManyInput | WarehouseSaleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WarehouseSale update
   */
  export type WarehouseSaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * The data needed to update a WarehouseSale.
     */
    data: XOR<WarehouseSaleUpdateInput, WarehouseSaleUncheckedUpdateInput>
    /**
     * Choose, which WarehouseSale to update.
     */
    where: WarehouseSaleWhereUniqueInput
  }

  /**
   * WarehouseSale updateMany
   */
  export type WarehouseSaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WarehouseSales.
     */
    data: XOR<WarehouseSaleUpdateManyMutationInput, WarehouseSaleUncheckedUpdateManyInput>
    /**
     * Filter which WarehouseSales to update
     */
    where?: WarehouseSaleWhereInput
    /**
     * Limit how many WarehouseSales to update.
     */
    limit?: number
  }

  /**
   * WarehouseSale updateManyAndReturn
   */
  export type WarehouseSaleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * The data used to update WarehouseSales.
     */
    data: XOR<WarehouseSaleUpdateManyMutationInput, WarehouseSaleUncheckedUpdateManyInput>
    /**
     * Filter which WarehouseSales to update
     */
    where?: WarehouseSaleWhereInput
    /**
     * Limit how many WarehouseSales to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WarehouseSale upsert
   */
  export type WarehouseSaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * The filter to search for the WarehouseSale to update in case it exists.
     */
    where: WarehouseSaleWhereUniqueInput
    /**
     * In case the WarehouseSale found by the `where` argument doesn't exist, create a new WarehouseSale with this data.
     */
    create: XOR<WarehouseSaleCreateInput, WarehouseSaleUncheckedCreateInput>
    /**
     * In case the WarehouseSale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WarehouseSaleUpdateInput, WarehouseSaleUncheckedUpdateInput>
  }

  /**
   * WarehouseSale delete
   */
  export type WarehouseSaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
    /**
     * Filter which WarehouseSale to delete.
     */
    where: WarehouseSaleWhereUniqueInput
  }

  /**
   * WarehouseSale deleteMany
   */
  export type WarehouseSaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WarehouseSales to delete
     */
    where?: WarehouseSaleWhereInput
    /**
     * Limit how many WarehouseSales to delete.
     */
    limit?: number
  }

  /**
   * WarehouseSale without action
   */
  export type WarehouseSaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseSale
     */
    select?: WarehouseSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WarehouseSale
     */
    omit?: WarehouseSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseSaleInclude<ExtArgs> | null
  }


  /**
   * Model CashFlow
   */

  export type AggregateCashFlow = {
    _count: CashFlowCountAggregateOutputType | null
    _avg: CashFlowAvgAggregateOutputType | null
    _sum: CashFlowSumAggregateOutputType | null
    _min: CashFlowMinAggregateOutputType | null
    _max: CashFlowMaxAggregateOutputType | null
  }

  export type CashFlowAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type CashFlowSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type CashFlowMinAggregateOutputType = {
    id: string | null
    transactionType: $Enums.TransactionType | null
    amount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    description: string | null
    referenceNumber: string | null
    reconciliationDate: Date | null
    isReconciled: boolean | null
    cashier: string | null
    createdAt: Date | null
  }

  export type CashFlowMaxAggregateOutputType = {
    id: string | null
    transactionType: $Enums.TransactionType | null
    amount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    description: string | null
    referenceNumber: string | null
    reconciliationDate: Date | null
    isReconciled: boolean | null
    cashier: string | null
    createdAt: Date | null
  }

  export type CashFlowCountAggregateOutputType = {
    id: number
    transactionType: number
    amount: number
    paymentMethod: number
    description: number
    referenceNumber: number
    reconciliationDate: number
    isReconciled: number
    cashier: number
    createdAt: number
    _all: number
  }


  export type CashFlowAvgAggregateInputType = {
    amount?: true
  }

  export type CashFlowSumAggregateInputType = {
    amount?: true
  }

  export type CashFlowMinAggregateInputType = {
    id?: true
    transactionType?: true
    amount?: true
    paymentMethod?: true
    description?: true
    referenceNumber?: true
    reconciliationDate?: true
    isReconciled?: true
    cashier?: true
    createdAt?: true
  }

  export type CashFlowMaxAggregateInputType = {
    id?: true
    transactionType?: true
    amount?: true
    paymentMethod?: true
    description?: true
    referenceNumber?: true
    reconciliationDate?: true
    isReconciled?: true
    cashier?: true
    createdAt?: true
  }

  export type CashFlowCountAggregateInputType = {
    id?: true
    transactionType?: true
    amount?: true
    paymentMethod?: true
    description?: true
    referenceNumber?: true
    reconciliationDate?: true
    isReconciled?: true
    cashier?: true
    createdAt?: true
    _all?: true
  }

  export type CashFlowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashFlow to aggregate.
     */
    where?: CashFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashFlows to fetch.
     */
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CashFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CashFlows
    **/
    _count?: true | CashFlowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CashFlowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CashFlowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CashFlowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CashFlowMaxAggregateInputType
  }

  export type GetCashFlowAggregateType<T extends CashFlowAggregateArgs> = {
        [P in keyof T & keyof AggregateCashFlow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCashFlow[P]>
      : GetScalarType<T[P], AggregateCashFlow[P]>
  }




  export type CashFlowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashFlowWhereInput
    orderBy?: CashFlowOrderByWithAggregationInput | CashFlowOrderByWithAggregationInput[]
    by: CashFlowScalarFieldEnum[] | CashFlowScalarFieldEnum
    having?: CashFlowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CashFlowCountAggregateInputType | true
    _avg?: CashFlowAvgAggregateInputType
    _sum?: CashFlowSumAggregateInputType
    _min?: CashFlowMinAggregateInputType
    _max?: CashFlowMaxAggregateInputType
  }

  export type CashFlowGroupByOutputType = {
    id: string
    transactionType: $Enums.TransactionType
    amount: Decimal
    paymentMethod: $Enums.PaymentMethod
    description: string | null
    referenceNumber: string | null
    reconciliationDate: Date | null
    isReconciled: boolean
    cashier: string
    createdAt: Date
    _count: CashFlowCountAggregateOutputType | null
    _avg: CashFlowAvgAggregateOutputType | null
    _sum: CashFlowSumAggregateOutputType | null
    _min: CashFlowMinAggregateOutputType | null
    _max: CashFlowMaxAggregateOutputType | null
  }

  type GetCashFlowGroupByPayload<T extends CashFlowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CashFlowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CashFlowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CashFlowGroupByOutputType[P]>
            : GetScalarType<T[P], CashFlowGroupByOutputType[P]>
        }
      >
    >


  export type CashFlowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionType?: boolean
    amount?: boolean
    paymentMethod?: boolean
    description?: boolean
    referenceNumber?: boolean
    reconciliationDate?: boolean
    isReconciled?: boolean
    cashier?: boolean
    createdAt?: boolean
    cashierUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashFlow"]>

  export type CashFlowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionType?: boolean
    amount?: boolean
    paymentMethod?: boolean
    description?: boolean
    referenceNumber?: boolean
    reconciliationDate?: boolean
    isReconciled?: boolean
    cashier?: boolean
    createdAt?: boolean
    cashierUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashFlow"]>

  export type CashFlowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionType?: boolean
    amount?: boolean
    paymentMethod?: boolean
    description?: boolean
    referenceNumber?: boolean
    reconciliationDate?: boolean
    isReconciled?: boolean
    cashier?: boolean
    createdAt?: boolean
    cashierUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashFlow"]>

  export type CashFlowSelectScalar = {
    id?: boolean
    transactionType?: boolean
    amount?: boolean
    paymentMethod?: boolean
    description?: boolean
    referenceNumber?: boolean
    reconciliationDate?: boolean
    isReconciled?: boolean
    cashier?: boolean
    createdAt?: boolean
  }

  export type CashFlowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "transactionType" | "amount" | "paymentMethod" | "description" | "referenceNumber" | "reconciliationDate" | "isReconciled" | "cashier" | "createdAt", ExtArgs["result"]["cashFlow"]>
  export type CashFlowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cashierUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CashFlowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cashierUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CashFlowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cashierUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CashFlowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CashFlow"
    objects: {
      cashierUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      transactionType: $Enums.TransactionType
      amount: Prisma.Decimal
      paymentMethod: $Enums.PaymentMethod
      description: string | null
      referenceNumber: string | null
      reconciliationDate: Date | null
      isReconciled: boolean
      cashier: string
      createdAt: Date
    }, ExtArgs["result"]["cashFlow"]>
    composites: {}
  }

  type CashFlowGetPayload<S extends boolean | null | undefined | CashFlowDefaultArgs> = $Result.GetResult<Prisma.$CashFlowPayload, S>

  type CashFlowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CashFlowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CashFlowCountAggregateInputType | true
    }

  export interface CashFlowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CashFlow'], meta: { name: 'CashFlow' } }
    /**
     * Find zero or one CashFlow that matches the filter.
     * @param {CashFlowFindUniqueArgs} args - Arguments to find a CashFlow
     * @example
     * // Get one CashFlow
     * const cashFlow = await prisma.cashFlow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CashFlowFindUniqueArgs>(args: SelectSubset<T, CashFlowFindUniqueArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CashFlow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CashFlowFindUniqueOrThrowArgs} args - Arguments to find a CashFlow
     * @example
     * // Get one CashFlow
     * const cashFlow = await prisma.cashFlow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CashFlowFindUniqueOrThrowArgs>(args: SelectSubset<T, CashFlowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashFlow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowFindFirstArgs} args - Arguments to find a CashFlow
     * @example
     * // Get one CashFlow
     * const cashFlow = await prisma.cashFlow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CashFlowFindFirstArgs>(args?: SelectSubset<T, CashFlowFindFirstArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashFlow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowFindFirstOrThrowArgs} args - Arguments to find a CashFlow
     * @example
     * // Get one CashFlow
     * const cashFlow = await prisma.cashFlow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CashFlowFindFirstOrThrowArgs>(args?: SelectSubset<T, CashFlowFindFirstOrThrowArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CashFlows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CashFlows
     * const cashFlows = await prisma.cashFlow.findMany()
     * 
     * // Get first 10 CashFlows
     * const cashFlows = await prisma.cashFlow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cashFlowWithIdOnly = await prisma.cashFlow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CashFlowFindManyArgs>(args?: SelectSubset<T, CashFlowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CashFlow.
     * @param {CashFlowCreateArgs} args - Arguments to create a CashFlow.
     * @example
     * // Create one CashFlow
     * const CashFlow = await prisma.cashFlow.create({
     *   data: {
     *     // ... data to create a CashFlow
     *   }
     * })
     * 
     */
    create<T extends CashFlowCreateArgs>(args: SelectSubset<T, CashFlowCreateArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CashFlows.
     * @param {CashFlowCreateManyArgs} args - Arguments to create many CashFlows.
     * @example
     * // Create many CashFlows
     * const cashFlow = await prisma.cashFlow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CashFlowCreateManyArgs>(args?: SelectSubset<T, CashFlowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CashFlows and returns the data saved in the database.
     * @param {CashFlowCreateManyAndReturnArgs} args - Arguments to create many CashFlows.
     * @example
     * // Create many CashFlows
     * const cashFlow = await prisma.cashFlow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CashFlows and only return the `id`
     * const cashFlowWithIdOnly = await prisma.cashFlow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CashFlowCreateManyAndReturnArgs>(args?: SelectSubset<T, CashFlowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CashFlow.
     * @param {CashFlowDeleteArgs} args - Arguments to delete one CashFlow.
     * @example
     * // Delete one CashFlow
     * const CashFlow = await prisma.cashFlow.delete({
     *   where: {
     *     // ... filter to delete one CashFlow
     *   }
     * })
     * 
     */
    delete<T extends CashFlowDeleteArgs>(args: SelectSubset<T, CashFlowDeleteArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CashFlow.
     * @param {CashFlowUpdateArgs} args - Arguments to update one CashFlow.
     * @example
     * // Update one CashFlow
     * const cashFlow = await prisma.cashFlow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CashFlowUpdateArgs>(args: SelectSubset<T, CashFlowUpdateArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CashFlows.
     * @param {CashFlowDeleteManyArgs} args - Arguments to filter CashFlows to delete.
     * @example
     * // Delete a few CashFlows
     * const { count } = await prisma.cashFlow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CashFlowDeleteManyArgs>(args?: SelectSubset<T, CashFlowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashFlows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CashFlows
     * const cashFlow = await prisma.cashFlow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CashFlowUpdateManyArgs>(args: SelectSubset<T, CashFlowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashFlows and returns the data updated in the database.
     * @param {CashFlowUpdateManyAndReturnArgs} args - Arguments to update many CashFlows.
     * @example
     * // Update many CashFlows
     * const cashFlow = await prisma.cashFlow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CashFlows and only return the `id`
     * const cashFlowWithIdOnly = await prisma.cashFlow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CashFlowUpdateManyAndReturnArgs>(args: SelectSubset<T, CashFlowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CashFlow.
     * @param {CashFlowUpsertArgs} args - Arguments to update or create a CashFlow.
     * @example
     * // Update or create a CashFlow
     * const cashFlow = await prisma.cashFlow.upsert({
     *   create: {
     *     // ... data to create a CashFlow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CashFlow we want to update
     *   }
     * })
     */
    upsert<T extends CashFlowUpsertArgs>(args: SelectSubset<T, CashFlowUpsertArgs<ExtArgs>>): Prisma__CashFlowClient<$Result.GetResult<Prisma.$CashFlowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CashFlows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowCountArgs} args - Arguments to filter CashFlows to count.
     * @example
     * // Count the number of CashFlows
     * const count = await prisma.cashFlow.count({
     *   where: {
     *     // ... the filter for the CashFlows we want to count
     *   }
     * })
    **/
    count<T extends CashFlowCountArgs>(
      args?: Subset<T, CashFlowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CashFlowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CashFlow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CashFlowAggregateArgs>(args: Subset<T, CashFlowAggregateArgs>): Prisma.PrismaPromise<GetCashFlowAggregateType<T>>

    /**
     * Group by CashFlow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashFlowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CashFlowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CashFlowGroupByArgs['orderBy'] }
        : { orderBy?: CashFlowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CashFlowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCashFlowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CashFlow model
   */
  readonly fields: CashFlowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CashFlow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CashFlowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cashierUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CashFlow model
   */
  interface CashFlowFieldRefs {
    readonly id: FieldRef<"CashFlow", 'String'>
    readonly transactionType: FieldRef<"CashFlow", 'TransactionType'>
    readonly amount: FieldRef<"CashFlow", 'Decimal'>
    readonly paymentMethod: FieldRef<"CashFlow", 'PaymentMethod'>
    readonly description: FieldRef<"CashFlow", 'String'>
    readonly referenceNumber: FieldRef<"CashFlow", 'String'>
    readonly reconciliationDate: FieldRef<"CashFlow", 'DateTime'>
    readonly isReconciled: FieldRef<"CashFlow", 'Boolean'>
    readonly cashier: FieldRef<"CashFlow", 'String'>
    readonly createdAt: FieldRef<"CashFlow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CashFlow findUnique
   */
  export type CashFlowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlow to fetch.
     */
    where: CashFlowWhereUniqueInput
  }

  /**
   * CashFlow findUniqueOrThrow
   */
  export type CashFlowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlow to fetch.
     */
    where: CashFlowWhereUniqueInput
  }

  /**
   * CashFlow findFirst
   */
  export type CashFlowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlow to fetch.
     */
    where?: CashFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashFlows to fetch.
     */
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashFlows.
     */
    cursor?: CashFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashFlows.
     */
    distinct?: CashFlowScalarFieldEnum | CashFlowScalarFieldEnum[]
  }

  /**
   * CashFlow findFirstOrThrow
   */
  export type CashFlowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlow to fetch.
     */
    where?: CashFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashFlows to fetch.
     */
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashFlows.
     */
    cursor?: CashFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashFlows.
     */
    distinct?: CashFlowScalarFieldEnum | CashFlowScalarFieldEnum[]
  }

  /**
   * CashFlow findMany
   */
  export type CashFlowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter, which CashFlows to fetch.
     */
    where?: CashFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashFlows to fetch.
     */
    orderBy?: CashFlowOrderByWithRelationInput | CashFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CashFlows.
     */
    cursor?: CashFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashFlows.
     */
    skip?: number
    distinct?: CashFlowScalarFieldEnum | CashFlowScalarFieldEnum[]
  }

  /**
   * CashFlow create
   */
  export type CashFlowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * The data needed to create a CashFlow.
     */
    data: XOR<CashFlowCreateInput, CashFlowUncheckedCreateInput>
  }

  /**
   * CashFlow createMany
   */
  export type CashFlowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CashFlows.
     */
    data: CashFlowCreateManyInput | CashFlowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CashFlow createManyAndReturn
   */
  export type CashFlowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * The data used to create many CashFlows.
     */
    data: CashFlowCreateManyInput | CashFlowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CashFlow update
   */
  export type CashFlowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * The data needed to update a CashFlow.
     */
    data: XOR<CashFlowUpdateInput, CashFlowUncheckedUpdateInput>
    /**
     * Choose, which CashFlow to update.
     */
    where: CashFlowWhereUniqueInput
  }

  /**
   * CashFlow updateMany
   */
  export type CashFlowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CashFlows.
     */
    data: XOR<CashFlowUpdateManyMutationInput, CashFlowUncheckedUpdateManyInput>
    /**
     * Filter which CashFlows to update
     */
    where?: CashFlowWhereInput
    /**
     * Limit how many CashFlows to update.
     */
    limit?: number
  }

  /**
   * CashFlow updateManyAndReturn
   */
  export type CashFlowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * The data used to update CashFlows.
     */
    data: XOR<CashFlowUpdateManyMutationInput, CashFlowUncheckedUpdateManyInput>
    /**
     * Filter which CashFlows to update
     */
    where?: CashFlowWhereInput
    /**
     * Limit how many CashFlows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CashFlow upsert
   */
  export type CashFlowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * The filter to search for the CashFlow to update in case it exists.
     */
    where: CashFlowWhereUniqueInput
    /**
     * In case the CashFlow found by the `where` argument doesn't exist, create a new CashFlow with this data.
     */
    create: XOR<CashFlowCreateInput, CashFlowUncheckedCreateInput>
    /**
     * In case the CashFlow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CashFlowUpdateInput, CashFlowUncheckedUpdateInput>
  }

  /**
   * CashFlow delete
   */
  export type CashFlowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
    /**
     * Filter which CashFlow to delete.
     */
    where: CashFlowWhereUniqueInput
  }

  /**
   * CashFlow deleteMany
   */
  export type CashFlowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashFlows to delete
     */
    where?: CashFlowWhereInput
    /**
     * Limit how many CashFlows to delete.
     */
    limit?: number
  }

  /**
   * CashFlow without action
   */
  export type CashFlowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashFlow
     */
    select?: CashFlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashFlow
     */
    omit?: CashFlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashFlowInclude<ExtArgs> | null
  }


  /**
   * Model SystemConfig
   */

  export type AggregateSystemConfig = {
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  export type SystemConfigMinAggregateOutputType = {
    id: string | null
    key: string | null
    description: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type SystemConfigMaxAggregateOutputType = {
    id: string | null
    key: string | null
    description: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type SystemConfigCountAggregateOutputType = {
    id: number
    key: number
    value: number
    description: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type SystemConfigMinAggregateInputType = {
    id?: true
    key?: true
    description?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type SystemConfigMaxAggregateInputType = {
    id?: true
    key?: true
    description?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type SystemConfigCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type SystemConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfig to aggregate.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemConfigs
    **/
    _count?: true | SystemConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemConfigMaxAggregateInputType
  }

  export type GetSystemConfigAggregateType<T extends SystemConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemConfig[P]>
      : GetScalarType<T[P], AggregateSystemConfig[P]>
  }




  export type SystemConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemConfigWhereInput
    orderBy?: SystemConfigOrderByWithAggregationInput | SystemConfigOrderByWithAggregationInput[]
    by: SystemConfigScalarFieldEnum[] | SystemConfigScalarFieldEnum
    having?: SystemConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemConfigCountAggregateInputType | true
    _min?: SystemConfigMinAggregateInputType
    _max?: SystemConfigMaxAggregateInputType
  }

  export type SystemConfigGroupByOutputType = {
    id: string
    key: string
    value: JsonValue
    description: string | null
    updatedAt: Date
    updatedBy: string
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  type GetSystemConfigGroupByPayload<T extends SystemConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
        }
      >
    >


  export type SystemConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type SystemConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "description" | "updatedAt" | "updatedBy", ExtArgs["result"]["systemConfig"]>

  export type $SystemConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: Prisma.JsonValue
      description: string | null
      updatedAt: Date
      updatedBy: string
    }, ExtArgs["result"]["systemConfig"]>
    composites: {}
  }

  type SystemConfigGetPayload<S extends boolean | null | undefined | SystemConfigDefaultArgs> = $Result.GetResult<Prisma.$SystemConfigPayload, S>

  type SystemConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemConfigCountAggregateInputType | true
    }

  export interface SystemConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemConfig'], meta: { name: 'SystemConfig' } }
    /**
     * Find zero or one SystemConfig that matches the filter.
     * @param {SystemConfigFindUniqueArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemConfigFindUniqueArgs>(args: SelectSubset<T, SystemConfigFindUniqueArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemConfigFindUniqueOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemConfigFindFirstArgs>(args?: SelectSubset<T, SystemConfigFindFirstArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany()
     * 
     * // Get first 10 SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemConfigFindManyArgs>(args?: SelectSubset<T, SystemConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemConfig.
     * @param {SystemConfigCreateArgs} args - Arguments to create a SystemConfig.
     * @example
     * // Create one SystemConfig
     * const SystemConfig = await prisma.systemConfig.create({
     *   data: {
     *     // ... data to create a SystemConfig
     *   }
     * })
     * 
     */
    create<T extends SystemConfigCreateArgs>(args: SelectSubset<T, SystemConfigCreateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemConfigs.
     * @param {SystemConfigCreateManyArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemConfigCreateManyArgs>(args?: SelectSubset<T, SystemConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemConfigs and returns the data saved in the database.
     * @param {SystemConfigCreateManyAndReturnArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemConfig.
     * @param {SystemConfigDeleteArgs} args - Arguments to delete one SystemConfig.
     * @example
     * // Delete one SystemConfig
     * const SystemConfig = await prisma.systemConfig.delete({
     *   where: {
     *     // ... filter to delete one SystemConfig
     *   }
     * })
     * 
     */
    delete<T extends SystemConfigDeleteArgs>(args: SelectSubset<T, SystemConfigDeleteArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemConfig.
     * @param {SystemConfigUpdateArgs} args - Arguments to update one SystemConfig.
     * @example
     * // Update one SystemConfig
     * const systemConfig = await prisma.systemConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemConfigUpdateArgs>(args: SelectSubset<T, SystemConfigUpdateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemConfigs.
     * @param {SystemConfigDeleteManyArgs} args - Arguments to filter SystemConfigs to delete.
     * @example
     * // Delete a few SystemConfigs
     * const { count } = await prisma.systemConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemConfigDeleteManyArgs>(args?: SelectSubset<T, SystemConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemConfigUpdateManyArgs>(args: SelectSubset<T, SystemConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs and returns the data updated in the database.
     * @param {SystemConfigUpdateManyAndReturnArgs} args - Arguments to update many SystemConfigs.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemConfig.
     * @param {SystemConfigUpsertArgs} args - Arguments to update or create a SystemConfig.
     * @example
     * // Update or create a SystemConfig
     * const systemConfig = await prisma.systemConfig.upsert({
     *   create: {
     *     // ... data to create a SystemConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemConfig we want to update
     *   }
     * })
     */
    upsert<T extends SystemConfigUpsertArgs>(args: SelectSubset<T, SystemConfigUpsertArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigCountArgs} args - Arguments to filter SystemConfigs to count.
     * @example
     * // Count the number of SystemConfigs
     * const count = await prisma.systemConfig.count({
     *   where: {
     *     // ... the filter for the SystemConfigs we want to count
     *   }
     * })
    **/
    count<T extends SystemConfigCountArgs>(
      args?: Subset<T, SystemConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemConfigAggregateArgs>(args: Subset<T, SystemConfigAggregateArgs>): Prisma.PrismaPromise<GetSystemConfigAggregateType<T>>

    /**
     * Group by SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemConfigGroupByArgs['orderBy'] }
        : { orderBy?: SystemConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemConfig model
   */
  readonly fields: SystemConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemConfig model
   */
  interface SystemConfigFieldRefs {
    readonly id: FieldRef<"SystemConfig", 'String'>
    readonly key: FieldRef<"SystemConfig", 'String'>
    readonly value: FieldRef<"SystemConfig", 'Json'>
    readonly description: FieldRef<"SystemConfig", 'String'>
    readonly updatedAt: FieldRef<"SystemConfig", 'DateTime'>
    readonly updatedBy: FieldRef<"SystemConfig", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SystemConfig findUnique
   */
  export type SystemConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findUniqueOrThrow
   */
  export type SystemConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findFirst
   */
  export type SystemConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findFirstOrThrow
   */
  export type SystemConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findMany
   */
  export type SystemConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfigs to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig create
   */
  export type SystemConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemConfig.
     */
    data: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
  }

  /**
   * SystemConfig createMany
   */
  export type SystemConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig createManyAndReturn
   */
  export type SystemConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig update
   */
  export type SystemConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemConfig.
     */
    data: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
    /**
     * Choose, which SystemConfig to update.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig updateMany
   */
  export type SystemConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to update.
     */
    limit?: number
  }

  /**
   * SystemConfig updateManyAndReturn
   */
  export type SystemConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to update.
     */
    limit?: number
  }

  /**
   * SystemConfig upsert
   */
  export type SystemConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemConfig to update in case it exists.
     */
    where: SystemConfigWhereUniqueInput
    /**
     * In case the SystemConfig found by the `where` argument doesn't exist, create a new SystemConfig with this data.
     */
    create: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
    /**
     * In case the SystemConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
  }

  /**
   * SystemConfig delete
   */
  export type SystemConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter which SystemConfig to delete.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig deleteMany
   */
  export type SystemConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfigs to delete
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to delete.
     */
    limit?: number
  }

  /**
   * SystemConfig without action
   */
  export type SystemConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    isActive: 'isActive',
    permissions: 'permissions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    productNo: 'productNo',
    name: 'name',
    description: 'description',
    packsPerPallet: 'packsPerPallet',
    pricePerPack: 'pricePerPack',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    fuelAdjustment: 'fuelAdjustment',
    deliveryNotes: 'deliveryNotes',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const DistributionOrderScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    locationId: 'locationId',
    totalPallets: 'totalPallets',
    totalPacks: 'totalPacks',
    originalAmount: 'originalAmount',
    balance: 'balance',
    finalAmount: 'finalAmount',
    status: 'status',
    transporterCompany: 'transporterCompany',
    driverNumber: 'driverNumber',
    remark: 'remark',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DistributionOrderScalarFieldEnum = (typeof DistributionOrderScalarFieldEnum)[keyof typeof DistributionOrderScalarFieldEnum]


  export const DistributionOrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productId: 'productId',
    pallets: 'pallets',
    packs: 'packs',
    amount: 'amount'
  };

  export type DistributionOrderItemScalarFieldEnum = (typeof DistributionOrderItemScalarFieldEnum)[keyof typeof DistributionOrderItemScalarFieldEnum]


  export const PalletPricingScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    locationId: 'locationId',
    pricePerPack: 'pricePerPack',
    fuelAdjustment: 'fuelAdjustment',
    effectiveDate: 'effectiveDate',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PalletPricingScalarFieldEnum = (typeof PalletPricingScalarFieldEnum)[keyof typeof PalletPricingScalarFieldEnum]


  export const PriceAdjustmentScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    originalAmount: 'originalAmount',
    adjustedAmount: 'adjustedAmount',
    adjustmentType: 'adjustmentType',
    reason: 'reason',
    locationFuelCost: 'locationFuelCost',
    createdAt: 'createdAt'
  };

  export type PriceAdjustmentScalarFieldEnum = (typeof PriceAdjustmentScalarFieldEnum)[keyof typeof PriceAdjustmentScalarFieldEnum]


  export const TruckCapacityScalarFieldEnum: {
    id: 'id',
    truckId: 'truckId',
    maxPallets: 'maxPallets',
    currentLoad: 'currentLoad',
    availableSpace: 'availableSpace',
    isActive: 'isActive',
    updatedAt: 'updatedAt'
  };

  export type TruckCapacityScalarFieldEnum = (typeof TruckCapacityScalarFieldEnum)[keyof typeof TruckCapacityScalarFieldEnum]


  export const TransportOrderScalarFieldEnum: {
    id: 'id',
    distributionOrderId: 'distributionOrderId',
    orderNumber: 'orderNumber',
    invoiceNumber: 'invoiceNumber',
    locationId: 'locationId',
    truckId: 'truckId',
    totalOrderAmount: 'totalOrderAmount',
    fuelRequired: 'fuelRequired',
    fuelPricePerLiter: 'fuelPricePerLiter',
    totalFuelCost: 'totalFuelCost',
    serviceCharge: 'serviceCharge',
    truckExpenses: 'truckExpenses',
    driverSalary: 'driverSalary',
    driverDetails: 'driverDetails',
    deliveryStatus: 'deliveryStatus',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deliveredAt: 'deliveredAt'
  };

  export type TransportOrderScalarFieldEnum = (typeof TransportOrderScalarFieldEnum)[keyof typeof TransportOrderScalarFieldEnum]


  export const WarehouseInventoryScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    pallets: 'pallets',
    packs: 'packs',
    units: 'units',
    reorderLevel: 'reorderLevel',
    maxStockLevel: 'maxStockLevel',
    location: 'location',
    lastUpdated: 'lastUpdated',
    createdAt: 'createdAt'
  };

  export type WarehouseInventoryScalarFieldEnum = (typeof WarehouseInventoryScalarFieldEnum)[keyof typeof WarehouseInventoryScalarFieldEnum]


  export const WarehouseSaleScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    quantity: 'quantity',
    unitType: 'unitType',
    unitPrice: 'unitPrice',
    totalAmount: 'totalAmount',
    paymentMethod: 'paymentMethod',
    customerName: 'customerName',
    customerPhone: 'customerPhone',
    receiptNumber: 'receiptNumber',
    salesOfficer: 'salesOfficer',
    createdAt: 'createdAt'
  };

  export type WarehouseSaleScalarFieldEnum = (typeof WarehouseSaleScalarFieldEnum)[keyof typeof WarehouseSaleScalarFieldEnum]


  export const CashFlowScalarFieldEnum: {
    id: 'id',
    transactionType: 'transactionType',
    amount: 'amount',
    paymentMethod: 'paymentMethod',
    description: 'description',
    referenceNumber: 'referenceNumber',
    reconciliationDate: 'reconciliationDate',
    isReconciled: 'isReconciled',
    cashier: 'cashier',
    createdAt: 'createdAt'
  };

  export type CashFlowScalarFieldEnum = (typeof CashFlowScalarFieldEnum)[keyof typeof CashFlowScalarFieldEnum]


  export const SystemConfigScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    description: 'description',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type SystemConfigScalarFieldEnum = (typeof SystemConfigScalarFieldEnum)[keyof typeof SystemConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'DeliveryStatus'
   */
  export type EnumDeliveryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeliveryStatus'>
    


  /**
   * Reference to a field of type 'DeliveryStatus[]'
   */
  export type ListEnumDeliveryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeliveryStatus[]'>
    


  /**
   * Reference to a field of type 'UnitType'
   */
  export type EnumUnitTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UnitType'>
    


  /**
   * Reference to a field of type 'UnitType[]'
   */
  export type ListEnumUnitTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UnitType[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    permissions?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: UserSessionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    distributionOrders?: DistributionOrderListRelationFilter
    transportOrders?: TransportOrderListRelationFilter
    warehouseSales?: WarehouseSaleListRelationFilter
    cashFlowEntries?: CashFlowListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    permissions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    sessions?: UserSessionOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    distributionOrders?: DistributionOrderOrderByRelationAggregateInput
    transportOrders?: TransportOrderOrderByRelationAggregateInput
    warehouseSales?: WarehouseSaleOrderByRelationAggregateInput
    cashFlowEntries?: CashFlowOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    permissions?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: UserSessionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    distributionOrders?: DistributionOrderListRelationFilter
    transportOrders?: TransportOrderListRelationFilter
    warehouseSales?: WarehouseSaleListRelationFilter
    cashFlowEntries?: CashFlowListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    permissions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    permissions?: JsonNullableWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    token?: StringWithAggregatesFilter<"UserSession"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    isActive?: BoolWithAggregatesFilter<"UserSession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    productNo?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    packsPerPallet?: IntFilter<"Product"> | number
    pricePerPack?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    distributionOrderItems?: DistributionOrderItemListRelationFilter
    palletPricing?: PalletPricingListRelationFilter
    warehouseInventory?: WarehouseInventoryListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    productNo?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    packsPerPallet?: SortOrder
    pricePerPack?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    distributionOrderItems?: DistributionOrderItemOrderByRelationAggregateInput
    palletPricing?: PalletPricingOrderByRelationAggregateInput
    warehouseInventory?: WarehouseInventoryOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productNo?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    packsPerPallet?: IntFilter<"Product"> | number
    pricePerPack?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"Product"> | boolean
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    distributionOrderItems?: DistributionOrderItemListRelationFilter
    palletPricing?: PalletPricingListRelationFilter
    warehouseInventory?: WarehouseInventoryListRelationFilter
  }, "id" | "productNo">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    productNo?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    packsPerPallet?: SortOrder
    pricePerPack?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    productNo?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    packsPerPallet?: IntWithAggregatesFilter<"Product"> | number
    pricePerPack?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolWithAggregatesFilter<"Product"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    distributionOrders?: DistributionOrderListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    distributionOrders?: DistributionOrderOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    distributionOrders?: DistributionOrderListRelationFilter
  }, "id">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    name?: StringWithAggregatesFilter<"Customer"> | string
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    isActive?: BoolWithAggregatesFilter<"Customer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    fuelAdjustment?: DecimalFilter<"Location"> | Decimal | DecimalJsLike | number | string
    deliveryNotes?: StringNullableFilter<"Location"> | string | null
    isActive?: BoolFilter<"Location"> | boolean
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    distributionOrders?: DistributionOrderListRelationFilter
    palletPricing?: PalletPricingListRelationFilter
    transportOrders?: TransportOrderListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    fuelAdjustment?: SortOrder
    deliveryNotes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    distributionOrders?: DistributionOrderOrderByRelationAggregateInput
    palletPricing?: PalletPricingOrderByRelationAggregateInput
    transportOrders?: TransportOrderOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    fuelAdjustment?: DecimalFilter<"Location"> | Decimal | DecimalJsLike | number | string
    deliveryNotes?: StringNullableFilter<"Location"> | string | null
    isActive?: BoolFilter<"Location"> | boolean
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    distributionOrders?: DistributionOrderListRelationFilter
    palletPricing?: PalletPricingListRelationFilter
    transportOrders?: TransportOrderListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    fuelAdjustment?: SortOrder
    deliveryNotes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    name?: StringWithAggregatesFilter<"Location"> | string
    address?: StringNullableWithAggregatesFilter<"Location"> | string | null
    fuelAdjustment?: DecimalWithAggregatesFilter<"Location"> | Decimal | DecimalJsLike | number | string
    deliveryNotes?: StringNullableWithAggregatesFilter<"Location"> | string | null
    isActive?: BoolWithAggregatesFilter<"Location"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type DistributionOrderWhereInput = {
    AND?: DistributionOrderWhereInput | DistributionOrderWhereInput[]
    OR?: DistributionOrderWhereInput[]
    NOT?: DistributionOrderWhereInput | DistributionOrderWhereInput[]
    id?: StringFilter<"DistributionOrder"> | string
    customerId?: StringFilter<"DistributionOrder"> | string
    locationId?: StringFilter<"DistributionOrder"> | string
    totalPallets?: IntFilter<"DistributionOrder"> | number
    totalPacks?: IntFilter<"DistributionOrder"> | number
    originalAmount?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    balance?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"DistributionOrder"> | $Enums.OrderStatus
    transporterCompany?: StringNullableFilter<"DistributionOrder"> | string | null
    driverNumber?: StringNullableFilter<"DistributionOrder"> | string | null
    remark?: StringNullableFilter<"DistributionOrder"> | string | null
    createdBy?: StringFilter<"DistributionOrder"> | string
    createdAt?: DateTimeFilter<"DistributionOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DistributionOrder"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    orderItems?: DistributionOrderItemListRelationFilter
    priceAdjustments?: PriceAdjustmentListRelationFilter
    transportOrder?: XOR<TransportOrderNullableScalarRelationFilter, TransportOrderWhereInput> | null
  }

  export type DistributionOrderOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    locationId?: SortOrder
    totalPallets?: SortOrder
    totalPacks?: SortOrder
    originalAmount?: SortOrder
    balance?: SortOrder
    finalAmount?: SortOrder
    status?: SortOrder
    transporterCompany?: SortOrderInput | SortOrder
    driverNumber?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    createdByUser?: UserOrderByWithRelationInput
    orderItems?: DistributionOrderItemOrderByRelationAggregateInput
    priceAdjustments?: PriceAdjustmentOrderByRelationAggregateInput
    transportOrder?: TransportOrderOrderByWithRelationInput
  }

  export type DistributionOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DistributionOrderWhereInput | DistributionOrderWhereInput[]
    OR?: DistributionOrderWhereInput[]
    NOT?: DistributionOrderWhereInput | DistributionOrderWhereInput[]
    customerId?: StringFilter<"DistributionOrder"> | string
    locationId?: StringFilter<"DistributionOrder"> | string
    totalPallets?: IntFilter<"DistributionOrder"> | number
    totalPacks?: IntFilter<"DistributionOrder"> | number
    originalAmount?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    balance?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"DistributionOrder"> | $Enums.OrderStatus
    transporterCompany?: StringNullableFilter<"DistributionOrder"> | string | null
    driverNumber?: StringNullableFilter<"DistributionOrder"> | string | null
    remark?: StringNullableFilter<"DistributionOrder"> | string | null
    createdBy?: StringFilter<"DistributionOrder"> | string
    createdAt?: DateTimeFilter<"DistributionOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DistributionOrder"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    orderItems?: DistributionOrderItemListRelationFilter
    priceAdjustments?: PriceAdjustmentListRelationFilter
    transportOrder?: XOR<TransportOrderNullableScalarRelationFilter, TransportOrderWhereInput> | null
  }, "id">

  export type DistributionOrderOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    locationId?: SortOrder
    totalPallets?: SortOrder
    totalPacks?: SortOrder
    originalAmount?: SortOrder
    balance?: SortOrder
    finalAmount?: SortOrder
    status?: SortOrder
    transporterCompany?: SortOrderInput | SortOrder
    driverNumber?: SortOrderInput | SortOrder
    remark?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DistributionOrderCountOrderByAggregateInput
    _avg?: DistributionOrderAvgOrderByAggregateInput
    _max?: DistributionOrderMaxOrderByAggregateInput
    _min?: DistributionOrderMinOrderByAggregateInput
    _sum?: DistributionOrderSumOrderByAggregateInput
  }

  export type DistributionOrderScalarWhereWithAggregatesInput = {
    AND?: DistributionOrderScalarWhereWithAggregatesInput | DistributionOrderScalarWhereWithAggregatesInput[]
    OR?: DistributionOrderScalarWhereWithAggregatesInput[]
    NOT?: DistributionOrderScalarWhereWithAggregatesInput | DistributionOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DistributionOrder"> | string
    customerId?: StringWithAggregatesFilter<"DistributionOrder"> | string
    locationId?: StringWithAggregatesFilter<"DistributionOrder"> | string
    totalPallets?: IntWithAggregatesFilter<"DistributionOrder"> | number
    totalPacks?: IntWithAggregatesFilter<"DistributionOrder"> | number
    originalAmount?: DecimalWithAggregatesFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    balance?: DecimalWithAggregatesFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalWithAggregatesFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusWithAggregatesFilter<"DistributionOrder"> | $Enums.OrderStatus
    transporterCompany?: StringNullableWithAggregatesFilter<"DistributionOrder"> | string | null
    driverNumber?: StringNullableWithAggregatesFilter<"DistributionOrder"> | string | null
    remark?: StringNullableWithAggregatesFilter<"DistributionOrder"> | string | null
    createdBy?: StringWithAggregatesFilter<"DistributionOrder"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DistributionOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DistributionOrder"> | Date | string
  }

  export type DistributionOrderItemWhereInput = {
    AND?: DistributionOrderItemWhereInput | DistributionOrderItemWhereInput[]
    OR?: DistributionOrderItemWhereInput[]
    NOT?: DistributionOrderItemWhereInput | DistributionOrderItemWhereInput[]
    id?: StringFilter<"DistributionOrderItem"> | string
    orderId?: StringFilter<"DistributionOrderItem"> | string
    productId?: StringFilter<"DistributionOrderItem"> | string
    pallets?: IntFilter<"DistributionOrderItem"> | number
    packs?: IntFilter<"DistributionOrderItem"> | number
    amount?: DecimalFilter<"DistributionOrderItem"> | Decimal | DecimalJsLike | number | string
    order?: XOR<DistributionOrderScalarRelationFilter, DistributionOrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type DistributionOrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    amount?: SortOrder
    order?: DistributionOrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type DistributionOrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DistributionOrderItemWhereInput | DistributionOrderItemWhereInput[]
    OR?: DistributionOrderItemWhereInput[]
    NOT?: DistributionOrderItemWhereInput | DistributionOrderItemWhereInput[]
    orderId?: StringFilter<"DistributionOrderItem"> | string
    productId?: StringFilter<"DistributionOrderItem"> | string
    pallets?: IntFilter<"DistributionOrderItem"> | number
    packs?: IntFilter<"DistributionOrderItem"> | number
    amount?: DecimalFilter<"DistributionOrderItem"> | Decimal | DecimalJsLike | number | string
    order?: XOR<DistributionOrderScalarRelationFilter, DistributionOrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type DistributionOrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    amount?: SortOrder
    _count?: DistributionOrderItemCountOrderByAggregateInput
    _avg?: DistributionOrderItemAvgOrderByAggregateInput
    _max?: DistributionOrderItemMaxOrderByAggregateInput
    _min?: DistributionOrderItemMinOrderByAggregateInput
    _sum?: DistributionOrderItemSumOrderByAggregateInput
  }

  export type DistributionOrderItemScalarWhereWithAggregatesInput = {
    AND?: DistributionOrderItemScalarWhereWithAggregatesInput | DistributionOrderItemScalarWhereWithAggregatesInput[]
    OR?: DistributionOrderItemScalarWhereWithAggregatesInput[]
    NOT?: DistributionOrderItemScalarWhereWithAggregatesInput | DistributionOrderItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DistributionOrderItem"> | string
    orderId?: StringWithAggregatesFilter<"DistributionOrderItem"> | string
    productId?: StringWithAggregatesFilter<"DistributionOrderItem"> | string
    pallets?: IntWithAggregatesFilter<"DistributionOrderItem"> | number
    packs?: IntWithAggregatesFilter<"DistributionOrderItem"> | number
    amount?: DecimalWithAggregatesFilter<"DistributionOrderItem"> | Decimal | DecimalJsLike | number | string
  }

  export type PalletPricingWhereInput = {
    AND?: PalletPricingWhereInput | PalletPricingWhereInput[]
    OR?: PalletPricingWhereInput[]
    NOT?: PalletPricingWhereInput | PalletPricingWhereInput[]
    id?: StringFilter<"PalletPricing"> | string
    productId?: StringFilter<"PalletPricing"> | string
    locationId?: StringNullableFilter<"PalletPricing"> | string | null
    pricePerPack?: DecimalFilter<"PalletPricing"> | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFilter<"PalletPricing"> | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFilter<"PalletPricing"> | Date | string
    isActive?: BoolFilter<"PalletPricing"> | boolean
    createdAt?: DateTimeFilter<"PalletPricing"> | Date | string
    updatedAt?: DateTimeFilter<"PalletPricing"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    location?: XOR<LocationNullableScalarRelationFilter, LocationWhereInput> | null
  }

  export type PalletPricingOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    locationId?: SortOrderInput | SortOrder
    pricePerPack?: SortOrder
    fuelAdjustment?: SortOrder
    effectiveDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type PalletPricingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PalletPricingWhereInput | PalletPricingWhereInput[]
    OR?: PalletPricingWhereInput[]
    NOT?: PalletPricingWhereInput | PalletPricingWhereInput[]
    productId?: StringFilter<"PalletPricing"> | string
    locationId?: StringNullableFilter<"PalletPricing"> | string | null
    pricePerPack?: DecimalFilter<"PalletPricing"> | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFilter<"PalletPricing"> | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFilter<"PalletPricing"> | Date | string
    isActive?: BoolFilter<"PalletPricing"> | boolean
    createdAt?: DateTimeFilter<"PalletPricing"> | Date | string
    updatedAt?: DateTimeFilter<"PalletPricing"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    location?: XOR<LocationNullableScalarRelationFilter, LocationWhereInput> | null
  }, "id">

  export type PalletPricingOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    locationId?: SortOrderInput | SortOrder
    pricePerPack?: SortOrder
    fuelAdjustment?: SortOrder
    effectiveDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PalletPricingCountOrderByAggregateInput
    _avg?: PalletPricingAvgOrderByAggregateInput
    _max?: PalletPricingMaxOrderByAggregateInput
    _min?: PalletPricingMinOrderByAggregateInput
    _sum?: PalletPricingSumOrderByAggregateInput
  }

  export type PalletPricingScalarWhereWithAggregatesInput = {
    AND?: PalletPricingScalarWhereWithAggregatesInput | PalletPricingScalarWhereWithAggregatesInput[]
    OR?: PalletPricingScalarWhereWithAggregatesInput[]
    NOT?: PalletPricingScalarWhereWithAggregatesInput | PalletPricingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PalletPricing"> | string
    productId?: StringWithAggregatesFilter<"PalletPricing"> | string
    locationId?: StringNullableWithAggregatesFilter<"PalletPricing"> | string | null
    pricePerPack?: DecimalWithAggregatesFilter<"PalletPricing"> | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalWithAggregatesFilter<"PalletPricing"> | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeWithAggregatesFilter<"PalletPricing"> | Date | string
    isActive?: BoolWithAggregatesFilter<"PalletPricing"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PalletPricing"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PalletPricing"> | Date | string
  }

  export type PriceAdjustmentWhereInput = {
    AND?: PriceAdjustmentWhereInput | PriceAdjustmentWhereInput[]
    OR?: PriceAdjustmentWhereInput[]
    NOT?: PriceAdjustmentWhereInput | PriceAdjustmentWhereInput[]
    id?: StringFilter<"PriceAdjustment"> | string
    orderId?: StringFilter<"PriceAdjustment"> | string
    originalAmount?: DecimalFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFilter<"PriceAdjustment"> | string
    reason?: StringNullableFilter<"PriceAdjustment"> | string | null
    locationFuelCost?: DecimalNullableFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"PriceAdjustment"> | Date | string
    order?: XOR<DistributionOrderScalarRelationFilter, DistributionOrderWhereInput>
  }

  export type PriceAdjustmentOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    originalAmount?: SortOrder
    adjustedAmount?: SortOrder
    adjustmentType?: SortOrder
    reason?: SortOrderInput | SortOrder
    locationFuelCost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    order?: DistributionOrderOrderByWithRelationInput
  }

  export type PriceAdjustmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PriceAdjustmentWhereInput | PriceAdjustmentWhereInput[]
    OR?: PriceAdjustmentWhereInput[]
    NOT?: PriceAdjustmentWhereInput | PriceAdjustmentWhereInput[]
    orderId?: StringFilter<"PriceAdjustment"> | string
    originalAmount?: DecimalFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFilter<"PriceAdjustment"> | string
    reason?: StringNullableFilter<"PriceAdjustment"> | string | null
    locationFuelCost?: DecimalNullableFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"PriceAdjustment"> | Date | string
    order?: XOR<DistributionOrderScalarRelationFilter, DistributionOrderWhereInput>
  }, "id">

  export type PriceAdjustmentOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    originalAmount?: SortOrder
    adjustedAmount?: SortOrder
    adjustmentType?: SortOrder
    reason?: SortOrderInput | SortOrder
    locationFuelCost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PriceAdjustmentCountOrderByAggregateInput
    _avg?: PriceAdjustmentAvgOrderByAggregateInput
    _max?: PriceAdjustmentMaxOrderByAggregateInput
    _min?: PriceAdjustmentMinOrderByAggregateInput
    _sum?: PriceAdjustmentSumOrderByAggregateInput
  }

  export type PriceAdjustmentScalarWhereWithAggregatesInput = {
    AND?: PriceAdjustmentScalarWhereWithAggregatesInput | PriceAdjustmentScalarWhereWithAggregatesInput[]
    OR?: PriceAdjustmentScalarWhereWithAggregatesInput[]
    NOT?: PriceAdjustmentScalarWhereWithAggregatesInput | PriceAdjustmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PriceAdjustment"> | string
    orderId?: StringWithAggregatesFilter<"PriceAdjustment"> | string
    originalAmount?: DecimalWithAggregatesFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalWithAggregatesFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringWithAggregatesFilter<"PriceAdjustment"> | string
    reason?: StringNullableWithAggregatesFilter<"PriceAdjustment"> | string | null
    locationFuelCost?: DecimalNullableWithAggregatesFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PriceAdjustment"> | Date | string
  }

  export type TruckCapacityWhereInput = {
    AND?: TruckCapacityWhereInput | TruckCapacityWhereInput[]
    OR?: TruckCapacityWhereInput[]
    NOT?: TruckCapacityWhereInput | TruckCapacityWhereInput[]
    id?: StringFilter<"TruckCapacity"> | string
    truckId?: StringFilter<"TruckCapacity"> | string
    maxPallets?: IntFilter<"TruckCapacity"> | number
    currentLoad?: IntFilter<"TruckCapacity"> | number
    availableSpace?: IntFilter<"TruckCapacity"> | number
    isActive?: BoolFilter<"TruckCapacity"> | boolean
    updatedAt?: DateTimeFilter<"TruckCapacity"> | Date | string
    transportOrders?: TransportOrderListRelationFilter
  }

  export type TruckCapacityOrderByWithRelationInput = {
    id?: SortOrder
    truckId?: SortOrder
    maxPallets?: SortOrder
    currentLoad?: SortOrder
    availableSpace?: SortOrder
    isActive?: SortOrder
    updatedAt?: SortOrder
    transportOrders?: TransportOrderOrderByRelationAggregateInput
  }

  export type TruckCapacityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    truckId?: string
    AND?: TruckCapacityWhereInput | TruckCapacityWhereInput[]
    OR?: TruckCapacityWhereInput[]
    NOT?: TruckCapacityWhereInput | TruckCapacityWhereInput[]
    maxPallets?: IntFilter<"TruckCapacity"> | number
    currentLoad?: IntFilter<"TruckCapacity"> | number
    availableSpace?: IntFilter<"TruckCapacity"> | number
    isActive?: BoolFilter<"TruckCapacity"> | boolean
    updatedAt?: DateTimeFilter<"TruckCapacity"> | Date | string
    transportOrders?: TransportOrderListRelationFilter
  }, "id" | "truckId">

  export type TruckCapacityOrderByWithAggregationInput = {
    id?: SortOrder
    truckId?: SortOrder
    maxPallets?: SortOrder
    currentLoad?: SortOrder
    availableSpace?: SortOrder
    isActive?: SortOrder
    updatedAt?: SortOrder
    _count?: TruckCapacityCountOrderByAggregateInput
    _avg?: TruckCapacityAvgOrderByAggregateInput
    _max?: TruckCapacityMaxOrderByAggregateInput
    _min?: TruckCapacityMinOrderByAggregateInput
    _sum?: TruckCapacitySumOrderByAggregateInput
  }

  export type TruckCapacityScalarWhereWithAggregatesInput = {
    AND?: TruckCapacityScalarWhereWithAggregatesInput | TruckCapacityScalarWhereWithAggregatesInput[]
    OR?: TruckCapacityScalarWhereWithAggregatesInput[]
    NOT?: TruckCapacityScalarWhereWithAggregatesInput | TruckCapacityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TruckCapacity"> | string
    truckId?: StringWithAggregatesFilter<"TruckCapacity"> | string
    maxPallets?: IntWithAggregatesFilter<"TruckCapacity"> | number
    currentLoad?: IntWithAggregatesFilter<"TruckCapacity"> | number
    availableSpace?: IntWithAggregatesFilter<"TruckCapacity"> | number
    isActive?: BoolWithAggregatesFilter<"TruckCapacity"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"TruckCapacity"> | Date | string
  }

  export type TransportOrderWhereInput = {
    AND?: TransportOrderWhereInput | TransportOrderWhereInput[]
    OR?: TransportOrderWhereInput[]
    NOT?: TransportOrderWhereInput | TransportOrderWhereInput[]
    id?: StringFilter<"TransportOrder"> | string
    distributionOrderId?: StringNullableFilter<"TransportOrder"> | string | null
    orderNumber?: StringFilter<"TransportOrder"> | string
    invoiceNumber?: StringNullableFilter<"TransportOrder"> | string | null
    locationId?: StringFilter<"TransportOrder"> | string
    truckId?: StringNullableFilter<"TransportOrder"> | string | null
    totalOrderAmount?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    driverDetails?: StringNullableFilter<"TransportOrder"> | string | null
    deliveryStatus?: EnumDeliveryStatusFilter<"TransportOrder"> | $Enums.DeliveryStatus
    createdBy?: StringFilter<"TransportOrder"> | string
    createdAt?: DateTimeFilter<"TransportOrder"> | Date | string
    updatedAt?: DateTimeFilter<"TransportOrder"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"TransportOrder"> | Date | string | null
    distributionOrder?: XOR<DistributionOrderNullableScalarRelationFilter, DistributionOrderWhereInput> | null
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    truck?: XOR<TruckCapacityNullableScalarRelationFilter, TruckCapacityWhereInput> | null
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TransportOrderOrderByWithRelationInput = {
    id?: SortOrder
    distributionOrderId?: SortOrderInput | SortOrder
    orderNumber?: SortOrder
    invoiceNumber?: SortOrderInput | SortOrder
    locationId?: SortOrder
    truckId?: SortOrderInput | SortOrder
    totalOrderAmount?: SortOrder
    fuelRequired?: SortOrder
    fuelPricePerLiter?: SortOrder
    totalFuelCost?: SortOrder
    serviceCharge?: SortOrder
    truckExpenses?: SortOrder
    driverSalary?: SortOrder
    driverDetails?: SortOrderInput | SortOrder
    deliveryStatus?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    distributionOrder?: DistributionOrderOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    truck?: TruckCapacityOrderByWithRelationInput
    createdByUser?: UserOrderByWithRelationInput
  }

  export type TransportOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    distributionOrderId?: string
    orderNumber?: string
    AND?: TransportOrderWhereInput | TransportOrderWhereInput[]
    OR?: TransportOrderWhereInput[]
    NOT?: TransportOrderWhereInput | TransportOrderWhereInput[]
    invoiceNumber?: StringNullableFilter<"TransportOrder"> | string | null
    locationId?: StringFilter<"TransportOrder"> | string
    truckId?: StringNullableFilter<"TransportOrder"> | string | null
    totalOrderAmount?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    driverDetails?: StringNullableFilter<"TransportOrder"> | string | null
    deliveryStatus?: EnumDeliveryStatusFilter<"TransportOrder"> | $Enums.DeliveryStatus
    createdBy?: StringFilter<"TransportOrder"> | string
    createdAt?: DateTimeFilter<"TransportOrder"> | Date | string
    updatedAt?: DateTimeFilter<"TransportOrder"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"TransportOrder"> | Date | string | null
    distributionOrder?: XOR<DistributionOrderNullableScalarRelationFilter, DistributionOrderWhereInput> | null
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    truck?: XOR<TruckCapacityNullableScalarRelationFilter, TruckCapacityWhereInput> | null
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "distributionOrderId" | "orderNumber">

  export type TransportOrderOrderByWithAggregationInput = {
    id?: SortOrder
    distributionOrderId?: SortOrderInput | SortOrder
    orderNumber?: SortOrder
    invoiceNumber?: SortOrderInput | SortOrder
    locationId?: SortOrder
    truckId?: SortOrderInput | SortOrder
    totalOrderAmount?: SortOrder
    fuelRequired?: SortOrder
    fuelPricePerLiter?: SortOrder
    totalFuelCost?: SortOrder
    serviceCharge?: SortOrder
    truckExpenses?: SortOrder
    driverSalary?: SortOrder
    driverDetails?: SortOrderInput | SortOrder
    deliveryStatus?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    _count?: TransportOrderCountOrderByAggregateInput
    _avg?: TransportOrderAvgOrderByAggregateInput
    _max?: TransportOrderMaxOrderByAggregateInput
    _min?: TransportOrderMinOrderByAggregateInput
    _sum?: TransportOrderSumOrderByAggregateInput
  }

  export type TransportOrderScalarWhereWithAggregatesInput = {
    AND?: TransportOrderScalarWhereWithAggregatesInput | TransportOrderScalarWhereWithAggregatesInput[]
    OR?: TransportOrderScalarWhereWithAggregatesInput[]
    NOT?: TransportOrderScalarWhereWithAggregatesInput | TransportOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TransportOrder"> | string
    distributionOrderId?: StringNullableWithAggregatesFilter<"TransportOrder"> | string | null
    orderNumber?: StringWithAggregatesFilter<"TransportOrder"> | string
    invoiceNumber?: StringNullableWithAggregatesFilter<"TransportOrder"> | string | null
    locationId?: StringWithAggregatesFilter<"TransportOrder"> | string
    truckId?: StringNullableWithAggregatesFilter<"TransportOrder"> | string | null
    totalOrderAmount?: DecimalWithAggregatesFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalWithAggregatesFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalWithAggregatesFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalWithAggregatesFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalWithAggregatesFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalWithAggregatesFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalWithAggregatesFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    driverDetails?: StringNullableWithAggregatesFilter<"TransportOrder"> | string | null
    deliveryStatus?: EnumDeliveryStatusWithAggregatesFilter<"TransportOrder"> | $Enums.DeliveryStatus
    createdBy?: StringWithAggregatesFilter<"TransportOrder"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TransportOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TransportOrder"> | Date | string
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"TransportOrder"> | Date | string | null
  }

  export type WarehouseInventoryWhereInput = {
    AND?: WarehouseInventoryWhereInput | WarehouseInventoryWhereInput[]
    OR?: WarehouseInventoryWhereInput[]
    NOT?: WarehouseInventoryWhereInput | WarehouseInventoryWhereInput[]
    id?: StringFilter<"WarehouseInventory"> | string
    productId?: StringFilter<"WarehouseInventory"> | string
    pallets?: IntFilter<"WarehouseInventory"> | number
    packs?: IntFilter<"WarehouseInventory"> | number
    units?: IntFilter<"WarehouseInventory"> | number
    reorderLevel?: IntFilter<"WarehouseInventory"> | number
    maxStockLevel?: IntNullableFilter<"WarehouseInventory"> | number | null
    location?: StringNullableFilter<"WarehouseInventory"> | string | null
    lastUpdated?: DateTimeFilter<"WarehouseInventory"> | Date | string
    createdAt?: DateTimeFilter<"WarehouseInventory"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type WarehouseInventoryOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    units?: SortOrder
    reorderLevel?: SortOrder
    maxStockLevel?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type WarehouseInventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productId_location?: WarehouseInventoryProductIdLocationCompoundUniqueInput
    AND?: WarehouseInventoryWhereInput | WarehouseInventoryWhereInput[]
    OR?: WarehouseInventoryWhereInput[]
    NOT?: WarehouseInventoryWhereInput | WarehouseInventoryWhereInput[]
    productId?: StringFilter<"WarehouseInventory"> | string
    pallets?: IntFilter<"WarehouseInventory"> | number
    packs?: IntFilter<"WarehouseInventory"> | number
    units?: IntFilter<"WarehouseInventory"> | number
    reorderLevel?: IntFilter<"WarehouseInventory"> | number
    maxStockLevel?: IntNullableFilter<"WarehouseInventory"> | number | null
    location?: StringNullableFilter<"WarehouseInventory"> | string | null
    lastUpdated?: DateTimeFilter<"WarehouseInventory"> | Date | string
    createdAt?: DateTimeFilter<"WarehouseInventory"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "productId_location">

  export type WarehouseInventoryOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    units?: SortOrder
    reorderLevel?: SortOrder
    maxStockLevel?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    _count?: WarehouseInventoryCountOrderByAggregateInput
    _avg?: WarehouseInventoryAvgOrderByAggregateInput
    _max?: WarehouseInventoryMaxOrderByAggregateInput
    _min?: WarehouseInventoryMinOrderByAggregateInput
    _sum?: WarehouseInventorySumOrderByAggregateInput
  }

  export type WarehouseInventoryScalarWhereWithAggregatesInput = {
    AND?: WarehouseInventoryScalarWhereWithAggregatesInput | WarehouseInventoryScalarWhereWithAggregatesInput[]
    OR?: WarehouseInventoryScalarWhereWithAggregatesInput[]
    NOT?: WarehouseInventoryScalarWhereWithAggregatesInput | WarehouseInventoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WarehouseInventory"> | string
    productId?: StringWithAggregatesFilter<"WarehouseInventory"> | string
    pallets?: IntWithAggregatesFilter<"WarehouseInventory"> | number
    packs?: IntWithAggregatesFilter<"WarehouseInventory"> | number
    units?: IntWithAggregatesFilter<"WarehouseInventory"> | number
    reorderLevel?: IntWithAggregatesFilter<"WarehouseInventory"> | number
    maxStockLevel?: IntNullableWithAggregatesFilter<"WarehouseInventory"> | number | null
    location?: StringNullableWithAggregatesFilter<"WarehouseInventory"> | string | null
    lastUpdated?: DateTimeWithAggregatesFilter<"WarehouseInventory"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"WarehouseInventory"> | Date | string
  }

  export type WarehouseSaleWhereInput = {
    AND?: WarehouseSaleWhereInput | WarehouseSaleWhereInput[]
    OR?: WarehouseSaleWhereInput[]
    NOT?: WarehouseSaleWhereInput | WarehouseSaleWhereInput[]
    id?: StringFilter<"WarehouseSale"> | string
    productId?: StringFilter<"WarehouseSale"> | string
    quantity?: IntFilter<"WarehouseSale"> | number
    unitType?: EnumUnitTypeFilter<"WarehouseSale"> | $Enums.UnitType
    unitPrice?: DecimalFilter<"WarehouseSale"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFilter<"WarehouseSale"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"WarehouseSale"> | $Enums.PaymentMethod
    customerName?: StringNullableFilter<"WarehouseSale"> | string | null
    customerPhone?: StringNullableFilter<"WarehouseSale"> | string | null
    receiptNumber?: StringFilter<"WarehouseSale"> | string
    salesOfficer?: StringFilter<"WarehouseSale"> | string
    createdAt?: DateTimeFilter<"WarehouseSale"> | Date | string
    salesOfficerUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WarehouseSaleOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitType?: SortOrder
    unitPrice?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    customerName?: SortOrderInput | SortOrder
    customerPhone?: SortOrderInput | SortOrder
    receiptNumber?: SortOrder
    salesOfficer?: SortOrder
    createdAt?: SortOrder
    salesOfficerUser?: UserOrderByWithRelationInput
  }

  export type WarehouseSaleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    receiptNumber?: string
    AND?: WarehouseSaleWhereInput | WarehouseSaleWhereInput[]
    OR?: WarehouseSaleWhereInput[]
    NOT?: WarehouseSaleWhereInput | WarehouseSaleWhereInput[]
    productId?: StringFilter<"WarehouseSale"> | string
    quantity?: IntFilter<"WarehouseSale"> | number
    unitType?: EnumUnitTypeFilter<"WarehouseSale"> | $Enums.UnitType
    unitPrice?: DecimalFilter<"WarehouseSale"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFilter<"WarehouseSale"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"WarehouseSale"> | $Enums.PaymentMethod
    customerName?: StringNullableFilter<"WarehouseSale"> | string | null
    customerPhone?: StringNullableFilter<"WarehouseSale"> | string | null
    salesOfficer?: StringFilter<"WarehouseSale"> | string
    createdAt?: DateTimeFilter<"WarehouseSale"> | Date | string
    salesOfficerUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "receiptNumber">

  export type WarehouseSaleOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitType?: SortOrder
    unitPrice?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    customerName?: SortOrderInput | SortOrder
    customerPhone?: SortOrderInput | SortOrder
    receiptNumber?: SortOrder
    salesOfficer?: SortOrder
    createdAt?: SortOrder
    _count?: WarehouseSaleCountOrderByAggregateInput
    _avg?: WarehouseSaleAvgOrderByAggregateInput
    _max?: WarehouseSaleMaxOrderByAggregateInput
    _min?: WarehouseSaleMinOrderByAggregateInput
    _sum?: WarehouseSaleSumOrderByAggregateInput
  }

  export type WarehouseSaleScalarWhereWithAggregatesInput = {
    AND?: WarehouseSaleScalarWhereWithAggregatesInput | WarehouseSaleScalarWhereWithAggregatesInput[]
    OR?: WarehouseSaleScalarWhereWithAggregatesInput[]
    NOT?: WarehouseSaleScalarWhereWithAggregatesInput | WarehouseSaleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WarehouseSale"> | string
    productId?: StringWithAggregatesFilter<"WarehouseSale"> | string
    quantity?: IntWithAggregatesFilter<"WarehouseSale"> | number
    unitType?: EnumUnitTypeWithAggregatesFilter<"WarehouseSale"> | $Enums.UnitType
    unitPrice?: DecimalWithAggregatesFilter<"WarehouseSale"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalWithAggregatesFilter<"WarehouseSale"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"WarehouseSale"> | $Enums.PaymentMethod
    customerName?: StringNullableWithAggregatesFilter<"WarehouseSale"> | string | null
    customerPhone?: StringNullableWithAggregatesFilter<"WarehouseSale"> | string | null
    receiptNumber?: StringWithAggregatesFilter<"WarehouseSale"> | string
    salesOfficer?: StringWithAggregatesFilter<"WarehouseSale"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WarehouseSale"> | Date | string
  }

  export type CashFlowWhereInput = {
    AND?: CashFlowWhereInput | CashFlowWhereInput[]
    OR?: CashFlowWhereInput[]
    NOT?: CashFlowWhereInput | CashFlowWhereInput[]
    id?: StringFilter<"CashFlow"> | string
    transactionType?: EnumTransactionTypeFilter<"CashFlow"> | $Enums.TransactionType
    amount?: DecimalFilter<"CashFlow"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"CashFlow"> | $Enums.PaymentMethod
    description?: StringNullableFilter<"CashFlow"> | string | null
    referenceNumber?: StringNullableFilter<"CashFlow"> | string | null
    reconciliationDate?: DateTimeNullableFilter<"CashFlow"> | Date | string | null
    isReconciled?: BoolFilter<"CashFlow"> | boolean
    cashier?: StringFilter<"CashFlow"> | string
    createdAt?: DateTimeFilter<"CashFlow"> | Date | string
    cashierUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CashFlowOrderByWithRelationInput = {
    id?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrderInput | SortOrder
    referenceNumber?: SortOrderInput | SortOrder
    reconciliationDate?: SortOrderInput | SortOrder
    isReconciled?: SortOrder
    cashier?: SortOrder
    createdAt?: SortOrder
    cashierUser?: UserOrderByWithRelationInput
  }

  export type CashFlowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CashFlowWhereInput | CashFlowWhereInput[]
    OR?: CashFlowWhereInput[]
    NOT?: CashFlowWhereInput | CashFlowWhereInput[]
    transactionType?: EnumTransactionTypeFilter<"CashFlow"> | $Enums.TransactionType
    amount?: DecimalFilter<"CashFlow"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"CashFlow"> | $Enums.PaymentMethod
    description?: StringNullableFilter<"CashFlow"> | string | null
    referenceNumber?: StringNullableFilter<"CashFlow"> | string | null
    reconciliationDate?: DateTimeNullableFilter<"CashFlow"> | Date | string | null
    isReconciled?: BoolFilter<"CashFlow"> | boolean
    cashier?: StringFilter<"CashFlow"> | string
    createdAt?: DateTimeFilter<"CashFlow"> | Date | string
    cashierUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CashFlowOrderByWithAggregationInput = {
    id?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrderInput | SortOrder
    referenceNumber?: SortOrderInput | SortOrder
    reconciliationDate?: SortOrderInput | SortOrder
    isReconciled?: SortOrder
    cashier?: SortOrder
    createdAt?: SortOrder
    _count?: CashFlowCountOrderByAggregateInput
    _avg?: CashFlowAvgOrderByAggregateInput
    _max?: CashFlowMaxOrderByAggregateInput
    _min?: CashFlowMinOrderByAggregateInput
    _sum?: CashFlowSumOrderByAggregateInput
  }

  export type CashFlowScalarWhereWithAggregatesInput = {
    AND?: CashFlowScalarWhereWithAggregatesInput | CashFlowScalarWhereWithAggregatesInput[]
    OR?: CashFlowScalarWhereWithAggregatesInput[]
    NOT?: CashFlowScalarWhereWithAggregatesInput | CashFlowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CashFlow"> | string
    transactionType?: EnumTransactionTypeWithAggregatesFilter<"CashFlow"> | $Enums.TransactionType
    amount?: DecimalWithAggregatesFilter<"CashFlow"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"CashFlow"> | $Enums.PaymentMethod
    description?: StringNullableWithAggregatesFilter<"CashFlow"> | string | null
    referenceNumber?: StringNullableWithAggregatesFilter<"CashFlow"> | string | null
    reconciliationDate?: DateTimeNullableWithAggregatesFilter<"CashFlow"> | Date | string | null
    isReconciled?: BoolWithAggregatesFilter<"CashFlow"> | boolean
    cashier?: StringWithAggregatesFilter<"CashFlow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CashFlow"> | Date | string
  }

  export type SystemConfigWhereInput = {
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    id?: StringFilter<"SystemConfig"> | string
    key?: StringFilter<"SystemConfig"> | string
    value?: JsonFilter<"SystemConfig">
    description?: StringNullableFilter<"SystemConfig"> | string | null
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedBy?: StringFilter<"SystemConfig"> | string
  }

  export type SystemConfigOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type SystemConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    value?: JsonFilter<"SystemConfig">
    description?: StringNullableFilter<"SystemConfig"> | string | null
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedBy?: StringFilter<"SystemConfig"> | string
  }, "id" | "key">

  export type SystemConfigOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: SystemConfigCountOrderByAggregateInput
    _max?: SystemConfigMaxOrderByAggregateInput
    _min?: SystemConfigMinOrderByAggregateInput
  }

  export type SystemConfigScalarWhereWithAggregatesInput = {
    AND?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    OR?: SystemConfigScalarWhereWithAggregatesInput[]
    NOT?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemConfig"> | string
    key?: StringWithAggregatesFilter<"SystemConfig"> | string
    value?: JsonWithAggregatesFilter<"SystemConfig">
    description?: StringNullableWithAggregatesFilter<"SystemConfig"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
    updatedBy?: StringWithAggregatesFilter<"SystemConfig"> | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowCreateNestedManyWithoutCashierUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleUncheckedCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowUncheckedCreateNestedManyWithoutCashierUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUpdateManyWithoutCashierUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUncheckedUpdateManyWithoutCashierUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserSessionCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrderItems?: DistributionOrderItemCreateNestedManyWithoutProductInput
    palletPricing?: PalletPricingCreateNestedManyWithoutProductInput
    warehouseInventory?: WarehouseInventoryCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutProductInput
    palletPricing?: PalletPricingUncheckedCreateNestedManyWithoutProductInput
    warehouseInventory?: WarehouseInventoryUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrderItems?: DistributionOrderItemUpdateManyWithoutProductNestedInput
    palletPricing?: PalletPricingUpdateManyWithoutProductNestedInput
    warehouseInventory?: WarehouseInventoryUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrderItems?: DistributionOrderItemUncheckedUpdateManyWithoutProductNestedInput
    palletPricing?: PalletPricingUncheckedUpdateManyWithoutProductNestedInput
    warehouseInventory?: WarehouseInventoryUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrders?: DistributionOrderCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrders?: DistributionOrderUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrders?: DistributionOrderCreateNestedManyWithoutLocationInput
    palletPricing?: PalletPricingCreateNestedManyWithoutLocationInput
    transportOrders?: TransportOrderCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutLocationInput
    palletPricing?: PalletPricingUncheckedCreateNestedManyWithoutLocationInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrders?: DistributionOrderUpdateManyWithoutLocationNestedInput
    palletPricing?: PalletPricingUpdateManyWithoutLocationNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutLocationNestedInput
    palletPricing?: PalletPricingUncheckedUpdateManyWithoutLocationNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionOrderCreateInput = {
    id?: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutDistributionOrdersInput
    location: LocationCreateNestedOneWithoutDistributionOrdersInput
    createdByUser: UserCreateNestedOneWithoutDistributionOrdersInput
    orderItems?: DistributionOrderItemCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderUncheckedCreateInput = {
    id?: string
    customerId: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentUncheckedCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderUncheckedCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutDistributionOrdersNestedInput
    location?: LocationUpdateOneRequiredWithoutDistributionOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutDistributionOrdersNestedInput
    orderItems?: DistributionOrderItemUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: DistributionOrderItemUncheckedUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUncheckedUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUncheckedUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderCreateManyInput = {
    id?: string
    customerId: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistributionOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionOrderItemCreateInput = {
    id?: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
    order: DistributionOrderCreateNestedOneWithoutOrderItemsInput
    product: ProductCreateNestedOneWithoutDistributionOrderItemsInput
  }

  export type DistributionOrderItemUncheckedCreateInput = {
    id?: string
    orderId: string
    productId: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order?: DistributionOrderUpdateOneRequiredWithoutOrderItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutDistributionOrderItemsNestedInput
  }

  export type DistributionOrderItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemCreateManyInput = {
    id?: string
    orderId: string
    productId: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PalletPricingCreateInput = {
    id?: string
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutPalletPricingInput
    location?: LocationCreateNestedOneWithoutPalletPricingInput
  }

  export type PalletPricingUncheckedCreateInput = {
    id?: string
    productId: string
    locationId?: string | null
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PalletPricingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutPalletPricingNestedInput
    location?: LocationUpdateOneWithoutPalletPricingNestedInput
  }

  export type PalletPricingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PalletPricingCreateManyInput = {
    id?: string
    productId: string
    locationId?: string | null
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PalletPricingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PalletPricingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceAdjustmentCreateInput = {
    id?: string
    originalAmount: Decimal | DecimalJsLike | number | string
    adjustedAmount: Decimal | DecimalJsLike | number | string
    adjustmentType: string
    reason?: string | null
    locationFuelCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    order: DistributionOrderCreateNestedOneWithoutPriceAdjustmentsInput
  }

  export type PriceAdjustmentUncheckedCreateInput = {
    id?: string
    orderId: string
    originalAmount: Decimal | DecimalJsLike | number | string
    adjustedAmount: Decimal | DecimalJsLike | number | string
    adjustmentType: string
    reason?: string | null
    locationFuelCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type PriceAdjustmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    locationFuelCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: DistributionOrderUpdateOneRequiredWithoutPriceAdjustmentsNestedInput
  }

  export type PriceAdjustmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    locationFuelCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceAdjustmentCreateManyInput = {
    id?: string
    orderId: string
    originalAmount: Decimal | DecimalJsLike | number | string
    adjustedAmount: Decimal | DecimalJsLike | number | string
    adjustmentType: string
    reason?: string | null
    locationFuelCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type PriceAdjustmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    locationFuelCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceAdjustmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    locationFuelCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckCapacityCreateInput = {
    id?: string
    truckId: string
    maxPallets?: number
    currentLoad?: number
    availableSpace: number
    isActive?: boolean
    updatedAt?: Date | string
    transportOrders?: TransportOrderCreateNestedManyWithoutTruckInput
  }

  export type TruckCapacityUncheckedCreateInput = {
    id?: string
    truckId: string
    maxPallets?: number
    currentLoad?: number
    availableSpace: number
    isActive?: boolean
    updatedAt?: Date | string
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutTruckInput
  }

  export type TruckCapacityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    maxPallets?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    availableSpace?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transportOrders?: TransportOrderUpdateManyWithoutTruckNestedInput
  }

  export type TruckCapacityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    maxPallets?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    availableSpace?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutTruckNestedInput
  }

  export type TruckCapacityCreateManyInput = {
    id?: string
    truckId: string
    maxPallets?: number
    currentLoad?: number
    availableSpace: number
    isActive?: boolean
    updatedAt?: Date | string
  }

  export type TruckCapacityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    maxPallets?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    availableSpace?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckCapacityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    maxPallets?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    availableSpace?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportOrderCreateInput = {
    id?: string
    orderNumber: string
    invoiceNumber?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
    distributionOrder?: DistributionOrderCreateNestedOneWithoutTransportOrderInput
    location: LocationCreateNestedOneWithoutTransportOrdersInput
    truck?: TruckCapacityCreateNestedOneWithoutTransportOrdersInput
    createdByUser: UserCreateNestedOneWithoutTransportOrdersInput
  }

  export type TransportOrderUncheckedCreateInput = {
    id?: string
    distributionOrderId?: string | null
    orderNumber: string
    invoiceNumber?: string | null
    locationId: string
    truckId?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type TransportOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    distributionOrder?: DistributionOrderUpdateOneWithoutTransportOrderNestedInput
    location?: LocationUpdateOneRequiredWithoutTransportOrdersNestedInput
    truck?: TruckCapacityUpdateOneWithoutTransportOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutTransportOrdersNestedInput
  }

  export type TransportOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributionOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransportOrderCreateManyInput = {
    id?: string
    distributionOrderId?: string | null
    orderNumber: string
    invoiceNumber?: string | null
    locationId: string
    truckId?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type TransportOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransportOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributionOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WarehouseInventoryCreateInput = {
    id?: string
    pallets?: number
    packs?: number
    units?: number
    reorderLevel?: number
    maxStockLevel?: number | null
    location?: string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutWarehouseInventoryInput
  }

  export type WarehouseInventoryUncheckedCreateInput = {
    id?: string
    productId: string
    pallets?: number
    packs?: number
    units?: number
    reorderLevel?: number
    maxStockLevel?: number | null
    location?: string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type WarehouseInventoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    reorderLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutWarehouseInventoryNestedInput
  }

  export type WarehouseInventoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    reorderLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseInventoryCreateManyInput = {
    id?: string
    productId: string
    pallets?: number
    packs?: number
    units?: number
    reorderLevel?: number
    maxStockLevel?: number | null
    location?: string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type WarehouseInventoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    reorderLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseInventoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    reorderLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseSaleCreateInput = {
    id?: string
    productId: string
    quantity: number
    unitType: $Enums.UnitType
    unitPrice: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    customerName?: string | null
    customerPhone?: string | null
    receiptNumber: string
    createdAt?: Date | string
    salesOfficerUser: UserCreateNestedOneWithoutWarehouseSalesInput
  }

  export type WarehouseSaleUncheckedCreateInput = {
    id?: string
    productId: string
    quantity: number
    unitType: $Enums.UnitType
    unitPrice: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    customerName?: string | null
    customerPhone?: string | null
    receiptNumber: string
    salesOfficer: string
    createdAt?: Date | string
  }

  export type WarehouseSaleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitType?: EnumUnitTypeFieldUpdateOperationsInput | $Enums.UnitType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    salesOfficerUser?: UserUpdateOneRequiredWithoutWarehouseSalesNestedInput
  }

  export type WarehouseSaleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitType?: EnumUnitTypeFieldUpdateOperationsInput | $Enums.UnitType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    salesOfficer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseSaleCreateManyInput = {
    id?: string
    productId: string
    quantity: number
    unitType: $Enums.UnitType
    unitPrice: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    customerName?: string | null
    customerPhone?: string | null
    receiptNumber: string
    salesOfficer: string
    createdAt?: Date | string
  }

  export type WarehouseSaleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitType?: EnumUnitTypeFieldUpdateOperationsInput | $Enums.UnitType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseSaleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitType?: EnumUnitTypeFieldUpdateOperationsInput | $Enums.UnitType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    salesOfficer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowCreateInput = {
    id?: string
    transactionType: $Enums.TransactionType
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    description?: string | null
    referenceNumber?: string | null
    reconciliationDate?: Date | string | null
    isReconciled?: boolean
    createdAt?: Date | string
    cashierUser: UserCreateNestedOneWithoutCashFlowEntriesInput
  }

  export type CashFlowUncheckedCreateInput = {
    id?: string
    transactionType: $Enums.TransactionType
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    description?: string | null
    referenceNumber?: string | null
    reconciliationDate?: Date | string | null
    isReconciled?: boolean
    cashier: string
    createdAt?: Date | string
  }

  export type CashFlowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reconciliationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReconciled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cashierUser?: UserUpdateOneRequiredWithoutCashFlowEntriesNestedInput
  }

  export type CashFlowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reconciliationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReconciled?: BoolFieldUpdateOperationsInput | boolean
    cashier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowCreateManyInput = {
    id?: string
    transactionType: $Enums.TransactionType
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    description?: string | null
    referenceNumber?: string | null
    reconciliationDate?: Date | string | null
    isReconciled?: boolean
    cashier: string
    createdAt?: Date | string
  }

  export type CashFlowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reconciliationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReconciled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reconciliationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReconciled?: BoolFieldUpdateOperationsInput | boolean
    cashier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    description?: string | null
    updatedAt?: Date | string
    updatedBy: string
  }

  export type SystemConfigUncheckedCreateInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    description?: string | null
    updatedAt?: Date | string
    updatedBy: string
  }

  export type SystemConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: StringFieldUpdateOperationsInput | string
  }

  export type SystemConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: StringFieldUpdateOperationsInput | string
  }

  export type SystemConfigCreateManyInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    description?: string | null
    updatedAt?: Date | string
    updatedBy: string
  }

  export type SystemConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: StringFieldUpdateOperationsInput | string
  }

  export type SystemConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type DistributionOrderListRelationFilter = {
    every?: DistributionOrderWhereInput
    some?: DistributionOrderWhereInput
    none?: DistributionOrderWhereInput
  }

  export type TransportOrderListRelationFilter = {
    every?: TransportOrderWhereInput
    some?: TransportOrderWhereInput
    none?: TransportOrderWhereInput
  }

  export type WarehouseSaleListRelationFilter = {
    every?: WarehouseSaleWhereInput
    some?: WarehouseSaleWhereInput
    none?: WarehouseSaleWhereInput
  }

  export type CashFlowListRelationFilter = {
    every?: CashFlowWhereInput
    some?: CashFlowWhereInput
    none?: CashFlowWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DistributionOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransportOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WarehouseSaleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CashFlowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemListRelationFilter = {
    every?: DistributionOrderItemWhereInput
    some?: DistributionOrderItemWhereInput
    none?: DistributionOrderItemWhereInput
  }

  export type PalletPricingListRelationFilter = {
    every?: PalletPricingWhereInput
    some?: PalletPricingWhereInput
    none?: PalletPricingWhereInput
  }

  export type WarehouseInventoryListRelationFilter = {
    every?: WarehouseInventoryWhereInput
    some?: WarehouseInventoryWhereInput
    none?: WarehouseInventoryWhereInput
  }

  export type DistributionOrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PalletPricingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WarehouseInventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    productNo?: SortOrder
    name?: SortOrder
    description?: SortOrder
    packsPerPallet?: SortOrder
    pricePerPack?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    packsPerPallet?: SortOrder
    pricePerPack?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    productNo?: SortOrder
    name?: SortOrder
    description?: SortOrder
    packsPerPallet?: SortOrder
    pricePerPack?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    productNo?: SortOrder
    name?: SortOrder
    description?: SortOrder
    packsPerPallet?: SortOrder
    pricePerPack?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    packsPerPallet?: SortOrder
    pricePerPack?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    fuelAdjustment?: SortOrder
    deliveryNotes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    fuelAdjustment?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    fuelAdjustment?: SortOrder
    deliveryNotes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    fuelAdjustment?: SortOrder
    deliveryNotes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    fuelAdjustment?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type LocationScalarRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type PriceAdjustmentListRelationFilter = {
    every?: PriceAdjustmentWhereInput
    some?: PriceAdjustmentWhereInput
    none?: PriceAdjustmentWhereInput
  }

  export type TransportOrderNullableScalarRelationFilter = {
    is?: TransportOrderWhereInput | null
    isNot?: TransportOrderWhereInput | null
  }

  export type PriceAdjustmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DistributionOrderCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    locationId?: SortOrder
    totalPallets?: SortOrder
    totalPacks?: SortOrder
    originalAmount?: SortOrder
    balance?: SortOrder
    finalAmount?: SortOrder
    status?: SortOrder
    transporterCompany?: SortOrder
    driverNumber?: SortOrder
    remark?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributionOrderAvgOrderByAggregateInput = {
    totalPallets?: SortOrder
    totalPacks?: SortOrder
    originalAmount?: SortOrder
    balance?: SortOrder
    finalAmount?: SortOrder
  }

  export type DistributionOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    locationId?: SortOrder
    totalPallets?: SortOrder
    totalPacks?: SortOrder
    originalAmount?: SortOrder
    balance?: SortOrder
    finalAmount?: SortOrder
    status?: SortOrder
    transporterCompany?: SortOrder
    driverNumber?: SortOrder
    remark?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributionOrderMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    locationId?: SortOrder
    totalPallets?: SortOrder
    totalPacks?: SortOrder
    originalAmount?: SortOrder
    balance?: SortOrder
    finalAmount?: SortOrder
    status?: SortOrder
    transporterCompany?: SortOrder
    driverNumber?: SortOrder
    remark?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributionOrderSumOrderByAggregateInput = {
    totalPallets?: SortOrder
    totalPacks?: SortOrder
    originalAmount?: SortOrder
    balance?: SortOrder
    finalAmount?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type DistributionOrderScalarRelationFilter = {
    is?: DistributionOrderWhereInput
    isNot?: DistributionOrderWhereInput
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type DistributionOrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    amount?: SortOrder
  }

  export type DistributionOrderItemAvgOrderByAggregateInput = {
    pallets?: SortOrder
    packs?: SortOrder
    amount?: SortOrder
  }

  export type DistributionOrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    amount?: SortOrder
  }

  export type DistributionOrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    amount?: SortOrder
  }

  export type DistributionOrderItemSumOrderByAggregateInput = {
    pallets?: SortOrder
    packs?: SortOrder
    amount?: SortOrder
  }

  export type LocationNullableScalarRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type PalletPricingCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    locationId?: SortOrder
    pricePerPack?: SortOrder
    fuelAdjustment?: SortOrder
    effectiveDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PalletPricingAvgOrderByAggregateInput = {
    pricePerPack?: SortOrder
    fuelAdjustment?: SortOrder
  }

  export type PalletPricingMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    locationId?: SortOrder
    pricePerPack?: SortOrder
    fuelAdjustment?: SortOrder
    effectiveDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PalletPricingMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    locationId?: SortOrder
    pricePerPack?: SortOrder
    fuelAdjustment?: SortOrder
    effectiveDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PalletPricingSumOrderByAggregateInput = {
    pricePerPack?: SortOrder
    fuelAdjustment?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type PriceAdjustmentCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    originalAmount?: SortOrder
    adjustedAmount?: SortOrder
    adjustmentType?: SortOrder
    reason?: SortOrder
    locationFuelCost?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceAdjustmentAvgOrderByAggregateInput = {
    originalAmount?: SortOrder
    adjustedAmount?: SortOrder
    locationFuelCost?: SortOrder
  }

  export type PriceAdjustmentMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    originalAmount?: SortOrder
    adjustedAmount?: SortOrder
    adjustmentType?: SortOrder
    reason?: SortOrder
    locationFuelCost?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceAdjustmentMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    originalAmount?: SortOrder
    adjustedAmount?: SortOrder
    adjustmentType?: SortOrder
    reason?: SortOrder
    locationFuelCost?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceAdjustmentSumOrderByAggregateInput = {
    originalAmount?: SortOrder
    adjustedAmount?: SortOrder
    locationFuelCost?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type TruckCapacityCountOrderByAggregateInput = {
    id?: SortOrder
    truckId?: SortOrder
    maxPallets?: SortOrder
    currentLoad?: SortOrder
    availableSpace?: SortOrder
    isActive?: SortOrder
    updatedAt?: SortOrder
  }

  export type TruckCapacityAvgOrderByAggregateInput = {
    maxPallets?: SortOrder
    currentLoad?: SortOrder
    availableSpace?: SortOrder
  }

  export type TruckCapacityMaxOrderByAggregateInput = {
    id?: SortOrder
    truckId?: SortOrder
    maxPallets?: SortOrder
    currentLoad?: SortOrder
    availableSpace?: SortOrder
    isActive?: SortOrder
    updatedAt?: SortOrder
  }

  export type TruckCapacityMinOrderByAggregateInput = {
    id?: SortOrder
    truckId?: SortOrder
    maxPallets?: SortOrder
    currentLoad?: SortOrder
    availableSpace?: SortOrder
    isActive?: SortOrder
    updatedAt?: SortOrder
  }

  export type TruckCapacitySumOrderByAggregateInput = {
    maxPallets?: SortOrder
    currentLoad?: SortOrder
    availableSpace?: SortOrder
  }

  export type EnumDeliveryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryStatus | EnumDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryStatusFilter<$PrismaModel> | $Enums.DeliveryStatus
  }

  export type DistributionOrderNullableScalarRelationFilter = {
    is?: DistributionOrderWhereInput | null
    isNot?: DistributionOrderWhereInput | null
  }

  export type TruckCapacityNullableScalarRelationFilter = {
    is?: TruckCapacityWhereInput | null
    isNot?: TruckCapacityWhereInput | null
  }

  export type TransportOrderCountOrderByAggregateInput = {
    id?: SortOrder
    distributionOrderId?: SortOrder
    orderNumber?: SortOrder
    invoiceNumber?: SortOrder
    locationId?: SortOrder
    truckId?: SortOrder
    totalOrderAmount?: SortOrder
    fuelRequired?: SortOrder
    fuelPricePerLiter?: SortOrder
    totalFuelCost?: SortOrder
    serviceCharge?: SortOrder
    truckExpenses?: SortOrder
    driverSalary?: SortOrder
    driverDetails?: SortOrder
    deliveryStatus?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deliveredAt?: SortOrder
  }

  export type TransportOrderAvgOrderByAggregateInput = {
    totalOrderAmount?: SortOrder
    fuelRequired?: SortOrder
    fuelPricePerLiter?: SortOrder
    totalFuelCost?: SortOrder
    serviceCharge?: SortOrder
    truckExpenses?: SortOrder
    driverSalary?: SortOrder
  }

  export type TransportOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    distributionOrderId?: SortOrder
    orderNumber?: SortOrder
    invoiceNumber?: SortOrder
    locationId?: SortOrder
    truckId?: SortOrder
    totalOrderAmount?: SortOrder
    fuelRequired?: SortOrder
    fuelPricePerLiter?: SortOrder
    totalFuelCost?: SortOrder
    serviceCharge?: SortOrder
    truckExpenses?: SortOrder
    driverSalary?: SortOrder
    driverDetails?: SortOrder
    deliveryStatus?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deliveredAt?: SortOrder
  }

  export type TransportOrderMinOrderByAggregateInput = {
    id?: SortOrder
    distributionOrderId?: SortOrder
    orderNumber?: SortOrder
    invoiceNumber?: SortOrder
    locationId?: SortOrder
    truckId?: SortOrder
    totalOrderAmount?: SortOrder
    fuelRequired?: SortOrder
    fuelPricePerLiter?: SortOrder
    totalFuelCost?: SortOrder
    serviceCharge?: SortOrder
    truckExpenses?: SortOrder
    driverSalary?: SortOrder
    driverDetails?: SortOrder
    deliveryStatus?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deliveredAt?: SortOrder
  }

  export type TransportOrderSumOrderByAggregateInput = {
    totalOrderAmount?: SortOrder
    fuelRequired?: SortOrder
    fuelPricePerLiter?: SortOrder
    totalFuelCost?: SortOrder
    serviceCharge?: SortOrder
    truckExpenses?: SortOrder
    driverSalary?: SortOrder
  }

  export type EnumDeliveryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryStatus | EnumDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryStatusWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeliveryStatusFilter<$PrismaModel>
    _max?: NestedEnumDeliveryStatusFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type WarehouseInventoryProductIdLocationCompoundUniqueInput = {
    productId: string
    location: string
  }

  export type WarehouseInventoryCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    units?: SortOrder
    reorderLevel?: SortOrder
    maxStockLevel?: SortOrder
    location?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type WarehouseInventoryAvgOrderByAggregateInput = {
    pallets?: SortOrder
    packs?: SortOrder
    units?: SortOrder
    reorderLevel?: SortOrder
    maxStockLevel?: SortOrder
  }

  export type WarehouseInventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    units?: SortOrder
    reorderLevel?: SortOrder
    maxStockLevel?: SortOrder
    location?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type WarehouseInventoryMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    pallets?: SortOrder
    packs?: SortOrder
    units?: SortOrder
    reorderLevel?: SortOrder
    maxStockLevel?: SortOrder
    location?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type WarehouseInventorySumOrderByAggregateInput = {
    pallets?: SortOrder
    packs?: SortOrder
    units?: SortOrder
    reorderLevel?: SortOrder
    maxStockLevel?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumUnitTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UnitType | EnumUnitTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UnitType[] | ListEnumUnitTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UnitType[] | ListEnumUnitTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUnitTypeFilter<$PrismaModel> | $Enums.UnitType
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type WarehouseSaleCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitType?: SortOrder
    unitPrice?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    customerName?: SortOrder
    customerPhone?: SortOrder
    receiptNumber?: SortOrder
    salesOfficer?: SortOrder
    createdAt?: SortOrder
  }

  export type WarehouseSaleAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalAmount?: SortOrder
  }

  export type WarehouseSaleMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitType?: SortOrder
    unitPrice?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    customerName?: SortOrder
    customerPhone?: SortOrder
    receiptNumber?: SortOrder
    salesOfficer?: SortOrder
    createdAt?: SortOrder
  }

  export type WarehouseSaleMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitType?: SortOrder
    unitPrice?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    customerName?: SortOrder
    customerPhone?: SortOrder
    receiptNumber?: SortOrder
    salesOfficer?: SortOrder
    createdAt?: SortOrder
  }

  export type WarehouseSaleSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalAmount?: SortOrder
  }

  export type EnumUnitTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UnitType | EnumUnitTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UnitType[] | ListEnumUnitTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UnitType[] | ListEnumUnitTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUnitTypeWithAggregatesFilter<$PrismaModel> | $Enums.UnitType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUnitTypeFilter<$PrismaModel>
    _max?: NestedEnumUnitTypeFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type CashFlowCountOrderByAggregateInput = {
    id?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrder
    referenceNumber?: SortOrder
    reconciliationDate?: SortOrder
    isReconciled?: SortOrder
    cashier?: SortOrder
    createdAt?: SortOrder
  }

  export type CashFlowAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CashFlowMaxOrderByAggregateInput = {
    id?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrder
    referenceNumber?: SortOrder
    reconciliationDate?: SortOrder
    isReconciled?: SortOrder
    cashier?: SortOrder
    createdAt?: SortOrder
  }

  export type CashFlowMinOrderByAggregateInput = {
    id?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrder
    referenceNumber?: SortOrder
    reconciliationDate?: SortOrder
    isReconciled?: SortOrder
    cashier?: SortOrder
    createdAt?: SortOrder
  }

  export type CashFlowSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SystemConfigCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type SystemConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type SystemConfigMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DistributionOrderCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<DistributionOrderCreateWithoutCreatedByUserInput, DistributionOrderUncheckedCreateWithoutCreatedByUserInput> | DistributionOrderCreateWithoutCreatedByUserInput[] | DistributionOrderUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutCreatedByUserInput | DistributionOrderCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: DistributionOrderCreateManyCreatedByUserInputEnvelope
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
  }

  export type TransportOrderCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<TransportOrderCreateWithoutCreatedByUserInput, TransportOrderUncheckedCreateWithoutCreatedByUserInput> | TransportOrderCreateWithoutCreatedByUserInput[] | TransportOrderUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutCreatedByUserInput | TransportOrderCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: TransportOrderCreateManyCreatedByUserInputEnvelope
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
  }

  export type WarehouseSaleCreateNestedManyWithoutSalesOfficerUserInput = {
    create?: XOR<WarehouseSaleCreateWithoutSalesOfficerUserInput, WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput> | WarehouseSaleCreateWithoutSalesOfficerUserInput[] | WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput[]
    connectOrCreate?: WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput | WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput[]
    createMany?: WarehouseSaleCreateManySalesOfficerUserInputEnvelope
    connect?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
  }

  export type CashFlowCreateNestedManyWithoutCashierUserInput = {
    create?: XOR<CashFlowCreateWithoutCashierUserInput, CashFlowUncheckedCreateWithoutCashierUserInput> | CashFlowCreateWithoutCashierUserInput[] | CashFlowUncheckedCreateWithoutCashierUserInput[]
    connectOrCreate?: CashFlowCreateOrConnectWithoutCashierUserInput | CashFlowCreateOrConnectWithoutCashierUserInput[]
    createMany?: CashFlowCreateManyCashierUserInputEnvelope
    connect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DistributionOrderUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<DistributionOrderCreateWithoutCreatedByUserInput, DistributionOrderUncheckedCreateWithoutCreatedByUserInput> | DistributionOrderCreateWithoutCreatedByUserInput[] | DistributionOrderUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutCreatedByUserInput | DistributionOrderCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: DistributionOrderCreateManyCreatedByUserInputEnvelope
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
  }

  export type TransportOrderUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<TransportOrderCreateWithoutCreatedByUserInput, TransportOrderUncheckedCreateWithoutCreatedByUserInput> | TransportOrderCreateWithoutCreatedByUserInput[] | TransportOrderUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutCreatedByUserInput | TransportOrderCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: TransportOrderCreateManyCreatedByUserInputEnvelope
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
  }

  export type WarehouseSaleUncheckedCreateNestedManyWithoutSalesOfficerUserInput = {
    create?: XOR<WarehouseSaleCreateWithoutSalesOfficerUserInput, WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput> | WarehouseSaleCreateWithoutSalesOfficerUserInput[] | WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput[]
    connectOrCreate?: WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput | WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput[]
    createMany?: WarehouseSaleCreateManySalesOfficerUserInputEnvelope
    connect?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
  }

  export type CashFlowUncheckedCreateNestedManyWithoutCashierUserInput = {
    create?: XOR<CashFlowCreateWithoutCashierUserInput, CashFlowUncheckedCreateWithoutCashierUserInput> | CashFlowCreateWithoutCashierUserInput[] | CashFlowUncheckedCreateWithoutCashierUserInput[]
    connectOrCreate?: CashFlowCreateOrConnectWithoutCashierUserInput | CashFlowCreateOrConnectWithoutCashierUserInput[]
    createMany?: CashFlowCreateManyCashierUserInputEnvelope
    connect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DistributionOrderUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutCreatedByUserInput, DistributionOrderUncheckedCreateWithoutCreatedByUserInput> | DistributionOrderCreateWithoutCreatedByUserInput[] | DistributionOrderUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutCreatedByUserInput | DistributionOrderCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: DistributionOrderUpsertWithWhereUniqueWithoutCreatedByUserInput | DistributionOrderUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: DistributionOrderCreateManyCreatedByUserInputEnvelope
    set?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    disconnect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    delete?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    update?: DistributionOrderUpdateWithWhereUniqueWithoutCreatedByUserInput | DistributionOrderUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: DistributionOrderUpdateManyWithWhereWithoutCreatedByUserInput | DistributionOrderUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: DistributionOrderScalarWhereInput | DistributionOrderScalarWhereInput[]
  }

  export type TransportOrderUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<TransportOrderCreateWithoutCreatedByUserInput, TransportOrderUncheckedCreateWithoutCreatedByUserInput> | TransportOrderCreateWithoutCreatedByUserInput[] | TransportOrderUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutCreatedByUserInput | TransportOrderCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: TransportOrderUpsertWithWhereUniqueWithoutCreatedByUserInput | TransportOrderUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: TransportOrderCreateManyCreatedByUserInputEnvelope
    set?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    disconnect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    delete?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    update?: TransportOrderUpdateWithWhereUniqueWithoutCreatedByUserInput | TransportOrderUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: TransportOrderUpdateManyWithWhereWithoutCreatedByUserInput | TransportOrderUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: TransportOrderScalarWhereInput | TransportOrderScalarWhereInput[]
  }

  export type WarehouseSaleUpdateManyWithoutSalesOfficerUserNestedInput = {
    create?: XOR<WarehouseSaleCreateWithoutSalesOfficerUserInput, WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput> | WarehouseSaleCreateWithoutSalesOfficerUserInput[] | WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput[]
    connectOrCreate?: WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput | WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput[]
    upsert?: WarehouseSaleUpsertWithWhereUniqueWithoutSalesOfficerUserInput | WarehouseSaleUpsertWithWhereUniqueWithoutSalesOfficerUserInput[]
    createMany?: WarehouseSaleCreateManySalesOfficerUserInputEnvelope
    set?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
    disconnect?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
    delete?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
    connect?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
    update?: WarehouseSaleUpdateWithWhereUniqueWithoutSalesOfficerUserInput | WarehouseSaleUpdateWithWhereUniqueWithoutSalesOfficerUserInput[]
    updateMany?: WarehouseSaleUpdateManyWithWhereWithoutSalesOfficerUserInput | WarehouseSaleUpdateManyWithWhereWithoutSalesOfficerUserInput[]
    deleteMany?: WarehouseSaleScalarWhereInput | WarehouseSaleScalarWhereInput[]
  }

  export type CashFlowUpdateManyWithoutCashierUserNestedInput = {
    create?: XOR<CashFlowCreateWithoutCashierUserInput, CashFlowUncheckedCreateWithoutCashierUserInput> | CashFlowCreateWithoutCashierUserInput[] | CashFlowUncheckedCreateWithoutCashierUserInput[]
    connectOrCreate?: CashFlowCreateOrConnectWithoutCashierUserInput | CashFlowCreateOrConnectWithoutCashierUserInput[]
    upsert?: CashFlowUpsertWithWhereUniqueWithoutCashierUserInput | CashFlowUpsertWithWhereUniqueWithoutCashierUserInput[]
    createMany?: CashFlowCreateManyCashierUserInputEnvelope
    set?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    disconnect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    delete?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    connect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    update?: CashFlowUpdateWithWhereUniqueWithoutCashierUserInput | CashFlowUpdateWithWhereUniqueWithoutCashierUserInput[]
    updateMany?: CashFlowUpdateManyWithWhereWithoutCashierUserInput | CashFlowUpdateManyWithWhereWithoutCashierUserInput[]
    deleteMany?: CashFlowScalarWhereInput | CashFlowScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DistributionOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutCreatedByUserInput, DistributionOrderUncheckedCreateWithoutCreatedByUserInput> | DistributionOrderCreateWithoutCreatedByUserInput[] | DistributionOrderUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutCreatedByUserInput | DistributionOrderCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: DistributionOrderUpsertWithWhereUniqueWithoutCreatedByUserInput | DistributionOrderUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: DistributionOrderCreateManyCreatedByUserInputEnvelope
    set?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    disconnect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    delete?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    update?: DistributionOrderUpdateWithWhereUniqueWithoutCreatedByUserInput | DistributionOrderUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: DistributionOrderUpdateManyWithWhereWithoutCreatedByUserInput | DistributionOrderUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: DistributionOrderScalarWhereInput | DistributionOrderScalarWhereInput[]
  }

  export type TransportOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<TransportOrderCreateWithoutCreatedByUserInput, TransportOrderUncheckedCreateWithoutCreatedByUserInput> | TransportOrderCreateWithoutCreatedByUserInput[] | TransportOrderUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutCreatedByUserInput | TransportOrderCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: TransportOrderUpsertWithWhereUniqueWithoutCreatedByUserInput | TransportOrderUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: TransportOrderCreateManyCreatedByUserInputEnvelope
    set?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    disconnect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    delete?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    update?: TransportOrderUpdateWithWhereUniqueWithoutCreatedByUserInput | TransportOrderUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: TransportOrderUpdateManyWithWhereWithoutCreatedByUserInput | TransportOrderUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: TransportOrderScalarWhereInput | TransportOrderScalarWhereInput[]
  }

  export type WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserNestedInput = {
    create?: XOR<WarehouseSaleCreateWithoutSalesOfficerUserInput, WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput> | WarehouseSaleCreateWithoutSalesOfficerUserInput[] | WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput[]
    connectOrCreate?: WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput | WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput[]
    upsert?: WarehouseSaleUpsertWithWhereUniqueWithoutSalesOfficerUserInput | WarehouseSaleUpsertWithWhereUniqueWithoutSalesOfficerUserInput[]
    createMany?: WarehouseSaleCreateManySalesOfficerUserInputEnvelope
    set?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
    disconnect?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
    delete?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
    connect?: WarehouseSaleWhereUniqueInput | WarehouseSaleWhereUniqueInput[]
    update?: WarehouseSaleUpdateWithWhereUniqueWithoutSalesOfficerUserInput | WarehouseSaleUpdateWithWhereUniqueWithoutSalesOfficerUserInput[]
    updateMany?: WarehouseSaleUpdateManyWithWhereWithoutSalesOfficerUserInput | WarehouseSaleUpdateManyWithWhereWithoutSalesOfficerUserInput[]
    deleteMany?: WarehouseSaleScalarWhereInput | WarehouseSaleScalarWhereInput[]
  }

  export type CashFlowUncheckedUpdateManyWithoutCashierUserNestedInput = {
    create?: XOR<CashFlowCreateWithoutCashierUserInput, CashFlowUncheckedCreateWithoutCashierUserInput> | CashFlowCreateWithoutCashierUserInput[] | CashFlowUncheckedCreateWithoutCashierUserInput[]
    connectOrCreate?: CashFlowCreateOrConnectWithoutCashierUserInput | CashFlowCreateOrConnectWithoutCashierUserInput[]
    upsert?: CashFlowUpsertWithWhereUniqueWithoutCashierUserInput | CashFlowUpsertWithWhereUniqueWithoutCashierUserInput[]
    createMany?: CashFlowCreateManyCashierUserInputEnvelope
    set?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    disconnect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    delete?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    connect?: CashFlowWhereUniqueInput | CashFlowWhereUniqueInput[]
    update?: CashFlowUpdateWithWhereUniqueWithoutCashierUserInput | CashFlowUpdateWithWhereUniqueWithoutCashierUserInput[]
    updateMany?: CashFlowUpdateManyWithWhereWithoutCashierUserInput | CashFlowUpdateManyWithWhereWithoutCashierUserInput[]
    deleteMany?: CashFlowScalarWhereInput | CashFlowScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type DistributionOrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<DistributionOrderItemCreateWithoutProductInput, DistributionOrderItemUncheckedCreateWithoutProductInput> | DistributionOrderItemCreateWithoutProductInput[] | DistributionOrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: DistributionOrderItemCreateOrConnectWithoutProductInput | DistributionOrderItemCreateOrConnectWithoutProductInput[]
    createMany?: DistributionOrderItemCreateManyProductInputEnvelope
    connect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
  }

  export type PalletPricingCreateNestedManyWithoutProductInput = {
    create?: XOR<PalletPricingCreateWithoutProductInput, PalletPricingUncheckedCreateWithoutProductInput> | PalletPricingCreateWithoutProductInput[] | PalletPricingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PalletPricingCreateOrConnectWithoutProductInput | PalletPricingCreateOrConnectWithoutProductInput[]
    createMany?: PalletPricingCreateManyProductInputEnvelope
    connect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
  }

  export type WarehouseInventoryCreateNestedManyWithoutProductInput = {
    create?: XOR<WarehouseInventoryCreateWithoutProductInput, WarehouseInventoryUncheckedCreateWithoutProductInput> | WarehouseInventoryCreateWithoutProductInput[] | WarehouseInventoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: WarehouseInventoryCreateOrConnectWithoutProductInput | WarehouseInventoryCreateOrConnectWithoutProductInput[]
    createMany?: WarehouseInventoryCreateManyProductInputEnvelope
    connect?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
  }

  export type DistributionOrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<DistributionOrderItemCreateWithoutProductInput, DistributionOrderItemUncheckedCreateWithoutProductInput> | DistributionOrderItemCreateWithoutProductInput[] | DistributionOrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: DistributionOrderItemCreateOrConnectWithoutProductInput | DistributionOrderItemCreateOrConnectWithoutProductInput[]
    createMany?: DistributionOrderItemCreateManyProductInputEnvelope
    connect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
  }

  export type PalletPricingUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<PalletPricingCreateWithoutProductInput, PalletPricingUncheckedCreateWithoutProductInput> | PalletPricingCreateWithoutProductInput[] | PalletPricingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PalletPricingCreateOrConnectWithoutProductInput | PalletPricingCreateOrConnectWithoutProductInput[]
    createMany?: PalletPricingCreateManyProductInputEnvelope
    connect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
  }

  export type WarehouseInventoryUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<WarehouseInventoryCreateWithoutProductInput, WarehouseInventoryUncheckedCreateWithoutProductInput> | WarehouseInventoryCreateWithoutProductInput[] | WarehouseInventoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: WarehouseInventoryCreateOrConnectWithoutProductInput | WarehouseInventoryCreateOrConnectWithoutProductInput[]
    createMany?: WarehouseInventoryCreateManyProductInputEnvelope
    connect?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<DistributionOrderItemCreateWithoutProductInput, DistributionOrderItemUncheckedCreateWithoutProductInput> | DistributionOrderItemCreateWithoutProductInput[] | DistributionOrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: DistributionOrderItemCreateOrConnectWithoutProductInput | DistributionOrderItemCreateOrConnectWithoutProductInput[]
    upsert?: DistributionOrderItemUpsertWithWhereUniqueWithoutProductInput | DistributionOrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: DistributionOrderItemCreateManyProductInputEnvelope
    set?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    disconnect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    delete?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    connect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    update?: DistributionOrderItemUpdateWithWhereUniqueWithoutProductInput | DistributionOrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: DistributionOrderItemUpdateManyWithWhereWithoutProductInput | DistributionOrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: DistributionOrderItemScalarWhereInput | DistributionOrderItemScalarWhereInput[]
  }

  export type PalletPricingUpdateManyWithoutProductNestedInput = {
    create?: XOR<PalletPricingCreateWithoutProductInput, PalletPricingUncheckedCreateWithoutProductInput> | PalletPricingCreateWithoutProductInput[] | PalletPricingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PalletPricingCreateOrConnectWithoutProductInput | PalletPricingCreateOrConnectWithoutProductInput[]
    upsert?: PalletPricingUpsertWithWhereUniqueWithoutProductInput | PalletPricingUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PalletPricingCreateManyProductInputEnvelope
    set?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    disconnect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    delete?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    connect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    update?: PalletPricingUpdateWithWhereUniqueWithoutProductInput | PalletPricingUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PalletPricingUpdateManyWithWhereWithoutProductInput | PalletPricingUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PalletPricingScalarWhereInput | PalletPricingScalarWhereInput[]
  }

  export type WarehouseInventoryUpdateManyWithoutProductNestedInput = {
    create?: XOR<WarehouseInventoryCreateWithoutProductInput, WarehouseInventoryUncheckedCreateWithoutProductInput> | WarehouseInventoryCreateWithoutProductInput[] | WarehouseInventoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: WarehouseInventoryCreateOrConnectWithoutProductInput | WarehouseInventoryCreateOrConnectWithoutProductInput[]
    upsert?: WarehouseInventoryUpsertWithWhereUniqueWithoutProductInput | WarehouseInventoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: WarehouseInventoryCreateManyProductInputEnvelope
    set?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
    disconnect?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
    delete?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
    connect?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
    update?: WarehouseInventoryUpdateWithWhereUniqueWithoutProductInput | WarehouseInventoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: WarehouseInventoryUpdateManyWithWhereWithoutProductInput | WarehouseInventoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: WarehouseInventoryScalarWhereInput | WarehouseInventoryScalarWhereInput[]
  }

  export type DistributionOrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<DistributionOrderItemCreateWithoutProductInput, DistributionOrderItemUncheckedCreateWithoutProductInput> | DistributionOrderItemCreateWithoutProductInput[] | DistributionOrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: DistributionOrderItemCreateOrConnectWithoutProductInput | DistributionOrderItemCreateOrConnectWithoutProductInput[]
    upsert?: DistributionOrderItemUpsertWithWhereUniqueWithoutProductInput | DistributionOrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: DistributionOrderItemCreateManyProductInputEnvelope
    set?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    disconnect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    delete?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    connect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    update?: DistributionOrderItemUpdateWithWhereUniqueWithoutProductInput | DistributionOrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: DistributionOrderItemUpdateManyWithWhereWithoutProductInput | DistributionOrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: DistributionOrderItemScalarWhereInput | DistributionOrderItemScalarWhereInput[]
  }

  export type PalletPricingUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<PalletPricingCreateWithoutProductInput, PalletPricingUncheckedCreateWithoutProductInput> | PalletPricingCreateWithoutProductInput[] | PalletPricingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PalletPricingCreateOrConnectWithoutProductInput | PalletPricingCreateOrConnectWithoutProductInput[]
    upsert?: PalletPricingUpsertWithWhereUniqueWithoutProductInput | PalletPricingUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PalletPricingCreateManyProductInputEnvelope
    set?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    disconnect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    delete?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    connect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    update?: PalletPricingUpdateWithWhereUniqueWithoutProductInput | PalletPricingUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PalletPricingUpdateManyWithWhereWithoutProductInput | PalletPricingUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PalletPricingScalarWhereInput | PalletPricingScalarWhereInput[]
  }

  export type WarehouseInventoryUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<WarehouseInventoryCreateWithoutProductInput, WarehouseInventoryUncheckedCreateWithoutProductInput> | WarehouseInventoryCreateWithoutProductInput[] | WarehouseInventoryUncheckedCreateWithoutProductInput[]
    connectOrCreate?: WarehouseInventoryCreateOrConnectWithoutProductInput | WarehouseInventoryCreateOrConnectWithoutProductInput[]
    upsert?: WarehouseInventoryUpsertWithWhereUniqueWithoutProductInput | WarehouseInventoryUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: WarehouseInventoryCreateManyProductInputEnvelope
    set?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
    disconnect?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
    delete?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
    connect?: WarehouseInventoryWhereUniqueInput | WarehouseInventoryWhereUniqueInput[]
    update?: WarehouseInventoryUpdateWithWhereUniqueWithoutProductInput | WarehouseInventoryUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: WarehouseInventoryUpdateManyWithWhereWithoutProductInput | WarehouseInventoryUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: WarehouseInventoryScalarWhereInput | WarehouseInventoryScalarWhereInput[]
  }

  export type DistributionOrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<DistributionOrderCreateWithoutCustomerInput, DistributionOrderUncheckedCreateWithoutCustomerInput> | DistributionOrderCreateWithoutCustomerInput[] | DistributionOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutCustomerInput | DistributionOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: DistributionOrderCreateManyCustomerInputEnvelope
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
  }

  export type DistributionOrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<DistributionOrderCreateWithoutCustomerInput, DistributionOrderUncheckedCreateWithoutCustomerInput> | DistributionOrderCreateWithoutCustomerInput[] | DistributionOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutCustomerInput | DistributionOrderCreateOrConnectWithoutCustomerInput[]
    createMany?: DistributionOrderCreateManyCustomerInputEnvelope
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
  }

  export type DistributionOrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutCustomerInput, DistributionOrderUncheckedCreateWithoutCustomerInput> | DistributionOrderCreateWithoutCustomerInput[] | DistributionOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutCustomerInput | DistributionOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: DistributionOrderUpsertWithWhereUniqueWithoutCustomerInput | DistributionOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: DistributionOrderCreateManyCustomerInputEnvelope
    set?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    disconnect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    delete?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    update?: DistributionOrderUpdateWithWhereUniqueWithoutCustomerInput | DistributionOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: DistributionOrderUpdateManyWithWhereWithoutCustomerInput | DistributionOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: DistributionOrderScalarWhereInput | DistributionOrderScalarWhereInput[]
  }

  export type DistributionOrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutCustomerInput, DistributionOrderUncheckedCreateWithoutCustomerInput> | DistributionOrderCreateWithoutCustomerInput[] | DistributionOrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutCustomerInput | DistributionOrderCreateOrConnectWithoutCustomerInput[]
    upsert?: DistributionOrderUpsertWithWhereUniqueWithoutCustomerInput | DistributionOrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: DistributionOrderCreateManyCustomerInputEnvelope
    set?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    disconnect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    delete?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    update?: DistributionOrderUpdateWithWhereUniqueWithoutCustomerInput | DistributionOrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: DistributionOrderUpdateManyWithWhereWithoutCustomerInput | DistributionOrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: DistributionOrderScalarWhereInput | DistributionOrderScalarWhereInput[]
  }

  export type DistributionOrderCreateNestedManyWithoutLocationInput = {
    create?: XOR<DistributionOrderCreateWithoutLocationInput, DistributionOrderUncheckedCreateWithoutLocationInput> | DistributionOrderCreateWithoutLocationInput[] | DistributionOrderUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutLocationInput | DistributionOrderCreateOrConnectWithoutLocationInput[]
    createMany?: DistributionOrderCreateManyLocationInputEnvelope
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
  }

  export type PalletPricingCreateNestedManyWithoutLocationInput = {
    create?: XOR<PalletPricingCreateWithoutLocationInput, PalletPricingUncheckedCreateWithoutLocationInput> | PalletPricingCreateWithoutLocationInput[] | PalletPricingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PalletPricingCreateOrConnectWithoutLocationInput | PalletPricingCreateOrConnectWithoutLocationInput[]
    createMany?: PalletPricingCreateManyLocationInputEnvelope
    connect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
  }

  export type TransportOrderCreateNestedManyWithoutLocationInput = {
    create?: XOR<TransportOrderCreateWithoutLocationInput, TransportOrderUncheckedCreateWithoutLocationInput> | TransportOrderCreateWithoutLocationInput[] | TransportOrderUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutLocationInput | TransportOrderCreateOrConnectWithoutLocationInput[]
    createMany?: TransportOrderCreateManyLocationInputEnvelope
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
  }

  export type DistributionOrderUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<DistributionOrderCreateWithoutLocationInput, DistributionOrderUncheckedCreateWithoutLocationInput> | DistributionOrderCreateWithoutLocationInput[] | DistributionOrderUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutLocationInput | DistributionOrderCreateOrConnectWithoutLocationInput[]
    createMany?: DistributionOrderCreateManyLocationInputEnvelope
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
  }

  export type PalletPricingUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<PalletPricingCreateWithoutLocationInput, PalletPricingUncheckedCreateWithoutLocationInput> | PalletPricingCreateWithoutLocationInput[] | PalletPricingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PalletPricingCreateOrConnectWithoutLocationInput | PalletPricingCreateOrConnectWithoutLocationInput[]
    createMany?: PalletPricingCreateManyLocationInputEnvelope
    connect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
  }

  export type TransportOrderUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<TransportOrderCreateWithoutLocationInput, TransportOrderUncheckedCreateWithoutLocationInput> | TransportOrderCreateWithoutLocationInput[] | TransportOrderUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutLocationInput | TransportOrderCreateOrConnectWithoutLocationInput[]
    createMany?: TransportOrderCreateManyLocationInputEnvelope
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
  }

  export type DistributionOrderUpdateManyWithoutLocationNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutLocationInput, DistributionOrderUncheckedCreateWithoutLocationInput> | DistributionOrderCreateWithoutLocationInput[] | DistributionOrderUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutLocationInput | DistributionOrderCreateOrConnectWithoutLocationInput[]
    upsert?: DistributionOrderUpsertWithWhereUniqueWithoutLocationInput | DistributionOrderUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: DistributionOrderCreateManyLocationInputEnvelope
    set?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    disconnect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    delete?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    update?: DistributionOrderUpdateWithWhereUniqueWithoutLocationInput | DistributionOrderUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: DistributionOrderUpdateManyWithWhereWithoutLocationInput | DistributionOrderUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: DistributionOrderScalarWhereInput | DistributionOrderScalarWhereInput[]
  }

  export type PalletPricingUpdateManyWithoutLocationNestedInput = {
    create?: XOR<PalletPricingCreateWithoutLocationInput, PalletPricingUncheckedCreateWithoutLocationInput> | PalletPricingCreateWithoutLocationInput[] | PalletPricingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PalletPricingCreateOrConnectWithoutLocationInput | PalletPricingCreateOrConnectWithoutLocationInput[]
    upsert?: PalletPricingUpsertWithWhereUniqueWithoutLocationInput | PalletPricingUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: PalletPricingCreateManyLocationInputEnvelope
    set?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    disconnect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    delete?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    connect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    update?: PalletPricingUpdateWithWhereUniqueWithoutLocationInput | PalletPricingUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: PalletPricingUpdateManyWithWhereWithoutLocationInput | PalletPricingUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: PalletPricingScalarWhereInput | PalletPricingScalarWhereInput[]
  }

  export type TransportOrderUpdateManyWithoutLocationNestedInput = {
    create?: XOR<TransportOrderCreateWithoutLocationInput, TransportOrderUncheckedCreateWithoutLocationInput> | TransportOrderCreateWithoutLocationInput[] | TransportOrderUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutLocationInput | TransportOrderCreateOrConnectWithoutLocationInput[]
    upsert?: TransportOrderUpsertWithWhereUniqueWithoutLocationInput | TransportOrderUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: TransportOrderCreateManyLocationInputEnvelope
    set?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    disconnect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    delete?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    update?: TransportOrderUpdateWithWhereUniqueWithoutLocationInput | TransportOrderUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: TransportOrderUpdateManyWithWhereWithoutLocationInput | TransportOrderUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: TransportOrderScalarWhereInput | TransportOrderScalarWhereInput[]
  }

  export type DistributionOrderUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutLocationInput, DistributionOrderUncheckedCreateWithoutLocationInput> | DistributionOrderCreateWithoutLocationInput[] | DistributionOrderUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutLocationInput | DistributionOrderCreateOrConnectWithoutLocationInput[]
    upsert?: DistributionOrderUpsertWithWhereUniqueWithoutLocationInput | DistributionOrderUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: DistributionOrderCreateManyLocationInputEnvelope
    set?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    disconnect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    delete?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    connect?: DistributionOrderWhereUniqueInput | DistributionOrderWhereUniqueInput[]
    update?: DistributionOrderUpdateWithWhereUniqueWithoutLocationInput | DistributionOrderUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: DistributionOrderUpdateManyWithWhereWithoutLocationInput | DistributionOrderUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: DistributionOrderScalarWhereInput | DistributionOrderScalarWhereInput[]
  }

  export type PalletPricingUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<PalletPricingCreateWithoutLocationInput, PalletPricingUncheckedCreateWithoutLocationInput> | PalletPricingCreateWithoutLocationInput[] | PalletPricingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PalletPricingCreateOrConnectWithoutLocationInput | PalletPricingCreateOrConnectWithoutLocationInput[]
    upsert?: PalletPricingUpsertWithWhereUniqueWithoutLocationInput | PalletPricingUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: PalletPricingCreateManyLocationInputEnvelope
    set?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    disconnect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    delete?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    connect?: PalletPricingWhereUniqueInput | PalletPricingWhereUniqueInput[]
    update?: PalletPricingUpdateWithWhereUniqueWithoutLocationInput | PalletPricingUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: PalletPricingUpdateManyWithWhereWithoutLocationInput | PalletPricingUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: PalletPricingScalarWhereInput | PalletPricingScalarWhereInput[]
  }

  export type TransportOrderUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<TransportOrderCreateWithoutLocationInput, TransportOrderUncheckedCreateWithoutLocationInput> | TransportOrderCreateWithoutLocationInput[] | TransportOrderUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutLocationInput | TransportOrderCreateOrConnectWithoutLocationInput[]
    upsert?: TransportOrderUpsertWithWhereUniqueWithoutLocationInput | TransportOrderUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: TransportOrderCreateManyLocationInputEnvelope
    set?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    disconnect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    delete?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    update?: TransportOrderUpdateWithWhereUniqueWithoutLocationInput | TransportOrderUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: TransportOrderUpdateManyWithWhereWithoutLocationInput | TransportOrderUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: TransportOrderScalarWhereInput | TransportOrderScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutDistributionOrdersInput = {
    create?: XOR<CustomerCreateWithoutDistributionOrdersInput, CustomerUncheckedCreateWithoutDistributionOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutDistributionOrdersInput
    connect?: CustomerWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutDistributionOrdersInput = {
    create?: XOR<LocationCreateWithoutDistributionOrdersInput, LocationUncheckedCreateWithoutDistributionOrdersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutDistributionOrdersInput
    connect?: LocationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDistributionOrdersInput = {
    create?: XOR<UserCreateWithoutDistributionOrdersInput, UserUncheckedCreateWithoutDistributionOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutDistributionOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type DistributionOrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<DistributionOrderItemCreateWithoutOrderInput, DistributionOrderItemUncheckedCreateWithoutOrderInput> | DistributionOrderItemCreateWithoutOrderInput[] | DistributionOrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: DistributionOrderItemCreateOrConnectWithoutOrderInput | DistributionOrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: DistributionOrderItemCreateManyOrderInputEnvelope
    connect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
  }

  export type PriceAdjustmentCreateNestedManyWithoutOrderInput = {
    create?: XOR<PriceAdjustmentCreateWithoutOrderInput, PriceAdjustmentUncheckedCreateWithoutOrderInput> | PriceAdjustmentCreateWithoutOrderInput[] | PriceAdjustmentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PriceAdjustmentCreateOrConnectWithoutOrderInput | PriceAdjustmentCreateOrConnectWithoutOrderInput[]
    createMany?: PriceAdjustmentCreateManyOrderInputEnvelope
    connect?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
  }

  export type TransportOrderCreateNestedOneWithoutDistributionOrderInput = {
    create?: XOR<TransportOrderCreateWithoutDistributionOrderInput, TransportOrderUncheckedCreateWithoutDistributionOrderInput>
    connectOrCreate?: TransportOrderCreateOrConnectWithoutDistributionOrderInput
    connect?: TransportOrderWhereUniqueInput
  }

  export type DistributionOrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<DistributionOrderItemCreateWithoutOrderInput, DistributionOrderItemUncheckedCreateWithoutOrderInput> | DistributionOrderItemCreateWithoutOrderInput[] | DistributionOrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: DistributionOrderItemCreateOrConnectWithoutOrderInput | DistributionOrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: DistributionOrderItemCreateManyOrderInputEnvelope
    connect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
  }

  export type PriceAdjustmentUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<PriceAdjustmentCreateWithoutOrderInput, PriceAdjustmentUncheckedCreateWithoutOrderInput> | PriceAdjustmentCreateWithoutOrderInput[] | PriceAdjustmentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PriceAdjustmentCreateOrConnectWithoutOrderInput | PriceAdjustmentCreateOrConnectWithoutOrderInput[]
    createMany?: PriceAdjustmentCreateManyOrderInputEnvelope
    connect?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
  }

  export type TransportOrderUncheckedCreateNestedOneWithoutDistributionOrderInput = {
    create?: XOR<TransportOrderCreateWithoutDistributionOrderInput, TransportOrderUncheckedCreateWithoutDistributionOrderInput>
    connectOrCreate?: TransportOrderCreateOrConnectWithoutDistributionOrderInput
    connect?: TransportOrderWhereUniqueInput
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type CustomerUpdateOneRequiredWithoutDistributionOrdersNestedInput = {
    create?: XOR<CustomerCreateWithoutDistributionOrdersInput, CustomerUncheckedCreateWithoutDistributionOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutDistributionOrdersInput
    upsert?: CustomerUpsertWithoutDistributionOrdersInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutDistributionOrdersInput, CustomerUpdateWithoutDistributionOrdersInput>, CustomerUncheckedUpdateWithoutDistributionOrdersInput>
  }

  export type LocationUpdateOneRequiredWithoutDistributionOrdersNestedInput = {
    create?: XOR<LocationCreateWithoutDistributionOrdersInput, LocationUncheckedCreateWithoutDistributionOrdersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutDistributionOrdersInput
    upsert?: LocationUpsertWithoutDistributionOrdersInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutDistributionOrdersInput, LocationUpdateWithoutDistributionOrdersInput>, LocationUncheckedUpdateWithoutDistributionOrdersInput>
  }

  export type UserUpdateOneRequiredWithoutDistributionOrdersNestedInput = {
    create?: XOR<UserCreateWithoutDistributionOrdersInput, UserUncheckedCreateWithoutDistributionOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutDistributionOrdersInput
    upsert?: UserUpsertWithoutDistributionOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDistributionOrdersInput, UserUpdateWithoutDistributionOrdersInput>, UserUncheckedUpdateWithoutDistributionOrdersInput>
  }

  export type DistributionOrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<DistributionOrderItemCreateWithoutOrderInput, DistributionOrderItemUncheckedCreateWithoutOrderInput> | DistributionOrderItemCreateWithoutOrderInput[] | DistributionOrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: DistributionOrderItemCreateOrConnectWithoutOrderInput | DistributionOrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: DistributionOrderItemUpsertWithWhereUniqueWithoutOrderInput | DistributionOrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: DistributionOrderItemCreateManyOrderInputEnvelope
    set?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    disconnect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    delete?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    connect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    update?: DistributionOrderItemUpdateWithWhereUniqueWithoutOrderInput | DistributionOrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: DistributionOrderItemUpdateManyWithWhereWithoutOrderInput | DistributionOrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: DistributionOrderItemScalarWhereInput | DistributionOrderItemScalarWhereInput[]
  }

  export type PriceAdjustmentUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PriceAdjustmentCreateWithoutOrderInput, PriceAdjustmentUncheckedCreateWithoutOrderInput> | PriceAdjustmentCreateWithoutOrderInput[] | PriceAdjustmentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PriceAdjustmentCreateOrConnectWithoutOrderInput | PriceAdjustmentCreateOrConnectWithoutOrderInput[]
    upsert?: PriceAdjustmentUpsertWithWhereUniqueWithoutOrderInput | PriceAdjustmentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PriceAdjustmentCreateManyOrderInputEnvelope
    set?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
    disconnect?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
    delete?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
    connect?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
    update?: PriceAdjustmentUpdateWithWhereUniqueWithoutOrderInput | PriceAdjustmentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PriceAdjustmentUpdateManyWithWhereWithoutOrderInput | PriceAdjustmentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PriceAdjustmentScalarWhereInput | PriceAdjustmentScalarWhereInput[]
  }

  export type TransportOrderUpdateOneWithoutDistributionOrderNestedInput = {
    create?: XOR<TransportOrderCreateWithoutDistributionOrderInput, TransportOrderUncheckedCreateWithoutDistributionOrderInput>
    connectOrCreate?: TransportOrderCreateOrConnectWithoutDistributionOrderInput
    upsert?: TransportOrderUpsertWithoutDistributionOrderInput
    disconnect?: TransportOrderWhereInput | boolean
    delete?: TransportOrderWhereInput | boolean
    connect?: TransportOrderWhereUniqueInput
    update?: XOR<XOR<TransportOrderUpdateToOneWithWhereWithoutDistributionOrderInput, TransportOrderUpdateWithoutDistributionOrderInput>, TransportOrderUncheckedUpdateWithoutDistributionOrderInput>
  }

  export type DistributionOrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<DistributionOrderItemCreateWithoutOrderInput, DistributionOrderItemUncheckedCreateWithoutOrderInput> | DistributionOrderItemCreateWithoutOrderInput[] | DistributionOrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: DistributionOrderItemCreateOrConnectWithoutOrderInput | DistributionOrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: DistributionOrderItemUpsertWithWhereUniqueWithoutOrderInput | DistributionOrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: DistributionOrderItemCreateManyOrderInputEnvelope
    set?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    disconnect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    delete?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    connect?: DistributionOrderItemWhereUniqueInput | DistributionOrderItemWhereUniqueInput[]
    update?: DistributionOrderItemUpdateWithWhereUniqueWithoutOrderInput | DistributionOrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: DistributionOrderItemUpdateManyWithWhereWithoutOrderInput | DistributionOrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: DistributionOrderItemScalarWhereInput | DistributionOrderItemScalarWhereInput[]
  }

  export type PriceAdjustmentUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PriceAdjustmentCreateWithoutOrderInput, PriceAdjustmentUncheckedCreateWithoutOrderInput> | PriceAdjustmentCreateWithoutOrderInput[] | PriceAdjustmentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PriceAdjustmentCreateOrConnectWithoutOrderInput | PriceAdjustmentCreateOrConnectWithoutOrderInput[]
    upsert?: PriceAdjustmentUpsertWithWhereUniqueWithoutOrderInput | PriceAdjustmentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PriceAdjustmentCreateManyOrderInputEnvelope
    set?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
    disconnect?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
    delete?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
    connect?: PriceAdjustmentWhereUniqueInput | PriceAdjustmentWhereUniqueInput[]
    update?: PriceAdjustmentUpdateWithWhereUniqueWithoutOrderInput | PriceAdjustmentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PriceAdjustmentUpdateManyWithWhereWithoutOrderInput | PriceAdjustmentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PriceAdjustmentScalarWhereInput | PriceAdjustmentScalarWhereInput[]
  }

  export type TransportOrderUncheckedUpdateOneWithoutDistributionOrderNestedInput = {
    create?: XOR<TransportOrderCreateWithoutDistributionOrderInput, TransportOrderUncheckedCreateWithoutDistributionOrderInput>
    connectOrCreate?: TransportOrderCreateOrConnectWithoutDistributionOrderInput
    upsert?: TransportOrderUpsertWithoutDistributionOrderInput
    disconnect?: TransportOrderWhereInput | boolean
    delete?: TransportOrderWhereInput | boolean
    connect?: TransportOrderWhereUniqueInput
    update?: XOR<XOR<TransportOrderUpdateToOneWithWhereWithoutDistributionOrderInput, TransportOrderUpdateWithoutDistributionOrderInput>, TransportOrderUncheckedUpdateWithoutDistributionOrderInput>
  }

  export type DistributionOrderCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<DistributionOrderCreateWithoutOrderItemsInput, DistributionOrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutOrderItemsInput
    connect?: DistributionOrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutDistributionOrderItemsInput = {
    create?: XOR<ProductCreateWithoutDistributionOrderItemsInput, ProductUncheckedCreateWithoutDistributionOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDistributionOrderItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type DistributionOrderUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutOrderItemsInput, DistributionOrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutOrderItemsInput
    upsert?: DistributionOrderUpsertWithoutOrderItemsInput
    connect?: DistributionOrderWhereUniqueInput
    update?: XOR<XOR<DistributionOrderUpdateToOneWithWhereWithoutOrderItemsInput, DistributionOrderUpdateWithoutOrderItemsInput>, DistributionOrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutDistributionOrderItemsNestedInput = {
    create?: XOR<ProductCreateWithoutDistributionOrderItemsInput, ProductUncheckedCreateWithoutDistributionOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDistributionOrderItemsInput
    upsert?: ProductUpsertWithoutDistributionOrderItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutDistributionOrderItemsInput, ProductUpdateWithoutDistributionOrderItemsInput>, ProductUncheckedUpdateWithoutDistributionOrderItemsInput>
  }

  export type ProductCreateNestedOneWithoutPalletPricingInput = {
    create?: XOR<ProductCreateWithoutPalletPricingInput, ProductUncheckedCreateWithoutPalletPricingInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPalletPricingInput
    connect?: ProductWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutPalletPricingInput = {
    create?: XOR<LocationCreateWithoutPalletPricingInput, LocationUncheckedCreateWithoutPalletPricingInput>
    connectOrCreate?: LocationCreateOrConnectWithoutPalletPricingInput
    connect?: LocationWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutPalletPricingNestedInput = {
    create?: XOR<ProductCreateWithoutPalletPricingInput, ProductUncheckedCreateWithoutPalletPricingInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPalletPricingInput
    upsert?: ProductUpsertWithoutPalletPricingInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutPalletPricingInput, ProductUpdateWithoutPalletPricingInput>, ProductUncheckedUpdateWithoutPalletPricingInput>
  }

  export type LocationUpdateOneWithoutPalletPricingNestedInput = {
    create?: XOR<LocationCreateWithoutPalletPricingInput, LocationUncheckedCreateWithoutPalletPricingInput>
    connectOrCreate?: LocationCreateOrConnectWithoutPalletPricingInput
    upsert?: LocationUpsertWithoutPalletPricingInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutPalletPricingInput, LocationUpdateWithoutPalletPricingInput>, LocationUncheckedUpdateWithoutPalletPricingInput>
  }

  export type DistributionOrderCreateNestedOneWithoutPriceAdjustmentsInput = {
    create?: XOR<DistributionOrderCreateWithoutPriceAdjustmentsInput, DistributionOrderUncheckedCreateWithoutPriceAdjustmentsInput>
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutPriceAdjustmentsInput
    connect?: DistributionOrderWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderUpdateOneRequiredWithoutPriceAdjustmentsNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutPriceAdjustmentsInput, DistributionOrderUncheckedCreateWithoutPriceAdjustmentsInput>
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutPriceAdjustmentsInput
    upsert?: DistributionOrderUpsertWithoutPriceAdjustmentsInput
    connect?: DistributionOrderWhereUniqueInput
    update?: XOR<XOR<DistributionOrderUpdateToOneWithWhereWithoutPriceAdjustmentsInput, DistributionOrderUpdateWithoutPriceAdjustmentsInput>, DistributionOrderUncheckedUpdateWithoutPriceAdjustmentsInput>
  }

  export type TransportOrderCreateNestedManyWithoutTruckInput = {
    create?: XOR<TransportOrderCreateWithoutTruckInput, TransportOrderUncheckedCreateWithoutTruckInput> | TransportOrderCreateWithoutTruckInput[] | TransportOrderUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutTruckInput | TransportOrderCreateOrConnectWithoutTruckInput[]
    createMany?: TransportOrderCreateManyTruckInputEnvelope
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
  }

  export type TransportOrderUncheckedCreateNestedManyWithoutTruckInput = {
    create?: XOR<TransportOrderCreateWithoutTruckInput, TransportOrderUncheckedCreateWithoutTruckInput> | TransportOrderCreateWithoutTruckInput[] | TransportOrderUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutTruckInput | TransportOrderCreateOrConnectWithoutTruckInput[]
    createMany?: TransportOrderCreateManyTruckInputEnvelope
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
  }

  export type TransportOrderUpdateManyWithoutTruckNestedInput = {
    create?: XOR<TransportOrderCreateWithoutTruckInput, TransportOrderUncheckedCreateWithoutTruckInput> | TransportOrderCreateWithoutTruckInput[] | TransportOrderUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutTruckInput | TransportOrderCreateOrConnectWithoutTruckInput[]
    upsert?: TransportOrderUpsertWithWhereUniqueWithoutTruckInput | TransportOrderUpsertWithWhereUniqueWithoutTruckInput[]
    createMany?: TransportOrderCreateManyTruckInputEnvelope
    set?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    disconnect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    delete?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    update?: TransportOrderUpdateWithWhereUniqueWithoutTruckInput | TransportOrderUpdateWithWhereUniqueWithoutTruckInput[]
    updateMany?: TransportOrderUpdateManyWithWhereWithoutTruckInput | TransportOrderUpdateManyWithWhereWithoutTruckInput[]
    deleteMany?: TransportOrderScalarWhereInput | TransportOrderScalarWhereInput[]
  }

  export type TransportOrderUncheckedUpdateManyWithoutTruckNestedInput = {
    create?: XOR<TransportOrderCreateWithoutTruckInput, TransportOrderUncheckedCreateWithoutTruckInput> | TransportOrderCreateWithoutTruckInput[] | TransportOrderUncheckedCreateWithoutTruckInput[]
    connectOrCreate?: TransportOrderCreateOrConnectWithoutTruckInput | TransportOrderCreateOrConnectWithoutTruckInput[]
    upsert?: TransportOrderUpsertWithWhereUniqueWithoutTruckInput | TransportOrderUpsertWithWhereUniqueWithoutTruckInput[]
    createMany?: TransportOrderCreateManyTruckInputEnvelope
    set?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    disconnect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    delete?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    connect?: TransportOrderWhereUniqueInput | TransportOrderWhereUniqueInput[]
    update?: TransportOrderUpdateWithWhereUniqueWithoutTruckInput | TransportOrderUpdateWithWhereUniqueWithoutTruckInput[]
    updateMany?: TransportOrderUpdateManyWithWhereWithoutTruckInput | TransportOrderUpdateManyWithWhereWithoutTruckInput[]
    deleteMany?: TransportOrderScalarWhereInput | TransportOrderScalarWhereInput[]
  }

  export type DistributionOrderCreateNestedOneWithoutTransportOrderInput = {
    create?: XOR<DistributionOrderCreateWithoutTransportOrderInput, DistributionOrderUncheckedCreateWithoutTransportOrderInput>
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutTransportOrderInput
    connect?: DistributionOrderWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutTransportOrdersInput = {
    create?: XOR<LocationCreateWithoutTransportOrdersInput, LocationUncheckedCreateWithoutTransportOrdersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTransportOrdersInput
    connect?: LocationWhereUniqueInput
  }

  export type TruckCapacityCreateNestedOneWithoutTransportOrdersInput = {
    create?: XOR<TruckCapacityCreateWithoutTransportOrdersInput, TruckCapacityUncheckedCreateWithoutTransportOrdersInput>
    connectOrCreate?: TruckCapacityCreateOrConnectWithoutTransportOrdersInput
    connect?: TruckCapacityWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransportOrdersInput = {
    create?: XOR<UserCreateWithoutTransportOrdersInput, UserUncheckedCreateWithoutTransportOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransportOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDeliveryStatusFieldUpdateOperationsInput = {
    set?: $Enums.DeliveryStatus
  }

  export type DistributionOrderUpdateOneWithoutTransportOrderNestedInput = {
    create?: XOR<DistributionOrderCreateWithoutTransportOrderInput, DistributionOrderUncheckedCreateWithoutTransportOrderInput>
    connectOrCreate?: DistributionOrderCreateOrConnectWithoutTransportOrderInput
    upsert?: DistributionOrderUpsertWithoutTransportOrderInput
    disconnect?: DistributionOrderWhereInput | boolean
    delete?: DistributionOrderWhereInput | boolean
    connect?: DistributionOrderWhereUniqueInput
    update?: XOR<XOR<DistributionOrderUpdateToOneWithWhereWithoutTransportOrderInput, DistributionOrderUpdateWithoutTransportOrderInput>, DistributionOrderUncheckedUpdateWithoutTransportOrderInput>
  }

  export type LocationUpdateOneRequiredWithoutTransportOrdersNestedInput = {
    create?: XOR<LocationCreateWithoutTransportOrdersInput, LocationUncheckedCreateWithoutTransportOrdersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutTransportOrdersInput
    upsert?: LocationUpsertWithoutTransportOrdersInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutTransportOrdersInput, LocationUpdateWithoutTransportOrdersInput>, LocationUncheckedUpdateWithoutTransportOrdersInput>
  }

  export type TruckCapacityUpdateOneWithoutTransportOrdersNestedInput = {
    create?: XOR<TruckCapacityCreateWithoutTransportOrdersInput, TruckCapacityUncheckedCreateWithoutTransportOrdersInput>
    connectOrCreate?: TruckCapacityCreateOrConnectWithoutTransportOrdersInput
    upsert?: TruckCapacityUpsertWithoutTransportOrdersInput
    disconnect?: TruckCapacityWhereInput | boolean
    delete?: TruckCapacityWhereInput | boolean
    connect?: TruckCapacityWhereUniqueInput
    update?: XOR<XOR<TruckCapacityUpdateToOneWithWhereWithoutTransportOrdersInput, TruckCapacityUpdateWithoutTransportOrdersInput>, TruckCapacityUncheckedUpdateWithoutTransportOrdersInput>
  }

  export type UserUpdateOneRequiredWithoutTransportOrdersNestedInput = {
    create?: XOR<UserCreateWithoutTransportOrdersInput, UserUncheckedCreateWithoutTransportOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransportOrdersInput
    upsert?: UserUpsertWithoutTransportOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransportOrdersInput, UserUpdateWithoutTransportOrdersInput>, UserUncheckedUpdateWithoutTransportOrdersInput>
  }

  export type ProductCreateNestedOneWithoutWarehouseInventoryInput = {
    create?: XOR<ProductCreateWithoutWarehouseInventoryInput, ProductUncheckedCreateWithoutWarehouseInventoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutWarehouseInventoryInput
    connect?: ProductWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdateOneRequiredWithoutWarehouseInventoryNestedInput = {
    create?: XOR<ProductCreateWithoutWarehouseInventoryInput, ProductUncheckedCreateWithoutWarehouseInventoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutWarehouseInventoryInput
    upsert?: ProductUpsertWithoutWarehouseInventoryInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutWarehouseInventoryInput, ProductUpdateWithoutWarehouseInventoryInput>, ProductUncheckedUpdateWithoutWarehouseInventoryInput>
  }

  export type UserCreateNestedOneWithoutWarehouseSalesInput = {
    create?: XOR<UserCreateWithoutWarehouseSalesInput, UserUncheckedCreateWithoutWarehouseSalesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWarehouseSalesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumUnitTypeFieldUpdateOperationsInput = {
    set?: $Enums.UnitType
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type UserUpdateOneRequiredWithoutWarehouseSalesNestedInput = {
    create?: XOR<UserCreateWithoutWarehouseSalesInput, UserUncheckedCreateWithoutWarehouseSalesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWarehouseSalesInput
    upsert?: UserUpsertWithoutWarehouseSalesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWarehouseSalesInput, UserUpdateWithoutWarehouseSalesInput>, UserUncheckedUpdateWithoutWarehouseSalesInput>
  }

  export type UserCreateNestedOneWithoutCashFlowEntriesInput = {
    create?: XOR<UserCreateWithoutCashFlowEntriesInput, UserUncheckedCreateWithoutCashFlowEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCashFlowEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type UserUpdateOneRequiredWithoutCashFlowEntriesNestedInput = {
    create?: XOR<UserCreateWithoutCashFlowEntriesInput, UserUncheckedCreateWithoutCashFlowEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCashFlowEntriesInput
    upsert?: UserUpsertWithoutCashFlowEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCashFlowEntriesInput, UserUpdateWithoutCashFlowEntriesInput>, UserUncheckedUpdateWithoutCashFlowEntriesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumDeliveryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryStatus | EnumDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryStatusFilter<$PrismaModel> | $Enums.DeliveryStatus
  }

  export type NestedEnumDeliveryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryStatus | EnumDeliveryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryStatus[] | ListEnumDeliveryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryStatusWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeliveryStatusFilter<$PrismaModel>
    _max?: NestedEnumDeliveryStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUnitTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UnitType | EnumUnitTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UnitType[] | ListEnumUnitTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UnitType[] | ListEnumUnitTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUnitTypeFilter<$PrismaModel> | $Enums.UnitType
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumUnitTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UnitType | EnumUnitTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UnitType[] | ListEnumUnitTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UnitType[] | ListEnumUnitTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUnitTypeWithAggregatesFilter<$PrismaModel> | $Enums.UnitType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUnitTypeFilter<$PrismaModel>
    _max?: NestedEnumUnitTypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DistributionOrderCreateWithoutCreatedByUserInput = {
    id?: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutDistributionOrdersInput
    location: LocationCreateNestedOneWithoutDistributionOrdersInput
    orderItems?: DistributionOrderItemCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderUncheckedCreateWithoutCreatedByUserInput = {
    id?: string
    customerId: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentUncheckedCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderUncheckedCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderCreateOrConnectWithoutCreatedByUserInput = {
    where: DistributionOrderWhereUniqueInput
    create: XOR<DistributionOrderCreateWithoutCreatedByUserInput, DistributionOrderUncheckedCreateWithoutCreatedByUserInput>
  }

  export type DistributionOrderCreateManyCreatedByUserInputEnvelope = {
    data: DistributionOrderCreateManyCreatedByUserInput | DistributionOrderCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type TransportOrderCreateWithoutCreatedByUserInput = {
    id?: string
    orderNumber: string
    invoiceNumber?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
    distributionOrder?: DistributionOrderCreateNestedOneWithoutTransportOrderInput
    location: LocationCreateNestedOneWithoutTransportOrdersInput
    truck?: TruckCapacityCreateNestedOneWithoutTransportOrdersInput
  }

  export type TransportOrderUncheckedCreateWithoutCreatedByUserInput = {
    id?: string
    distributionOrderId?: string | null
    orderNumber: string
    invoiceNumber?: string | null
    locationId: string
    truckId?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type TransportOrderCreateOrConnectWithoutCreatedByUserInput = {
    where: TransportOrderWhereUniqueInput
    create: XOR<TransportOrderCreateWithoutCreatedByUserInput, TransportOrderUncheckedCreateWithoutCreatedByUserInput>
  }

  export type TransportOrderCreateManyCreatedByUserInputEnvelope = {
    data: TransportOrderCreateManyCreatedByUserInput | TransportOrderCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type WarehouseSaleCreateWithoutSalesOfficerUserInput = {
    id?: string
    productId: string
    quantity: number
    unitType: $Enums.UnitType
    unitPrice: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    customerName?: string | null
    customerPhone?: string | null
    receiptNumber: string
    createdAt?: Date | string
  }

  export type WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput = {
    id?: string
    productId: string
    quantity: number
    unitType: $Enums.UnitType
    unitPrice: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    customerName?: string | null
    customerPhone?: string | null
    receiptNumber: string
    createdAt?: Date | string
  }

  export type WarehouseSaleCreateOrConnectWithoutSalesOfficerUserInput = {
    where: WarehouseSaleWhereUniqueInput
    create: XOR<WarehouseSaleCreateWithoutSalesOfficerUserInput, WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput>
  }

  export type WarehouseSaleCreateManySalesOfficerUserInputEnvelope = {
    data: WarehouseSaleCreateManySalesOfficerUserInput | WarehouseSaleCreateManySalesOfficerUserInput[]
    skipDuplicates?: boolean
  }

  export type CashFlowCreateWithoutCashierUserInput = {
    id?: string
    transactionType: $Enums.TransactionType
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    description?: string | null
    referenceNumber?: string | null
    reconciliationDate?: Date | string | null
    isReconciled?: boolean
    createdAt?: Date | string
  }

  export type CashFlowUncheckedCreateWithoutCashierUserInput = {
    id?: string
    transactionType: $Enums.TransactionType
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    description?: string | null
    referenceNumber?: string | null
    reconciliationDate?: Date | string | null
    isReconciled?: boolean
    createdAt?: Date | string
  }

  export type CashFlowCreateOrConnectWithoutCashierUserInput = {
    where: CashFlowWhereUniqueInput
    create: XOR<CashFlowCreateWithoutCashierUserInput, CashFlowUncheckedCreateWithoutCashierUserInput>
  }

  export type CashFlowCreateManyCashierUserInputEnvelope = {
    data: CashFlowCreateManyCashierUserInput | CashFlowCreateManyCashierUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type DistributionOrderUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: DistributionOrderWhereUniqueInput
    update: XOR<DistributionOrderUpdateWithoutCreatedByUserInput, DistributionOrderUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<DistributionOrderCreateWithoutCreatedByUserInput, DistributionOrderUncheckedCreateWithoutCreatedByUserInput>
  }

  export type DistributionOrderUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: DistributionOrderWhereUniqueInput
    data: XOR<DistributionOrderUpdateWithoutCreatedByUserInput, DistributionOrderUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type DistributionOrderUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: DistributionOrderScalarWhereInput
    data: XOR<DistributionOrderUpdateManyMutationInput, DistributionOrderUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type DistributionOrderScalarWhereInput = {
    AND?: DistributionOrderScalarWhereInput | DistributionOrderScalarWhereInput[]
    OR?: DistributionOrderScalarWhereInput[]
    NOT?: DistributionOrderScalarWhereInput | DistributionOrderScalarWhereInput[]
    id?: StringFilter<"DistributionOrder"> | string
    customerId?: StringFilter<"DistributionOrder"> | string
    locationId?: StringFilter<"DistributionOrder"> | string
    totalPallets?: IntFilter<"DistributionOrder"> | number
    totalPacks?: IntFilter<"DistributionOrder"> | number
    originalAmount?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    balance?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFilter<"DistributionOrder"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"DistributionOrder"> | $Enums.OrderStatus
    transporterCompany?: StringNullableFilter<"DistributionOrder"> | string | null
    driverNumber?: StringNullableFilter<"DistributionOrder"> | string | null
    remark?: StringNullableFilter<"DistributionOrder"> | string | null
    createdBy?: StringFilter<"DistributionOrder"> | string
    createdAt?: DateTimeFilter<"DistributionOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DistributionOrder"> | Date | string
  }

  export type TransportOrderUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: TransportOrderWhereUniqueInput
    update: XOR<TransportOrderUpdateWithoutCreatedByUserInput, TransportOrderUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<TransportOrderCreateWithoutCreatedByUserInput, TransportOrderUncheckedCreateWithoutCreatedByUserInput>
  }

  export type TransportOrderUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: TransportOrderWhereUniqueInput
    data: XOR<TransportOrderUpdateWithoutCreatedByUserInput, TransportOrderUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type TransportOrderUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: TransportOrderScalarWhereInput
    data: XOR<TransportOrderUpdateManyMutationInput, TransportOrderUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type TransportOrderScalarWhereInput = {
    AND?: TransportOrderScalarWhereInput | TransportOrderScalarWhereInput[]
    OR?: TransportOrderScalarWhereInput[]
    NOT?: TransportOrderScalarWhereInput | TransportOrderScalarWhereInput[]
    id?: StringFilter<"TransportOrder"> | string
    distributionOrderId?: StringNullableFilter<"TransportOrder"> | string | null
    orderNumber?: StringFilter<"TransportOrder"> | string
    invoiceNumber?: StringNullableFilter<"TransportOrder"> | string | null
    locationId?: StringFilter<"TransportOrder"> | string
    truckId?: StringNullableFilter<"TransportOrder"> | string | null
    totalOrderAmount?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFilter<"TransportOrder"> | Decimal | DecimalJsLike | number | string
    driverDetails?: StringNullableFilter<"TransportOrder"> | string | null
    deliveryStatus?: EnumDeliveryStatusFilter<"TransportOrder"> | $Enums.DeliveryStatus
    createdBy?: StringFilter<"TransportOrder"> | string
    createdAt?: DateTimeFilter<"TransportOrder"> | Date | string
    updatedAt?: DateTimeFilter<"TransportOrder"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"TransportOrder"> | Date | string | null
  }

  export type WarehouseSaleUpsertWithWhereUniqueWithoutSalesOfficerUserInput = {
    where: WarehouseSaleWhereUniqueInput
    update: XOR<WarehouseSaleUpdateWithoutSalesOfficerUserInput, WarehouseSaleUncheckedUpdateWithoutSalesOfficerUserInput>
    create: XOR<WarehouseSaleCreateWithoutSalesOfficerUserInput, WarehouseSaleUncheckedCreateWithoutSalesOfficerUserInput>
  }

  export type WarehouseSaleUpdateWithWhereUniqueWithoutSalesOfficerUserInput = {
    where: WarehouseSaleWhereUniqueInput
    data: XOR<WarehouseSaleUpdateWithoutSalesOfficerUserInput, WarehouseSaleUncheckedUpdateWithoutSalesOfficerUserInput>
  }

  export type WarehouseSaleUpdateManyWithWhereWithoutSalesOfficerUserInput = {
    where: WarehouseSaleScalarWhereInput
    data: XOR<WarehouseSaleUpdateManyMutationInput, WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserInput>
  }

  export type WarehouseSaleScalarWhereInput = {
    AND?: WarehouseSaleScalarWhereInput | WarehouseSaleScalarWhereInput[]
    OR?: WarehouseSaleScalarWhereInput[]
    NOT?: WarehouseSaleScalarWhereInput | WarehouseSaleScalarWhereInput[]
    id?: StringFilter<"WarehouseSale"> | string
    productId?: StringFilter<"WarehouseSale"> | string
    quantity?: IntFilter<"WarehouseSale"> | number
    unitType?: EnumUnitTypeFilter<"WarehouseSale"> | $Enums.UnitType
    unitPrice?: DecimalFilter<"WarehouseSale"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFilter<"WarehouseSale"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"WarehouseSale"> | $Enums.PaymentMethod
    customerName?: StringNullableFilter<"WarehouseSale"> | string | null
    customerPhone?: StringNullableFilter<"WarehouseSale"> | string | null
    receiptNumber?: StringFilter<"WarehouseSale"> | string
    salesOfficer?: StringFilter<"WarehouseSale"> | string
    createdAt?: DateTimeFilter<"WarehouseSale"> | Date | string
  }

  export type CashFlowUpsertWithWhereUniqueWithoutCashierUserInput = {
    where: CashFlowWhereUniqueInput
    update: XOR<CashFlowUpdateWithoutCashierUserInput, CashFlowUncheckedUpdateWithoutCashierUserInput>
    create: XOR<CashFlowCreateWithoutCashierUserInput, CashFlowUncheckedCreateWithoutCashierUserInput>
  }

  export type CashFlowUpdateWithWhereUniqueWithoutCashierUserInput = {
    where: CashFlowWhereUniqueInput
    data: XOR<CashFlowUpdateWithoutCashierUserInput, CashFlowUncheckedUpdateWithoutCashierUserInput>
  }

  export type CashFlowUpdateManyWithWhereWithoutCashierUserInput = {
    where: CashFlowScalarWhereInput
    data: XOR<CashFlowUpdateManyMutationInput, CashFlowUncheckedUpdateManyWithoutCashierUserInput>
  }

  export type CashFlowScalarWhereInput = {
    AND?: CashFlowScalarWhereInput | CashFlowScalarWhereInput[]
    OR?: CashFlowScalarWhereInput[]
    NOT?: CashFlowScalarWhereInput | CashFlowScalarWhereInput[]
    id?: StringFilter<"CashFlow"> | string
    transactionType?: EnumTransactionTypeFilter<"CashFlow"> | $Enums.TransactionType
    amount?: DecimalFilter<"CashFlow"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"CashFlow"> | $Enums.PaymentMethod
    description?: StringNullableFilter<"CashFlow"> | string | null
    referenceNumber?: StringNullableFilter<"CashFlow"> | string | null
    reconciliationDate?: DateTimeNullableFilter<"CashFlow"> | Date | string | null
    isReconciled?: BoolFilter<"CashFlow"> | boolean
    cashier?: StringFilter<"CashFlow"> | string
    createdAt?: DateTimeFilter<"CashFlow"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowCreateNestedManyWithoutCashierUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleUncheckedCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowUncheckedCreateNestedManyWithoutCashierUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUpdateManyWithoutCashierUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUncheckedUpdateManyWithoutCashierUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowCreateNestedManyWithoutCashierUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleUncheckedCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowUncheckedCreateNestedManyWithoutCashierUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUpdateManyWithoutCashierUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUncheckedUpdateManyWithoutCashierUserNestedInput
  }

  export type DistributionOrderItemCreateWithoutProductInput = {
    id?: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
    order: DistributionOrderCreateNestedOneWithoutOrderItemsInput
  }

  export type DistributionOrderItemUncheckedCreateWithoutProductInput = {
    id?: string
    orderId: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemCreateOrConnectWithoutProductInput = {
    where: DistributionOrderItemWhereUniqueInput
    create: XOR<DistributionOrderItemCreateWithoutProductInput, DistributionOrderItemUncheckedCreateWithoutProductInput>
  }

  export type DistributionOrderItemCreateManyProductInputEnvelope = {
    data: DistributionOrderItemCreateManyProductInput | DistributionOrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type PalletPricingCreateWithoutProductInput = {
    id?: string
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    location?: LocationCreateNestedOneWithoutPalletPricingInput
  }

  export type PalletPricingUncheckedCreateWithoutProductInput = {
    id?: string
    locationId?: string | null
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PalletPricingCreateOrConnectWithoutProductInput = {
    where: PalletPricingWhereUniqueInput
    create: XOR<PalletPricingCreateWithoutProductInput, PalletPricingUncheckedCreateWithoutProductInput>
  }

  export type PalletPricingCreateManyProductInputEnvelope = {
    data: PalletPricingCreateManyProductInput | PalletPricingCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type WarehouseInventoryCreateWithoutProductInput = {
    id?: string
    pallets?: number
    packs?: number
    units?: number
    reorderLevel?: number
    maxStockLevel?: number | null
    location?: string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type WarehouseInventoryUncheckedCreateWithoutProductInput = {
    id?: string
    pallets?: number
    packs?: number
    units?: number
    reorderLevel?: number
    maxStockLevel?: number | null
    location?: string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type WarehouseInventoryCreateOrConnectWithoutProductInput = {
    where: WarehouseInventoryWhereUniqueInput
    create: XOR<WarehouseInventoryCreateWithoutProductInput, WarehouseInventoryUncheckedCreateWithoutProductInput>
  }

  export type WarehouseInventoryCreateManyProductInputEnvelope = {
    data: WarehouseInventoryCreateManyProductInput | WarehouseInventoryCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type DistributionOrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: DistributionOrderItemWhereUniqueInput
    update: XOR<DistributionOrderItemUpdateWithoutProductInput, DistributionOrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<DistributionOrderItemCreateWithoutProductInput, DistributionOrderItemUncheckedCreateWithoutProductInput>
  }

  export type DistributionOrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: DistributionOrderItemWhereUniqueInput
    data: XOR<DistributionOrderItemUpdateWithoutProductInput, DistributionOrderItemUncheckedUpdateWithoutProductInput>
  }

  export type DistributionOrderItemUpdateManyWithWhereWithoutProductInput = {
    where: DistributionOrderItemScalarWhereInput
    data: XOR<DistributionOrderItemUpdateManyMutationInput, DistributionOrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type DistributionOrderItemScalarWhereInput = {
    AND?: DistributionOrderItemScalarWhereInput | DistributionOrderItemScalarWhereInput[]
    OR?: DistributionOrderItemScalarWhereInput[]
    NOT?: DistributionOrderItemScalarWhereInput | DistributionOrderItemScalarWhereInput[]
    id?: StringFilter<"DistributionOrderItem"> | string
    orderId?: StringFilter<"DistributionOrderItem"> | string
    productId?: StringFilter<"DistributionOrderItem"> | string
    pallets?: IntFilter<"DistributionOrderItem"> | number
    packs?: IntFilter<"DistributionOrderItem"> | number
    amount?: DecimalFilter<"DistributionOrderItem"> | Decimal | DecimalJsLike | number | string
  }

  export type PalletPricingUpsertWithWhereUniqueWithoutProductInput = {
    where: PalletPricingWhereUniqueInput
    update: XOR<PalletPricingUpdateWithoutProductInput, PalletPricingUncheckedUpdateWithoutProductInput>
    create: XOR<PalletPricingCreateWithoutProductInput, PalletPricingUncheckedCreateWithoutProductInput>
  }

  export type PalletPricingUpdateWithWhereUniqueWithoutProductInput = {
    where: PalletPricingWhereUniqueInput
    data: XOR<PalletPricingUpdateWithoutProductInput, PalletPricingUncheckedUpdateWithoutProductInput>
  }

  export type PalletPricingUpdateManyWithWhereWithoutProductInput = {
    where: PalletPricingScalarWhereInput
    data: XOR<PalletPricingUpdateManyMutationInput, PalletPricingUncheckedUpdateManyWithoutProductInput>
  }

  export type PalletPricingScalarWhereInput = {
    AND?: PalletPricingScalarWhereInput | PalletPricingScalarWhereInput[]
    OR?: PalletPricingScalarWhereInput[]
    NOT?: PalletPricingScalarWhereInput | PalletPricingScalarWhereInput[]
    id?: StringFilter<"PalletPricing"> | string
    productId?: StringFilter<"PalletPricing"> | string
    locationId?: StringNullableFilter<"PalletPricing"> | string | null
    pricePerPack?: DecimalFilter<"PalletPricing"> | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFilter<"PalletPricing"> | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFilter<"PalletPricing"> | Date | string
    isActive?: BoolFilter<"PalletPricing"> | boolean
    createdAt?: DateTimeFilter<"PalletPricing"> | Date | string
    updatedAt?: DateTimeFilter<"PalletPricing"> | Date | string
  }

  export type WarehouseInventoryUpsertWithWhereUniqueWithoutProductInput = {
    where: WarehouseInventoryWhereUniqueInput
    update: XOR<WarehouseInventoryUpdateWithoutProductInput, WarehouseInventoryUncheckedUpdateWithoutProductInput>
    create: XOR<WarehouseInventoryCreateWithoutProductInput, WarehouseInventoryUncheckedCreateWithoutProductInput>
  }

  export type WarehouseInventoryUpdateWithWhereUniqueWithoutProductInput = {
    where: WarehouseInventoryWhereUniqueInput
    data: XOR<WarehouseInventoryUpdateWithoutProductInput, WarehouseInventoryUncheckedUpdateWithoutProductInput>
  }

  export type WarehouseInventoryUpdateManyWithWhereWithoutProductInput = {
    where: WarehouseInventoryScalarWhereInput
    data: XOR<WarehouseInventoryUpdateManyMutationInput, WarehouseInventoryUncheckedUpdateManyWithoutProductInput>
  }

  export type WarehouseInventoryScalarWhereInput = {
    AND?: WarehouseInventoryScalarWhereInput | WarehouseInventoryScalarWhereInput[]
    OR?: WarehouseInventoryScalarWhereInput[]
    NOT?: WarehouseInventoryScalarWhereInput | WarehouseInventoryScalarWhereInput[]
    id?: StringFilter<"WarehouseInventory"> | string
    productId?: StringFilter<"WarehouseInventory"> | string
    pallets?: IntFilter<"WarehouseInventory"> | number
    packs?: IntFilter<"WarehouseInventory"> | number
    units?: IntFilter<"WarehouseInventory"> | number
    reorderLevel?: IntFilter<"WarehouseInventory"> | number
    maxStockLevel?: IntNullableFilter<"WarehouseInventory"> | number | null
    location?: StringNullableFilter<"WarehouseInventory"> | string | null
    lastUpdated?: DateTimeFilter<"WarehouseInventory"> | Date | string
    createdAt?: DateTimeFilter<"WarehouseInventory"> | Date | string
  }

  export type DistributionOrderCreateWithoutCustomerInput = {
    id?: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutDistributionOrdersInput
    createdByUser: UserCreateNestedOneWithoutDistributionOrdersInput
    orderItems?: DistributionOrderItemCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderUncheckedCreateWithoutCustomerInput = {
    id?: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentUncheckedCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderUncheckedCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderCreateOrConnectWithoutCustomerInput = {
    where: DistributionOrderWhereUniqueInput
    create: XOR<DistributionOrderCreateWithoutCustomerInput, DistributionOrderUncheckedCreateWithoutCustomerInput>
  }

  export type DistributionOrderCreateManyCustomerInputEnvelope = {
    data: DistributionOrderCreateManyCustomerInput | DistributionOrderCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type DistributionOrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: DistributionOrderWhereUniqueInput
    update: XOR<DistributionOrderUpdateWithoutCustomerInput, DistributionOrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<DistributionOrderCreateWithoutCustomerInput, DistributionOrderUncheckedCreateWithoutCustomerInput>
  }

  export type DistributionOrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: DistributionOrderWhereUniqueInput
    data: XOR<DistributionOrderUpdateWithoutCustomerInput, DistributionOrderUncheckedUpdateWithoutCustomerInput>
  }

  export type DistributionOrderUpdateManyWithWhereWithoutCustomerInput = {
    where: DistributionOrderScalarWhereInput
    data: XOR<DistributionOrderUpdateManyMutationInput, DistributionOrderUncheckedUpdateManyWithoutCustomerInput>
  }

  export type DistributionOrderCreateWithoutLocationInput = {
    id?: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutDistributionOrdersInput
    createdByUser: UserCreateNestedOneWithoutDistributionOrdersInput
    orderItems?: DistributionOrderItemCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderUncheckedCreateWithoutLocationInput = {
    id?: string
    customerId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentUncheckedCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderUncheckedCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderCreateOrConnectWithoutLocationInput = {
    where: DistributionOrderWhereUniqueInput
    create: XOR<DistributionOrderCreateWithoutLocationInput, DistributionOrderUncheckedCreateWithoutLocationInput>
  }

  export type DistributionOrderCreateManyLocationInputEnvelope = {
    data: DistributionOrderCreateManyLocationInput | DistributionOrderCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type PalletPricingCreateWithoutLocationInput = {
    id?: string
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutPalletPricingInput
  }

  export type PalletPricingUncheckedCreateWithoutLocationInput = {
    id?: string
    productId: string
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PalletPricingCreateOrConnectWithoutLocationInput = {
    where: PalletPricingWhereUniqueInput
    create: XOR<PalletPricingCreateWithoutLocationInput, PalletPricingUncheckedCreateWithoutLocationInput>
  }

  export type PalletPricingCreateManyLocationInputEnvelope = {
    data: PalletPricingCreateManyLocationInput | PalletPricingCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type TransportOrderCreateWithoutLocationInput = {
    id?: string
    orderNumber: string
    invoiceNumber?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
    distributionOrder?: DistributionOrderCreateNestedOneWithoutTransportOrderInput
    truck?: TruckCapacityCreateNestedOneWithoutTransportOrdersInput
    createdByUser: UserCreateNestedOneWithoutTransportOrdersInput
  }

  export type TransportOrderUncheckedCreateWithoutLocationInput = {
    id?: string
    distributionOrderId?: string | null
    orderNumber: string
    invoiceNumber?: string | null
    truckId?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type TransportOrderCreateOrConnectWithoutLocationInput = {
    where: TransportOrderWhereUniqueInput
    create: XOR<TransportOrderCreateWithoutLocationInput, TransportOrderUncheckedCreateWithoutLocationInput>
  }

  export type TransportOrderCreateManyLocationInputEnvelope = {
    data: TransportOrderCreateManyLocationInput | TransportOrderCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type DistributionOrderUpsertWithWhereUniqueWithoutLocationInput = {
    where: DistributionOrderWhereUniqueInput
    update: XOR<DistributionOrderUpdateWithoutLocationInput, DistributionOrderUncheckedUpdateWithoutLocationInput>
    create: XOR<DistributionOrderCreateWithoutLocationInput, DistributionOrderUncheckedCreateWithoutLocationInput>
  }

  export type DistributionOrderUpdateWithWhereUniqueWithoutLocationInput = {
    where: DistributionOrderWhereUniqueInput
    data: XOR<DistributionOrderUpdateWithoutLocationInput, DistributionOrderUncheckedUpdateWithoutLocationInput>
  }

  export type DistributionOrderUpdateManyWithWhereWithoutLocationInput = {
    where: DistributionOrderScalarWhereInput
    data: XOR<DistributionOrderUpdateManyMutationInput, DistributionOrderUncheckedUpdateManyWithoutLocationInput>
  }

  export type PalletPricingUpsertWithWhereUniqueWithoutLocationInput = {
    where: PalletPricingWhereUniqueInput
    update: XOR<PalletPricingUpdateWithoutLocationInput, PalletPricingUncheckedUpdateWithoutLocationInput>
    create: XOR<PalletPricingCreateWithoutLocationInput, PalletPricingUncheckedCreateWithoutLocationInput>
  }

  export type PalletPricingUpdateWithWhereUniqueWithoutLocationInput = {
    where: PalletPricingWhereUniqueInput
    data: XOR<PalletPricingUpdateWithoutLocationInput, PalletPricingUncheckedUpdateWithoutLocationInput>
  }

  export type PalletPricingUpdateManyWithWhereWithoutLocationInput = {
    where: PalletPricingScalarWhereInput
    data: XOR<PalletPricingUpdateManyMutationInput, PalletPricingUncheckedUpdateManyWithoutLocationInput>
  }

  export type TransportOrderUpsertWithWhereUniqueWithoutLocationInput = {
    where: TransportOrderWhereUniqueInput
    update: XOR<TransportOrderUpdateWithoutLocationInput, TransportOrderUncheckedUpdateWithoutLocationInput>
    create: XOR<TransportOrderCreateWithoutLocationInput, TransportOrderUncheckedCreateWithoutLocationInput>
  }

  export type TransportOrderUpdateWithWhereUniqueWithoutLocationInput = {
    where: TransportOrderWhereUniqueInput
    data: XOR<TransportOrderUpdateWithoutLocationInput, TransportOrderUncheckedUpdateWithoutLocationInput>
  }

  export type TransportOrderUpdateManyWithWhereWithoutLocationInput = {
    where: TransportOrderScalarWhereInput
    data: XOR<TransportOrderUpdateManyMutationInput, TransportOrderUncheckedUpdateManyWithoutLocationInput>
  }

  export type CustomerCreateWithoutDistributionOrdersInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUncheckedCreateWithoutDistributionOrdersInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerCreateOrConnectWithoutDistributionOrdersInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutDistributionOrdersInput, CustomerUncheckedCreateWithoutDistributionOrdersInput>
  }

  export type LocationCreateWithoutDistributionOrdersInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    palletPricing?: PalletPricingCreateNestedManyWithoutLocationInput
    transportOrders?: TransportOrderCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutDistributionOrdersInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    palletPricing?: PalletPricingUncheckedCreateNestedManyWithoutLocationInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutDistributionOrdersInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutDistributionOrdersInput, LocationUncheckedCreateWithoutDistributionOrdersInput>
  }

  export type UserCreateWithoutDistributionOrdersInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    transportOrders?: TransportOrderCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowCreateNestedManyWithoutCashierUserInput
  }

  export type UserUncheckedCreateWithoutDistributionOrdersInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleUncheckedCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowUncheckedCreateNestedManyWithoutCashierUserInput
  }

  export type UserCreateOrConnectWithoutDistributionOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDistributionOrdersInput, UserUncheckedCreateWithoutDistributionOrdersInput>
  }

  export type DistributionOrderItemCreateWithoutOrderInput = {
    id?: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
    product: ProductCreateNestedOneWithoutDistributionOrderItemsInput
  }

  export type DistributionOrderItemUncheckedCreateWithoutOrderInput = {
    id?: string
    productId: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemCreateOrConnectWithoutOrderInput = {
    where: DistributionOrderItemWhereUniqueInput
    create: XOR<DistributionOrderItemCreateWithoutOrderInput, DistributionOrderItemUncheckedCreateWithoutOrderInput>
  }

  export type DistributionOrderItemCreateManyOrderInputEnvelope = {
    data: DistributionOrderItemCreateManyOrderInput | DistributionOrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type PriceAdjustmentCreateWithoutOrderInput = {
    id?: string
    originalAmount: Decimal | DecimalJsLike | number | string
    adjustedAmount: Decimal | DecimalJsLike | number | string
    adjustmentType: string
    reason?: string | null
    locationFuelCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type PriceAdjustmentUncheckedCreateWithoutOrderInput = {
    id?: string
    originalAmount: Decimal | DecimalJsLike | number | string
    adjustedAmount: Decimal | DecimalJsLike | number | string
    adjustmentType: string
    reason?: string | null
    locationFuelCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type PriceAdjustmentCreateOrConnectWithoutOrderInput = {
    where: PriceAdjustmentWhereUniqueInput
    create: XOR<PriceAdjustmentCreateWithoutOrderInput, PriceAdjustmentUncheckedCreateWithoutOrderInput>
  }

  export type PriceAdjustmentCreateManyOrderInputEnvelope = {
    data: PriceAdjustmentCreateManyOrderInput | PriceAdjustmentCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type TransportOrderCreateWithoutDistributionOrderInput = {
    id?: string
    orderNumber: string
    invoiceNumber?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
    location: LocationCreateNestedOneWithoutTransportOrdersInput
    truck?: TruckCapacityCreateNestedOneWithoutTransportOrdersInput
    createdByUser: UserCreateNestedOneWithoutTransportOrdersInput
  }

  export type TransportOrderUncheckedCreateWithoutDistributionOrderInput = {
    id?: string
    orderNumber: string
    invoiceNumber?: string | null
    locationId: string
    truckId?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type TransportOrderCreateOrConnectWithoutDistributionOrderInput = {
    where: TransportOrderWhereUniqueInput
    create: XOR<TransportOrderCreateWithoutDistributionOrderInput, TransportOrderUncheckedCreateWithoutDistributionOrderInput>
  }

  export type CustomerUpsertWithoutDistributionOrdersInput = {
    update: XOR<CustomerUpdateWithoutDistributionOrdersInput, CustomerUncheckedUpdateWithoutDistributionOrdersInput>
    create: XOR<CustomerCreateWithoutDistributionOrdersInput, CustomerUncheckedCreateWithoutDistributionOrdersInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutDistributionOrdersInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutDistributionOrdersInput, CustomerUncheckedUpdateWithoutDistributionOrdersInput>
  }

  export type CustomerUpdateWithoutDistributionOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateWithoutDistributionOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUpsertWithoutDistributionOrdersInput = {
    update: XOR<LocationUpdateWithoutDistributionOrdersInput, LocationUncheckedUpdateWithoutDistributionOrdersInput>
    create: XOR<LocationCreateWithoutDistributionOrdersInput, LocationUncheckedCreateWithoutDistributionOrdersInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutDistributionOrdersInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutDistributionOrdersInput, LocationUncheckedUpdateWithoutDistributionOrdersInput>
  }

  export type LocationUpdateWithoutDistributionOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    palletPricing?: PalletPricingUpdateManyWithoutLocationNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutDistributionOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    palletPricing?: PalletPricingUncheckedUpdateManyWithoutLocationNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type UserUpsertWithoutDistributionOrdersInput = {
    update: XOR<UserUpdateWithoutDistributionOrdersInput, UserUncheckedUpdateWithoutDistributionOrdersInput>
    create: XOR<UserCreateWithoutDistributionOrdersInput, UserUncheckedCreateWithoutDistributionOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDistributionOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDistributionOrdersInput, UserUncheckedUpdateWithoutDistributionOrdersInput>
  }

  export type UserUpdateWithoutDistributionOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUpdateManyWithoutCashierUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDistributionOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUncheckedUpdateManyWithoutCashierUserNestedInput
  }

  export type DistributionOrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: DistributionOrderItemWhereUniqueInput
    update: XOR<DistributionOrderItemUpdateWithoutOrderInput, DistributionOrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<DistributionOrderItemCreateWithoutOrderInput, DistributionOrderItemUncheckedCreateWithoutOrderInput>
  }

  export type DistributionOrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: DistributionOrderItemWhereUniqueInput
    data: XOR<DistributionOrderItemUpdateWithoutOrderInput, DistributionOrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type DistributionOrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: DistributionOrderItemScalarWhereInput
    data: XOR<DistributionOrderItemUpdateManyMutationInput, DistributionOrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type PriceAdjustmentUpsertWithWhereUniqueWithoutOrderInput = {
    where: PriceAdjustmentWhereUniqueInput
    update: XOR<PriceAdjustmentUpdateWithoutOrderInput, PriceAdjustmentUncheckedUpdateWithoutOrderInput>
    create: XOR<PriceAdjustmentCreateWithoutOrderInput, PriceAdjustmentUncheckedCreateWithoutOrderInput>
  }

  export type PriceAdjustmentUpdateWithWhereUniqueWithoutOrderInput = {
    where: PriceAdjustmentWhereUniqueInput
    data: XOR<PriceAdjustmentUpdateWithoutOrderInput, PriceAdjustmentUncheckedUpdateWithoutOrderInput>
  }

  export type PriceAdjustmentUpdateManyWithWhereWithoutOrderInput = {
    where: PriceAdjustmentScalarWhereInput
    data: XOR<PriceAdjustmentUpdateManyMutationInput, PriceAdjustmentUncheckedUpdateManyWithoutOrderInput>
  }

  export type PriceAdjustmentScalarWhereInput = {
    AND?: PriceAdjustmentScalarWhereInput | PriceAdjustmentScalarWhereInput[]
    OR?: PriceAdjustmentScalarWhereInput[]
    NOT?: PriceAdjustmentScalarWhereInput | PriceAdjustmentScalarWhereInput[]
    id?: StringFilter<"PriceAdjustment"> | string
    orderId?: StringFilter<"PriceAdjustment"> | string
    originalAmount?: DecimalFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFilter<"PriceAdjustment"> | string
    reason?: StringNullableFilter<"PriceAdjustment"> | string | null
    locationFuelCost?: DecimalNullableFilter<"PriceAdjustment"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"PriceAdjustment"> | Date | string
  }

  export type TransportOrderUpsertWithoutDistributionOrderInput = {
    update: XOR<TransportOrderUpdateWithoutDistributionOrderInput, TransportOrderUncheckedUpdateWithoutDistributionOrderInput>
    create: XOR<TransportOrderCreateWithoutDistributionOrderInput, TransportOrderUncheckedCreateWithoutDistributionOrderInput>
    where?: TransportOrderWhereInput
  }

  export type TransportOrderUpdateToOneWithWhereWithoutDistributionOrderInput = {
    where?: TransportOrderWhereInput
    data: XOR<TransportOrderUpdateWithoutDistributionOrderInput, TransportOrderUncheckedUpdateWithoutDistributionOrderInput>
  }

  export type TransportOrderUpdateWithoutDistributionOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: LocationUpdateOneRequiredWithoutTransportOrdersNestedInput
    truck?: TruckCapacityUpdateOneWithoutTransportOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutTransportOrdersNestedInput
  }

  export type TransportOrderUncheckedUpdateWithoutDistributionOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DistributionOrderCreateWithoutOrderItemsInput = {
    id?: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutDistributionOrdersInput
    location: LocationCreateNestedOneWithoutDistributionOrdersInput
    createdByUser: UserCreateNestedOneWithoutDistributionOrdersInput
    priceAdjustments?: PriceAdjustmentCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    customerId: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    priceAdjustments?: PriceAdjustmentUncheckedCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderUncheckedCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderCreateOrConnectWithoutOrderItemsInput = {
    where: DistributionOrderWhereUniqueInput
    create: XOR<DistributionOrderCreateWithoutOrderItemsInput, DistributionOrderUncheckedCreateWithoutOrderItemsInput>
  }

  export type ProductCreateWithoutDistributionOrderItemsInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    palletPricing?: PalletPricingCreateNestedManyWithoutProductInput
    warehouseInventory?: WarehouseInventoryCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutDistributionOrderItemsInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    palletPricing?: PalletPricingUncheckedCreateNestedManyWithoutProductInput
    warehouseInventory?: WarehouseInventoryUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutDistributionOrderItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutDistributionOrderItemsInput, ProductUncheckedCreateWithoutDistributionOrderItemsInput>
  }

  export type DistributionOrderUpsertWithoutOrderItemsInput = {
    update: XOR<DistributionOrderUpdateWithoutOrderItemsInput, DistributionOrderUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<DistributionOrderCreateWithoutOrderItemsInput, DistributionOrderUncheckedCreateWithoutOrderItemsInput>
    where?: DistributionOrderWhereInput
  }

  export type DistributionOrderUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: DistributionOrderWhereInput
    data: XOR<DistributionOrderUpdateWithoutOrderItemsInput, DistributionOrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type DistributionOrderUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutDistributionOrdersNestedInput
    location?: LocationUpdateOneRequiredWithoutDistributionOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutDistributionOrdersNestedInput
    priceAdjustments?: PriceAdjustmentUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceAdjustments?: PriceAdjustmentUncheckedUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUncheckedUpdateOneWithoutDistributionOrderNestedInput
  }

  export type ProductUpsertWithoutDistributionOrderItemsInput = {
    update: XOR<ProductUpdateWithoutDistributionOrderItemsInput, ProductUncheckedUpdateWithoutDistributionOrderItemsInput>
    create: XOR<ProductCreateWithoutDistributionOrderItemsInput, ProductUncheckedCreateWithoutDistributionOrderItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutDistributionOrderItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutDistributionOrderItemsInput, ProductUncheckedUpdateWithoutDistributionOrderItemsInput>
  }

  export type ProductUpdateWithoutDistributionOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    palletPricing?: PalletPricingUpdateManyWithoutProductNestedInput
    warehouseInventory?: WarehouseInventoryUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutDistributionOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    palletPricing?: PalletPricingUncheckedUpdateManyWithoutProductNestedInput
    warehouseInventory?: WarehouseInventoryUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutPalletPricingInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrderItems?: DistributionOrderItemCreateNestedManyWithoutProductInput
    warehouseInventory?: WarehouseInventoryCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutPalletPricingInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutProductInput
    warehouseInventory?: WarehouseInventoryUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutPalletPricingInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutPalletPricingInput, ProductUncheckedCreateWithoutPalletPricingInput>
  }

  export type LocationCreateWithoutPalletPricingInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrders?: DistributionOrderCreateNestedManyWithoutLocationInput
    transportOrders?: TransportOrderCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutPalletPricingInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutLocationInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutPalletPricingInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutPalletPricingInput, LocationUncheckedCreateWithoutPalletPricingInput>
  }

  export type ProductUpsertWithoutPalletPricingInput = {
    update: XOR<ProductUpdateWithoutPalletPricingInput, ProductUncheckedUpdateWithoutPalletPricingInput>
    create: XOR<ProductCreateWithoutPalletPricingInput, ProductUncheckedCreateWithoutPalletPricingInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutPalletPricingInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutPalletPricingInput, ProductUncheckedUpdateWithoutPalletPricingInput>
  }

  export type ProductUpdateWithoutPalletPricingInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrderItems?: DistributionOrderItemUpdateManyWithoutProductNestedInput
    warehouseInventory?: WarehouseInventoryUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutPalletPricingInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrderItems?: DistributionOrderItemUncheckedUpdateManyWithoutProductNestedInput
    warehouseInventory?: WarehouseInventoryUncheckedUpdateManyWithoutProductNestedInput
  }

  export type LocationUpsertWithoutPalletPricingInput = {
    update: XOR<LocationUpdateWithoutPalletPricingInput, LocationUncheckedUpdateWithoutPalletPricingInput>
    create: XOR<LocationCreateWithoutPalletPricingInput, LocationUncheckedCreateWithoutPalletPricingInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutPalletPricingInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutPalletPricingInput, LocationUncheckedUpdateWithoutPalletPricingInput>
  }

  export type LocationUpdateWithoutPalletPricingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrders?: DistributionOrderUpdateManyWithoutLocationNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutPalletPricingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutLocationNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type DistributionOrderCreateWithoutPriceAdjustmentsInput = {
    id?: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutDistributionOrdersInput
    location: LocationCreateNestedOneWithoutDistributionOrdersInput
    createdByUser: UserCreateNestedOneWithoutDistributionOrdersInput
    orderItems?: DistributionOrderItemCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderUncheckedCreateWithoutPriceAdjustmentsInput = {
    id?: string
    customerId: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutOrderInput
    transportOrder?: TransportOrderUncheckedCreateNestedOneWithoutDistributionOrderInput
  }

  export type DistributionOrderCreateOrConnectWithoutPriceAdjustmentsInput = {
    where: DistributionOrderWhereUniqueInput
    create: XOR<DistributionOrderCreateWithoutPriceAdjustmentsInput, DistributionOrderUncheckedCreateWithoutPriceAdjustmentsInput>
  }

  export type DistributionOrderUpsertWithoutPriceAdjustmentsInput = {
    update: XOR<DistributionOrderUpdateWithoutPriceAdjustmentsInput, DistributionOrderUncheckedUpdateWithoutPriceAdjustmentsInput>
    create: XOR<DistributionOrderCreateWithoutPriceAdjustmentsInput, DistributionOrderUncheckedCreateWithoutPriceAdjustmentsInput>
    where?: DistributionOrderWhereInput
  }

  export type DistributionOrderUpdateToOneWithWhereWithoutPriceAdjustmentsInput = {
    where?: DistributionOrderWhereInput
    data: XOR<DistributionOrderUpdateWithoutPriceAdjustmentsInput, DistributionOrderUncheckedUpdateWithoutPriceAdjustmentsInput>
  }

  export type DistributionOrderUpdateWithoutPriceAdjustmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutDistributionOrdersNestedInput
    location?: LocationUpdateOneRequiredWithoutDistributionOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutDistributionOrdersNestedInput
    orderItems?: DistributionOrderItemUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateWithoutPriceAdjustmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: DistributionOrderItemUncheckedUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUncheckedUpdateOneWithoutDistributionOrderNestedInput
  }

  export type TransportOrderCreateWithoutTruckInput = {
    id?: string
    orderNumber: string
    invoiceNumber?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
    distributionOrder?: DistributionOrderCreateNestedOneWithoutTransportOrderInput
    location: LocationCreateNestedOneWithoutTransportOrdersInput
    createdByUser: UserCreateNestedOneWithoutTransportOrdersInput
  }

  export type TransportOrderUncheckedCreateWithoutTruckInput = {
    id?: string
    distributionOrderId?: string | null
    orderNumber: string
    invoiceNumber?: string | null
    locationId: string
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type TransportOrderCreateOrConnectWithoutTruckInput = {
    where: TransportOrderWhereUniqueInput
    create: XOR<TransportOrderCreateWithoutTruckInput, TransportOrderUncheckedCreateWithoutTruckInput>
  }

  export type TransportOrderCreateManyTruckInputEnvelope = {
    data: TransportOrderCreateManyTruckInput | TransportOrderCreateManyTruckInput[]
    skipDuplicates?: boolean
  }

  export type TransportOrderUpsertWithWhereUniqueWithoutTruckInput = {
    where: TransportOrderWhereUniqueInput
    update: XOR<TransportOrderUpdateWithoutTruckInput, TransportOrderUncheckedUpdateWithoutTruckInput>
    create: XOR<TransportOrderCreateWithoutTruckInput, TransportOrderUncheckedCreateWithoutTruckInput>
  }

  export type TransportOrderUpdateWithWhereUniqueWithoutTruckInput = {
    where: TransportOrderWhereUniqueInput
    data: XOR<TransportOrderUpdateWithoutTruckInput, TransportOrderUncheckedUpdateWithoutTruckInput>
  }

  export type TransportOrderUpdateManyWithWhereWithoutTruckInput = {
    where: TransportOrderScalarWhereInput
    data: XOR<TransportOrderUpdateManyMutationInput, TransportOrderUncheckedUpdateManyWithoutTruckInput>
  }

  export type DistributionOrderCreateWithoutTransportOrderInput = {
    id?: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutDistributionOrdersInput
    location: LocationCreateNestedOneWithoutDistributionOrdersInput
    createdByUser: UserCreateNestedOneWithoutDistributionOrdersInput
    orderItems?: DistributionOrderItemCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentCreateNestedManyWithoutOrderInput
  }

  export type DistributionOrderUncheckedCreateWithoutTransportOrderInput = {
    id?: string
    customerId: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutOrderInput
    priceAdjustments?: PriceAdjustmentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type DistributionOrderCreateOrConnectWithoutTransportOrderInput = {
    where: DistributionOrderWhereUniqueInput
    create: XOR<DistributionOrderCreateWithoutTransportOrderInput, DistributionOrderUncheckedCreateWithoutTransportOrderInput>
  }

  export type LocationCreateWithoutTransportOrdersInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrders?: DistributionOrderCreateNestedManyWithoutLocationInput
    palletPricing?: PalletPricingCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutTransportOrdersInput = {
    id?: string
    name: string
    address?: string | null
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    deliveryNotes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutLocationInput
    palletPricing?: PalletPricingUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutTransportOrdersInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutTransportOrdersInput, LocationUncheckedCreateWithoutTransportOrdersInput>
  }

  export type TruckCapacityCreateWithoutTransportOrdersInput = {
    id?: string
    truckId: string
    maxPallets?: number
    currentLoad?: number
    availableSpace: number
    isActive?: boolean
    updatedAt?: Date | string
  }

  export type TruckCapacityUncheckedCreateWithoutTransportOrdersInput = {
    id?: string
    truckId: string
    maxPallets?: number
    currentLoad?: number
    availableSpace: number
    isActive?: boolean
    updatedAt?: Date | string
  }

  export type TruckCapacityCreateOrConnectWithoutTransportOrdersInput = {
    where: TruckCapacityWhereUniqueInput
    create: XOR<TruckCapacityCreateWithoutTransportOrdersInput, TruckCapacityUncheckedCreateWithoutTransportOrdersInput>
  }

  export type UserCreateWithoutTransportOrdersInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowCreateNestedManyWithoutCashierUserInput
  }

  export type UserUncheckedCreateWithoutTransportOrdersInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleUncheckedCreateNestedManyWithoutSalesOfficerUserInput
    cashFlowEntries?: CashFlowUncheckedCreateNestedManyWithoutCashierUserInput
  }

  export type UserCreateOrConnectWithoutTransportOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransportOrdersInput, UserUncheckedCreateWithoutTransportOrdersInput>
  }

  export type DistributionOrderUpsertWithoutTransportOrderInput = {
    update: XOR<DistributionOrderUpdateWithoutTransportOrderInput, DistributionOrderUncheckedUpdateWithoutTransportOrderInput>
    create: XOR<DistributionOrderCreateWithoutTransportOrderInput, DistributionOrderUncheckedCreateWithoutTransportOrderInput>
    where?: DistributionOrderWhereInput
  }

  export type DistributionOrderUpdateToOneWithWhereWithoutTransportOrderInput = {
    where?: DistributionOrderWhereInput
    data: XOR<DistributionOrderUpdateWithoutTransportOrderInput, DistributionOrderUncheckedUpdateWithoutTransportOrderInput>
  }

  export type DistributionOrderUpdateWithoutTransportOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutDistributionOrdersNestedInput
    location?: LocationUpdateOneRequiredWithoutDistributionOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutDistributionOrdersNestedInput
    orderItems?: DistributionOrderItemUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUpdateManyWithoutOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateWithoutTransportOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: DistributionOrderItemUncheckedUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type LocationUpsertWithoutTransportOrdersInput = {
    update: XOR<LocationUpdateWithoutTransportOrdersInput, LocationUncheckedUpdateWithoutTransportOrdersInput>
    create: XOR<LocationCreateWithoutTransportOrdersInput, LocationUncheckedCreateWithoutTransportOrdersInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutTransportOrdersInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutTransportOrdersInput, LocationUncheckedUpdateWithoutTransportOrdersInput>
  }

  export type LocationUpdateWithoutTransportOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrders?: DistributionOrderUpdateManyWithoutLocationNestedInput
    palletPricing?: PalletPricingUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutTransportOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutLocationNestedInput
    palletPricing?: PalletPricingUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type TruckCapacityUpsertWithoutTransportOrdersInput = {
    update: XOR<TruckCapacityUpdateWithoutTransportOrdersInput, TruckCapacityUncheckedUpdateWithoutTransportOrdersInput>
    create: XOR<TruckCapacityCreateWithoutTransportOrdersInput, TruckCapacityUncheckedCreateWithoutTransportOrdersInput>
    where?: TruckCapacityWhereInput
  }

  export type TruckCapacityUpdateToOneWithWhereWithoutTransportOrdersInput = {
    where?: TruckCapacityWhereInput
    data: XOR<TruckCapacityUpdateWithoutTransportOrdersInput, TruckCapacityUncheckedUpdateWithoutTransportOrdersInput>
  }

  export type TruckCapacityUpdateWithoutTransportOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    maxPallets?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    availableSpace?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TruckCapacityUncheckedUpdateWithoutTransportOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    truckId?: StringFieldUpdateOperationsInput | string
    maxPallets?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    availableSpace?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutTransportOrdersInput = {
    update: XOR<UserUpdateWithoutTransportOrdersInput, UserUncheckedUpdateWithoutTransportOrdersInput>
    create: XOR<UserCreateWithoutTransportOrdersInput, UserUncheckedCreateWithoutTransportOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransportOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransportOrdersInput, UserUncheckedUpdateWithoutTransportOrdersInput>
  }

  export type UserUpdateWithoutTransportOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUpdateManyWithoutCashierUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransportOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserNestedInput
    cashFlowEntries?: CashFlowUncheckedUpdateManyWithoutCashierUserNestedInput
  }

  export type ProductCreateWithoutWarehouseInventoryInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrderItems?: DistributionOrderItemCreateNestedManyWithoutProductInput
    palletPricing?: PalletPricingCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutWarehouseInventoryInput = {
    id?: string
    productNo: string
    name: string
    description?: string | null
    packsPerPallet: number
    pricePerPack: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    distributionOrderItems?: DistributionOrderItemUncheckedCreateNestedManyWithoutProductInput
    palletPricing?: PalletPricingUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutWarehouseInventoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutWarehouseInventoryInput, ProductUncheckedCreateWithoutWarehouseInventoryInput>
  }

  export type ProductUpsertWithoutWarehouseInventoryInput = {
    update: XOR<ProductUpdateWithoutWarehouseInventoryInput, ProductUncheckedUpdateWithoutWarehouseInventoryInput>
    create: XOR<ProductCreateWithoutWarehouseInventoryInput, ProductUncheckedCreateWithoutWarehouseInventoryInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutWarehouseInventoryInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutWarehouseInventoryInput, ProductUncheckedUpdateWithoutWarehouseInventoryInput>
  }

  export type ProductUpdateWithoutWarehouseInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrderItems?: DistributionOrderItemUpdateManyWithoutProductNestedInput
    palletPricing?: PalletPricingUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutWarehouseInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    productNo?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    packsPerPallet?: IntFieldUpdateOperationsInput | number
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    distributionOrderItems?: DistributionOrderItemUncheckedUpdateManyWithoutProductNestedInput
    palletPricing?: PalletPricingUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserCreateWithoutWarehouseSalesInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderCreateNestedManyWithoutCreatedByUserInput
    cashFlowEntries?: CashFlowCreateNestedManyWithoutCashierUserInput
  }

  export type UserUncheckedCreateWithoutWarehouseSalesInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    cashFlowEntries?: CashFlowUncheckedCreateNestedManyWithoutCashierUserInput
  }

  export type UserCreateOrConnectWithoutWarehouseSalesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWarehouseSalesInput, UserUncheckedCreateWithoutWarehouseSalesInput>
  }

  export type UserUpsertWithoutWarehouseSalesInput = {
    update: XOR<UserUpdateWithoutWarehouseSalesInput, UserUncheckedUpdateWithoutWarehouseSalesInput>
    create: XOR<UserCreateWithoutWarehouseSalesInput, UserUncheckedCreateWithoutWarehouseSalesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWarehouseSalesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWarehouseSalesInput, UserUncheckedUpdateWithoutWarehouseSalesInput>
  }

  export type UserUpdateWithoutWarehouseSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutCreatedByUserNestedInput
    cashFlowEntries?: CashFlowUpdateManyWithoutCashierUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWarehouseSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    cashFlowEntries?: CashFlowUncheckedUpdateManyWithoutCashierUserNestedInput
  }

  export type UserCreateWithoutCashFlowEntriesInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleCreateNestedManyWithoutSalesOfficerUserInput
  }

  export type UserUncheckedCreateWithoutCashFlowEntriesInput = {
    id?: string
    username: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    distributionOrders?: DistributionOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    transportOrders?: TransportOrderUncheckedCreateNestedManyWithoutCreatedByUserInput
    warehouseSales?: WarehouseSaleUncheckedCreateNestedManyWithoutSalesOfficerUserInput
  }

  export type UserCreateOrConnectWithoutCashFlowEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCashFlowEntriesInput, UserUncheckedCreateWithoutCashFlowEntriesInput>
  }

  export type UserUpsertWithoutCashFlowEntriesInput = {
    update: XOR<UserUpdateWithoutCashFlowEntriesInput, UserUncheckedUpdateWithoutCashFlowEntriesInput>
    create: XOR<UserCreateWithoutCashFlowEntriesInput, UserUncheckedCreateWithoutCashFlowEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCashFlowEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCashFlowEntriesInput, UserUncheckedUpdateWithoutCashFlowEntriesInput>
  }

  export type UserUpdateWithoutCashFlowEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUpdateManyWithoutSalesOfficerUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCashFlowEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    distributionOrders?: DistributionOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    transportOrders?: TransportOrderUncheckedUpdateManyWithoutCreatedByUserNestedInput
    warehouseSales?: WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserNestedInput
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type DistributionOrderCreateManyCreatedByUserInput = {
    id?: string
    customerId: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransportOrderCreateManyCreatedByUserInput = {
    id?: string
    distributionOrderId?: string | null
    orderNumber: string
    invoiceNumber?: string | null
    locationId: string
    truckId?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type WarehouseSaleCreateManySalesOfficerUserInput = {
    id?: string
    productId: string
    quantity: number
    unitType: $Enums.UnitType
    unitPrice: Decimal | DecimalJsLike | number | string
    totalAmount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    customerName?: string | null
    customerPhone?: string | null
    receiptNumber: string
    createdAt?: Date | string
  }

  export type CashFlowCreateManyCashierUserInput = {
    id?: string
    transactionType: $Enums.TransactionType
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    description?: string | null
    referenceNumber?: string | null
    reconciliationDate?: Date | string | null
    isReconciled?: boolean
    createdAt?: Date | string
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionOrderUpdateWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutDistributionOrdersNestedInput
    location?: LocationUpdateOneRequiredWithoutDistributionOrdersNestedInput
    orderItems?: DistributionOrderItemUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: DistributionOrderItemUncheckedUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUncheckedUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUncheckedUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportOrderUpdateWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    distributionOrder?: DistributionOrderUpdateOneWithoutTransportOrderNestedInput
    location?: LocationUpdateOneRequiredWithoutTransportOrdersNestedInput
    truck?: TruckCapacityUpdateOneWithoutTransportOrdersNestedInput
  }

  export type TransportOrderUncheckedUpdateWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributionOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransportOrderUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributionOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: StringFieldUpdateOperationsInput | string
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WarehouseSaleUpdateWithoutSalesOfficerUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitType?: EnumUnitTypeFieldUpdateOperationsInput | $Enums.UnitType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseSaleUncheckedUpdateWithoutSalesOfficerUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitType?: EnumUnitTypeFieldUpdateOperationsInput | $Enums.UnitType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseSaleUncheckedUpdateManyWithoutSalesOfficerUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitType?: EnumUnitTypeFieldUpdateOperationsInput | $Enums.UnitType
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowUpdateWithoutCashierUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reconciliationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReconciled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowUncheckedUpdateWithoutCashierUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reconciliationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReconciled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashFlowUncheckedUpdateManyWithoutCashierUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    reconciliationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isReconciled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionOrderItemCreateManyProductInput = {
    id?: string
    orderId: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
  }

  export type PalletPricingCreateManyProductInput = {
    id?: string
    locationId?: string | null
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WarehouseInventoryCreateManyProductInput = {
    id?: string
    pallets?: number
    packs?: number
    units?: number
    reorderLevel?: number
    maxStockLevel?: number | null
    location?: string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type DistributionOrderItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    order?: DistributionOrderUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type DistributionOrderItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PalletPricingUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneWithoutPalletPricingNestedInput
  }

  export type PalletPricingUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PalletPricingUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseInventoryUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    reorderLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseInventoryUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    reorderLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseInventoryUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    reorderLevel?: IntFieldUpdateOperationsInput | number
    maxStockLevel?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionOrderCreateManyCustomerInput = {
    id?: string
    locationId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistributionOrderUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutDistributionOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutDistributionOrdersNestedInput
    orderItems?: DistributionOrderItemUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: DistributionOrderItemUncheckedUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUncheckedUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUncheckedUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionOrderCreateManyLocationInput = {
    id?: string
    customerId: string
    totalPallets: number
    totalPacks: number
    originalAmount: Decimal | DecimalJsLike | number | string
    balance?: Decimal | DecimalJsLike | number | string
    finalAmount: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    transporterCompany?: string | null
    driverNumber?: string | null
    remark?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PalletPricingCreateManyLocationInput = {
    id?: string
    productId: string
    pricePerPack: Decimal | DecimalJsLike | number | string
    fuelAdjustment?: Decimal | DecimalJsLike | number | string
    effectiveDate?: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransportOrderCreateManyLocationInput = {
    id?: string
    distributionOrderId?: string | null
    orderNumber: string
    invoiceNumber?: string | null
    truckId?: string | null
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type DistributionOrderUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutDistributionOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutDistributionOrdersNestedInput
    orderItems?: DistributionOrderItemUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: DistributionOrderItemUncheckedUpdateManyWithoutOrderNestedInput
    priceAdjustments?: PriceAdjustmentUncheckedUpdateManyWithoutOrderNestedInput
    transportOrder?: TransportOrderUncheckedUpdateOneWithoutDistributionOrderNestedInput
  }

  export type DistributionOrderUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    totalPallets?: IntFieldUpdateOperationsInput | number
    totalPacks?: IntFieldUpdateOperationsInput | number
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    finalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    transporterCompany?: NullableStringFieldUpdateOperationsInput | string | null
    driverNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remark?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PalletPricingUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutPalletPricingNestedInput
  }

  export type PalletPricingUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PalletPricingUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    pricePerPack?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelAdjustment?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportOrderUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    distributionOrder?: DistributionOrderUpdateOneWithoutTransportOrderNestedInput
    truck?: TruckCapacityUpdateOneWithoutTransportOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutTransportOrdersNestedInput
  }

  export type TransportOrderUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributionOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransportOrderUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributionOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    truckId?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DistributionOrderItemCreateManyOrderInput = {
    id?: string
    productId: string
    pallets: number
    packs: number
    amount: Decimal | DecimalJsLike | number | string
  }

  export type PriceAdjustmentCreateManyOrderInput = {
    id?: string
    originalAmount: Decimal | DecimalJsLike | number | string
    adjustedAmount: Decimal | DecimalJsLike | number | string
    adjustmentType: string
    reason?: string | null
    locationFuelCost?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type DistributionOrderItemUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product?: ProductUpdateOneRequiredWithoutDistributionOrderItemsNestedInput
  }

  export type DistributionOrderItemUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type DistributionOrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    pallets?: IntFieldUpdateOperationsInput | number
    packs?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PriceAdjustmentUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    locationFuelCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceAdjustmentUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    locationFuelCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceAdjustmentUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustmentType?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    locationFuelCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportOrderCreateManyTruckInput = {
    id?: string
    distributionOrderId?: string | null
    orderNumber: string
    invoiceNumber?: string | null
    locationId: string
    totalOrderAmount: Decimal | DecimalJsLike | number | string
    fuelRequired: Decimal | DecimalJsLike | number | string
    fuelPricePerLiter: Decimal | DecimalJsLike | number | string
    totalFuelCost: Decimal | DecimalJsLike | number | string
    serviceCharge: Decimal | DecimalJsLike | number | string
    truckExpenses?: Decimal | DecimalJsLike | number | string
    driverSalary?: Decimal | DecimalJsLike | number | string
    driverDetails?: string | null
    deliveryStatus?: $Enums.DeliveryStatus
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deliveredAt?: Date | string | null
  }

  export type TransportOrderUpdateWithoutTruckInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    distributionOrder?: DistributionOrderUpdateOneWithoutTransportOrderNestedInput
    location?: LocationUpdateOneRequiredWithoutTransportOrdersNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutTransportOrdersNestedInput
  }

  export type TransportOrderUncheckedUpdateWithoutTruckInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributionOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: StringFieldUpdateOperationsInput | string
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransportOrderUncheckedUpdateManyWithoutTruckInput = {
    id?: StringFieldUpdateOperationsInput | string
    distributionOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderNumber?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: StringFieldUpdateOperationsInput | string
    totalOrderAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelRequired?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    fuelPricePerLiter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalFuelCost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    serviceCharge?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    truckExpenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverSalary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    driverDetails?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryStatus?: EnumDeliveryStatusFieldUpdateOperationsInput | $Enums.DeliveryStatus
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}