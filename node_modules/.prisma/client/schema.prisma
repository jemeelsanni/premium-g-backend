generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT & AUTHENTICATION
// ================================

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole
  isActive     Boolean  @default(true) @map("is_active")
  permissions  Json? // Flexible permissions for fine-grained control

  // Metadata
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")

  // Relations
  sessions           UserSession[]
  auditLogs          AuditLog[]
  distributionOrders DistributionOrder[]
  transportOrders    TransportOrder[]
  warehouseSales     WarehouseSale[]
  cashFlowEntries    CashFlow[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  isActive  Boolean  @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model AuditLog {
  id        String  @id @default(cuid())
  userId    String? @map("user_id")
  action    String // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  entity    String // Table/model name
  entityId  String? @map("entity_id")
  oldValues Json?   @map("old_values")
  newValues Json?   @map("new_values")
  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

enum UserRole {
  SUPER_ADMIN
  DISTRIBUTION_ADMIN
  TRANSPORT_ADMIN
  WAREHOUSE_ADMIN
  DISTRIBUTION_SALES_REP
  WAREHOUSE_SALES_OFFICER
  CASHIER
  TRANSPORT_STAFF
}

// ================================
// DISTRIBUTION ARM
// ================================

model Product {
  id             String  @id @default(cuid())
  productNo      String  @unique @map("product_no")
  name           String
  description    String?
  packsPerPallet Int     @map("packs_per_pallet")
  pricePerPack   Decimal @map("price_per_pack") @db.Decimal(10, 2)
  isActive       Boolean @default(true) @map("is_active")

  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  distributionOrderItems DistributionOrderItem[]
  palletPricing          PalletPricing[]
  warehouseInventory     WarehouseInventory[]

  @@map("products")
}

model Customer {
  id       String  @id @default(cuid())
  name     String
  email    String?
  phone    String?
  address  String?
  isActive Boolean @default(true) @map("is_active")

  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  distributionOrders DistributionOrder[]

  @@map("customers")
}

model Location {
  id             String  @id @default(cuid())
  name           String
  address        String?
  fuelAdjustment Decimal @default(0) @map("fuel_adjustment") @db.Decimal(5, 2)
  deliveryNotes  String? @map("delivery_notes")
  isActive       Boolean @default(true) @map("is_active")

  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  distributionOrders DistributionOrder[]
  palletPricing      PalletPricing[]
  transportOrders    TransportOrder[]

  @@map("locations")
}

model DistributionOrder {
  id         String @id @default(cuid())
  customerId String @map("customer_id")
  locationId String @map("location_id")

  // Order Details
  totalPallets   Int     @map("total_pallets")
  totalPacks     Int     @map("total_packs")
  originalAmount Decimal @map("original_amount") @db.Decimal(12, 2)
  balance        Decimal @default(0) @db.Decimal(12, 2)
  finalAmount    Decimal @map("final_amount") @db.Decimal(12, 2)

  // Status and Assignment
  status             OrderStatus @default(PENDING)
  transporterCompany String?     @map("transporter_company")
  driverNumber       String?     @map("driver_number")
  remark             String?

  // Metadata
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  customer      Customer @relation(fields: [customerId], references: [id])
  location      Location @relation(fields: [locationId], references: [id])
  createdByUser User     @relation(fields: [createdBy], references: [id])

  orderItems       DistributionOrderItem[]
  priceAdjustments PriceAdjustment[]
  transportOrder   TransportOrder?

  @@map("distribution_orders")
}

model DistributionOrderItem {
  id        String @id @default(cuid())
  orderId   String @map("order_id")
  productId String @map("product_id")

  pallets Int
  packs   Int
  amount  Decimal @db.Decimal(10, 2)

  // Relations
  order   DistributionOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product           @relation(fields: [productId], references: [id])

  @@map("distribution_order_items")
}

model PalletPricing {
  id             String   @id @default(cuid())
  productId      String   @map("product_id")
  locationId     String?  @map("location_id")
  pricePerPack   Decimal  @map("price_per_pack") @db.Decimal(10, 2)
  fuelAdjustment Decimal  @default(0) @map("fuel_adjustment") @db.Decimal(5, 2)
  effectiveDate  DateTime @default(now()) @map("effective_date")
  isActive       Boolean  @default(true) @map("is_active")

  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  product  Product   @relation(fields: [productId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])

  @@map("pallet_pricing")
}

model PriceAdjustment {
  id               String   @id @default(cuid())
  orderId          String   @map("order_id")
  originalAmount   Decimal  @map("original_amount") @db.Decimal(12, 2)
  adjustedAmount   Decimal  @map("adjusted_amount") @db.Decimal(12, 2)
  adjustmentType   String   @map("adjustment_type") // FUEL_COST, LOCATION_CHANGE, OTHER
  reason           String?
  locationFuelCost Decimal? @map("location_fuel_cost") @db.Decimal(5, 2)

  // Metadata
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  order DistributionOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("price_adjustments")
}

model TruckCapacity {
  id             String  @id @default(cuid())
  truckId        String  @unique @map("truck_id")
  maxPallets     Int     @default(12) @map("max_pallets")
  currentLoad    Int     @default(0) @map("current_load")
  availableSpace Int     @map("available_space")
  isActive       Boolean @default(true) @map("is_active")

  // Metadata
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  transportOrders TransportOrder[]

  @@map("truck_capacity")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  IN_TRANSIT
  DELIVERED
  PARTIALLY_DELIVERED
  CANCELLED
}

// ================================
// TRANSPORTATION ARM
// ================================

model TransportOrder {
  id                  String  @id @default(cuid())
  distributionOrderId String? @unique @map("distribution_order_id")
  orderNumber         String  @unique @map("order_number")
  invoiceNumber       String? @map("invoice_number")
  locationId          String  @map("location_id")
  truckId             String? @map("truck_id")

  // Financial Details
  totalOrderAmount  Decimal @map("total_order_amount") @db.Decimal(12, 2)
  fuelRequired      Decimal @map("fuel_required") @db.Decimal(8, 2) // Liters
  fuelPricePerLiter Decimal @map("fuel_price_per_liter") @db.Decimal(6, 2)
  totalFuelCost     Decimal @map("total_fuel_cost") @db.Decimal(10, 2)
  serviceCharge     Decimal @map("service_charge") @db.Decimal(10, 2) // 10% auto-calculated
  truckExpenses     Decimal @default(0) @map("truck_expenses") @db.Decimal(10, 2)
  driverSalary      Decimal @default(0) @map("driver_salary") @db.Decimal(8, 2)

  // Driver and Status
  driverDetails  String?        @map("driver_details")
  deliveryStatus DeliveryStatus @default(ASSIGNED) @map("delivery_status")

  // Metadata
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deliveredAt DateTime? @map("delivered_at")

  // Relations
  distributionOrder DistributionOrder? @relation(fields: [distributionOrderId], references: [id])
  location          Location           @relation(fields: [locationId], references: [id])
  truck             TruckCapacity?     @relation(fields: [truckId], references: [truckId])
  createdByUser     User               @relation(fields: [createdBy], references: [id])

  @@map("transport_orders")
}

enum DeliveryStatus {
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  PARTIALLY_DELIVERED
  DELAYED
  CANCELLED
}

// ================================
// WAREHOUSE ARM
// ================================

model WarehouseInventory {
  id        String @id @default(cuid())
  productId String @map("product_id")

  // Stock Levels (multiple units)
  pallets Int @default(0)
  packs   Int @default(0)
  units   Int @default(0)

  // Inventory Management
  reorderLevel  Int     @default(0) @map("reorder_level")
  maxStockLevel Int?    @map("max_stock_level")
  location      String? // Warehouse location/section

  // Metadata
  lastUpdated DateTime @updatedAt @map("last_updated")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, location])
  @@map("warehouse_inventory")
}

model WarehouseSale {
  id            String        @id @default(cuid())
  productId     String        @map("product_id")
  quantity      Int
  unitType      UnitType      @map("unit_type")
  unitPrice     Decimal       @map("unit_price") @db.Decimal(10, 2)
  totalAmount   Decimal       @map("total_amount") @db.Decimal(10, 2)
  paymentMethod PaymentMethod @map("payment_method")

  // Customer Info (optional for warehouse sales)
  customerName  String? @map("customer_name")
  customerPhone String? @map("customer_phone")

  // Receipt Details
  receiptNumber String @unique @map("receipt_number")

  // Metadata
  salesOfficer String   @map("sales_officer") // User ID
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  salesOfficerUser User @relation(fields: [salesOfficer], references: [id])

  @@map("warehouse_sales")
}

model CashFlow {
  id              String          @id @default(cuid())
  transactionType TransactionType @map("transaction_type")
  amount          Decimal         @db.Decimal(12, 2)
  paymentMethod   PaymentMethod   @map("payment_method")
  description     String?
  referenceNumber String?         @map("reference_number")

  // Daily reconciliation
  reconciliationDate DateTime? @map("reconciliation_date") @db.Date
  isReconciled       Boolean   @default(false) @map("is_reconciled")

  // Metadata
  cashier   String // User ID
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  cashierUser User @relation(fields: [cashier], references: [id])

  @@map("cash_flow")
}

enum UnitType {
  PALLETS
  PACKS
  UNITS
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  CARD
  MOBILE_MONEY
}

enum TransactionType {
  CASH_IN
  CASH_OUT
  SALE
  EXPENSE
  ADJUSTMENT
}

// ================================
// SYSTEM-WIDE CONFIGURATIONS
// ================================

model SystemConfig {
  id          String  @id @default(cuid())
  key         String  @unique
  value       Json
  description String?

  // Metadata
  updatedAt DateTime @updatedAt @map("updated_at")
  updatedBy String   @map("updated_by")

  @@map("system_config")
}
