
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  isActive: 'isActive',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  productNo: 'productNo',
  name: 'name',
  description: 'description',
  packsPerPallet: 'packsPerPallet',
  pricePerPack: 'pricePerPack',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  fuelAdjustment: 'fuelAdjustment',
  deliveryNotes: 'deliveryNotes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DistributionOrderScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  locationId: 'locationId',
  totalPallets: 'totalPallets',
  totalPacks: 'totalPacks',
  originalAmount: 'originalAmount',
  balance: 'balance',
  finalAmount: 'finalAmount',
  status: 'status',
  transporterCompany: 'transporterCompany',
  driverNumber: 'driverNumber',
  remark: 'remark',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DistributionOrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  pallets: 'pallets',
  packs: 'packs',
  amount: 'amount'
};

exports.Prisma.PalletPricingScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  locationId: 'locationId',
  pricePerPack: 'pricePerPack',
  fuelAdjustment: 'fuelAdjustment',
  effectiveDate: 'effectiveDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceAdjustmentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  originalAmount: 'originalAmount',
  adjustedAmount: 'adjustedAmount',
  adjustmentType: 'adjustmentType',
  reason: 'reason',
  locationFuelCost: 'locationFuelCost',
  createdAt: 'createdAt'
};

exports.Prisma.TruckCapacityScalarFieldEnum = {
  id: 'id',
  truckId: 'truckId',
  maxPallets: 'maxPallets',
  currentLoad: 'currentLoad',
  availableSpace: 'availableSpace',
  isActive: 'isActive',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransportOrderScalarFieldEnum = {
  id: 'id',
  distributionOrderId: 'distributionOrderId',
  orderNumber: 'orderNumber',
  invoiceNumber: 'invoiceNumber',
  locationId: 'locationId',
  truckId: 'truckId',
  totalOrderAmount: 'totalOrderAmount',
  fuelRequired: 'fuelRequired',
  fuelPricePerLiter: 'fuelPricePerLiter',
  totalFuelCost: 'totalFuelCost',
  serviceCharge: 'serviceCharge',
  truckExpenses: 'truckExpenses',
  driverSalary: 'driverSalary',
  driverDetails: 'driverDetails',
  deliveryStatus: 'deliveryStatus',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deliveredAt: 'deliveredAt'
};

exports.Prisma.WarehouseInventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  pallets: 'pallets',
  packs: 'packs',
  units: 'units',
  reorderLevel: 'reorderLevel',
  maxStockLevel: 'maxStockLevel',
  location: 'location',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt'
};

exports.Prisma.WarehouseSaleScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  quantity: 'quantity',
  unitType: 'unitType',
  unitPrice: 'unitPrice',
  totalAmount: 'totalAmount',
  paymentMethod: 'paymentMethod',
  customerName: 'customerName',
  customerPhone: 'customerPhone',
  receiptNumber: 'receiptNumber',
  salesOfficer: 'salesOfficer',
  createdAt: 'createdAt'
};

exports.Prisma.CashFlowScalarFieldEnum = {
  id: 'id',
  transactionType: 'transactionType',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  description: 'description',
  referenceNumber: 'referenceNumber',
  reconciliationDate: 'reconciliationDate',
  isReconciled: 'isReconciled',
  cashier: 'cashier',
  createdAt: 'createdAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  DISTRIBUTION_ADMIN: 'DISTRIBUTION_ADMIN',
  TRANSPORT_ADMIN: 'TRANSPORT_ADMIN',
  WAREHOUSE_ADMIN: 'WAREHOUSE_ADMIN',
  DISTRIBUTION_SALES_REP: 'DISTRIBUTION_SALES_REP',
  WAREHOUSE_SALES_OFFICER: 'WAREHOUSE_SALES_OFFICER',
  CASHIER: 'CASHIER',
  TRANSPORT_STAFF: 'TRANSPORT_STAFF'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  PARTIALLY_DELIVERED: 'PARTIALLY_DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  ASSIGNED: 'ASSIGNED',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  PARTIALLY_DELIVERED: 'PARTIALLY_DELIVERED',
  DELAYED: 'DELAYED',
  CANCELLED: 'CANCELLED'
};

exports.UnitType = exports.$Enums.UnitType = {
  PALLETS: 'PALLETS',
  PACKS: 'PACKS',
  UNITS: 'UNITS'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  CARD: 'CARD',
  MOBILE_MONEY: 'MOBILE_MONEY'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  CASH_IN: 'CASH_IN',
  CASH_OUT: 'CASH_OUT',
  SALE: 'SALE',
  EXPENSE: 'EXPENSE',
  ADJUSTMENT: 'ADJUSTMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSession: 'UserSession',
  AuditLog: 'AuditLog',
  Product: 'Product',
  Customer: 'Customer',
  Location: 'Location',
  DistributionOrder: 'DistributionOrder',
  DistributionOrderItem: 'DistributionOrderItem',
  PalletPricing: 'PalletPricing',
  PriceAdjustment: 'PriceAdjustment',
  TruckCapacity: 'TruckCapacity',
  TransportOrder: 'TransportOrder',
  WarehouseInventory: 'WarehouseInventory',
  WarehouseSale: 'WarehouseSale',
  CashFlow: 'CashFlow',
  SystemConfig: 'SystemConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
