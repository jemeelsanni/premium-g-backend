generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT & AUTHENTICATION
// ================================

model User {
    id           String   @id @default(cuid())
    username     String   @unique
    email        String   @unique
    passwordHash String   @map("password_hash")
    role         UserRole
    isActive     Boolean  @default(true) @map("is_active")
    permissions  Json? // Flexible permissions for fine-grained control

    // Metadata
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    lastLoginAt DateTime? @map("last_login_at")

    // Relations
    sessions           UserSession[]
    auditLogs          AuditLog[]
    distributionOrders DistributionOrder[]
    transportOrders    TransportOrder[]
    warehouseSales     WarehouseSale[]
    cashFlowEntries    CashFlow[]
    expenses           Expense[]
    approvedExpenses   Expense[]           @relation("ExpenseApprover")

    @@map("users")
}

model UserSession {
    id        String   @id @default(cuid())
    userId    String   @map("user_id")
    token     String   @unique
    expiresAt DateTime @map("expires_at")
    ipAddress String?  @map("ip_address")
    userAgent String?  @map("user_agent")
    isActive  Boolean  @default(true) @map("is_active")

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_sessions")
}

model AuditLog {
    id        String  @id @default(cuid())
    userId    String? @map("user_id")
    action    String // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
    entity    String // Table/model name
    entityId  String? @map("entity_id")
    oldValues Json?   @map("old_values")
    newValues Json?   @map("new_values")
    ipAddress String? @map("ip_address")
    userAgent String? @map("user_agent")

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("audit_logs")
}

enum UserRole {
    SUPER_ADMIN
    DISTRIBUTION_ADMIN
    TRANSPORT_ADMIN
    WAREHOUSE_ADMIN
    DISTRIBUTION_SALES_REP
    WAREHOUSE_SALES_OFFICER
    CASHIER
    TRANSPORT_STAFF
}

// ================================
// TARGET & PERFORMANCE TRACKING (NEW)
// ================================

model DistributionTarget {
    id               String @id @default(cuid())
    year             Int
    month            Int // 1-12
    totalPacksTarget Int    @map("total_packs_target")
    weeklyTargets    Json // Array: [35000, 35000, 35000, 35000]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    weeklyPerformances WeeklyPerformance[]

    @@unique([year, month])
    @@map("distribution_targets")
}

model WeeklyPerformance {
    id                 String   @id @default(cuid())
    targetId           String   @map("target_id")
    weekNumber         Int      @map("week_number") // 1-4
    targetPacks        Int      @map("target_packs")
    actualPacks        Int      @default(0) @map("actual_packs")
    percentageAchieved Decimal  @default(0) @map("percentage_achieved") @db.Decimal(5, 2)
    weekStartDate      DateTime @map("week_start_date")
    weekEndDate        DateTime @map("week_end_date")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    target DistributionTarget @relation(fields: [targetId], references: [id])

    @@unique([targetId, weekNumber])
    @@map("weekly_performance")
}

// ================================
// DISTRIBUTION ARM
// ================================

enum ProductModule {
    DISTRIBUTION
    WAREHOUSE
    BOTH
}

model Product {
    id             String        @id @default(cuid())
    productNo      String        @unique @map("product_no")
    name           String
    description    String? // ADD THIS - don't lose data
    packsPerPallet Int           @map("packs_per_pallet")
    pricePerPack   Decimal       @map("price_per_pack") @db.Decimal(10, 2)
    costPerPack    Decimal?      @map("cost_per_pack") @db.Decimal(10, 2) // ADD THIS
    module         ProductModule @default(DISTRIBUTION)
    isActive       Boolean       @default(true) @map("is_active")

    // Metadata
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    orderItems         DistributionOrderItem[]
    palletPricing      PalletPricing[]
    warehouseInventory WarehouseInventory[]
    warehouseSales     WarehouseSale[]

    @@map("products")
}

model Customer {
    id           String  @id @default(cuid())
    name         String
    email        String?
    phone        String?
    address      String?
    customerType String? @map("customer_type") // ADD THIS
    territory    String? // ADD THIS
    totalOrders  Int     @default(0) @map("total_orders") // ADD THIS for analytics
    totalSpent   Decimal @default(0) @map("total_spent") @db.Decimal(15, 2) // ADD THIS
    isActive     Boolean @default(true) @map("is_active")

    // Metadata
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    distributionOrders DistributionOrder[]

    @@map("customers")
}

model Location {
    id                 String  @id @default(cuid())
    name               String
    address            String?
    fuelAdjustment     Decimal @default(0) @map("fuel_adjustment") @db.Decimal(5, 2)
    driverWagesPerTrip Decimal @default(0) @map("driver_wages_per_trip") @db.Decimal(8, 2) // NEW: Location-based driver wages
    deliveryNotes      String? @map("delivery_notes")
    isActive           Boolean @default(true) @map("is_active")

    // Metadata
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    distributionOrders DistributionOrder[]
    palletPricing      PalletPricing[]
    transportOrders    TransportOrder[]
    expenses           Expense[]

    @@map("locations")
}

model DistributionOrder {
    id         String @id @default(cuid())
    customerId String @map("customer_id")
    locationId String @map("location_id")

    // Order Details
    totalPallets   Int     @map("total_pallets")
    totalPacks     Int     @map("total_packs")
    originalAmount Decimal @map("original_amount") @db.Decimal(12, 2)
    balance        Decimal @default(0) @db.Decimal(12, 2)
    finalAmount    Decimal @map("final_amount") @db.Decimal(12, 2)

    // Status and Assignment
    status             OrderStatus @default(PENDING)
    transporterCompany String?     @map("transporter_company")
    driverNumber       String?     @map("driver_number")
    remark             String?

    // Metadata
    createdBy String   @map("created_by")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    customer      Customer @relation(fields: [customerId], references: [id])
    location      Location @relation(fields: [locationId], references: [id])
    createdByUser User     @relation(fields: [createdBy], references: [id])

    orderItems       DistributionOrderItem[]
    priceAdjustments PriceAdjustment[]
    transportOrder   TransportOrder?
    profitAnalysis   ProfitAnalysis[] // NEW: Link to profit analysis

    @@map("distribution_orders")
}

model DistributionOrderItem {
    id        String @id @default(cuid())
    orderId   String @map("order_id")
    productId String @map("product_id")

    pallets Int
    packs   Int
    amount  Decimal @db.Decimal(10, 2)

    // Relations
    order   DistributionOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product           @relation(fields: [productId], references: [id])

    @@map("distribution_order_items")
}

model PalletPricing {
    id             String   @id @default(cuid())
    productId      String   @map("product_id")
    locationId     String?  @map("location_id")
    pricePerPack   Decimal  @map("price_per_pack") @db.Decimal(10, 2)
    fuelAdjustment Decimal  @default(0) @map("fuel_adjustment") @db.Decimal(5, 2)
    effectiveDate  DateTime @default(now()) @map("effective_date")
    isActive       Boolean  @default(true) @map("is_active")

    // Metadata
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    product  Product   @relation(fields: [productId], references: [id])
    location Location? @relation(fields: [locationId], references: [id])

    @@map("pallet_pricing")
}

model PriceAdjustment {
    id               String   @id @default(cuid())
    orderId          String   @map("order_id")
    originalAmount   Decimal  @map("original_amount") @db.Decimal(12, 2)
    adjustedAmount   Decimal  @map("adjusted_amount") @db.Decimal(12, 2)
    adjustmentType   String   @map("adjustment_type") // FUEL_COST, LOCATION_CHANGE, OTHER
    reason           String?
    locationFuelCost Decimal? @map("location_fuel_cost") @db.Decimal(5, 2)

    // Metadata
    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    order DistributionOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

    @@map("price_adjustments")
}

model TruckCapacity {
    id                 String  @id @default(cuid())
    truckId            String  @unique @map("truck_id")
    registrationNumber String? @map("registration_number")
    maxPallets         Int     @default(12) @map("max_pallets")
    currentLoad        Int     @default(0) @map("current_load")
    availableSpace     Int     @map("available_space")
    isActive           Boolean @default(true) @map("is_active")

    // Vehicle details
    make  String? @map("make")
    model String? @map("model")
    year  Int?    @map("year")
    notes String? @map("notes")

    // Metadata
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    transportOrders TransportOrder[]
    expenses        Expense[]

    @@map("truck_capacity")
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PROCESSING
    IN_TRANSIT
    DELIVERED
    PARTIALLY_DELIVERED
    CANCELLED
}

// ================================
// TRANSPORTATION ARM
// ================================

model TransportOrder {
    id                  String  @id @default(cuid())
    distributionOrderId String? @unique @map("distribution_order_id")
    orderNumber         String  @unique @map("order_number")
    invoiceNumber       String? @map("invoice_number")
    locationId          String  @map("location_id")
    truckId             String? @map("truck_id")

    // REVENUE - What we charge the client
    totalOrderAmount Decimal @map("total_order_amount") @db.Decimal(12, 2) // Gross transport revenue

    // EXPENSES BREAKDOWN
    fuelRequired         Decimal @map("fuel_required") @db.Decimal(8, 2) // Liters
    fuelPricePerLiter    Decimal @map("fuel_price_per_liter") @db.Decimal(6, 2)
    totalFuelCost        Decimal @map("total_fuel_cost") @db.Decimal(10, 2)
    serviceChargeExpense Decimal @map("service_charge_expense") @db.Decimal(10, 2) // Third-party service fees
    driverWages          Decimal @default(0) @map("driver_wages") @db.Decimal(8, 2)
    truckExpenses        Decimal @default(0) @map("truck_expenses") @db.Decimal(10, 2)

    // PROFIT CALCULATION
    totalExpenses Decimal @map("total_expenses") @db.Decimal(12, 2)
    grossProfit   Decimal @default(0) @map("gross_profit") @db.Decimal(12, 2) // Revenue - Direct Costs
    netProfit     Decimal @default(0) @map("net_profit") @db.Decimal(12, 2) // Revenue - All Expenses
    profitMargin  Decimal @default(0) @map("profit_margin") @db.Decimal(5, 2)

    // Driver and Status
    driverDetails  String?
    deliveryStatus OrderStatus @default(PENDING) @map("delivery_status")
    deliveryDate   DateTime?   @map("delivery_date")

    // Metadata
    createdBy String   @map("created_by")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    location          Location           @relation(fields: [locationId], references: [id])
    truck             TruckCapacity?     @relation(fields: [truckId], references: [truckId])
    distributionOrder DistributionOrder? @relation(fields: [distributionOrderId], references: [id])
    createdByUser     User               @relation(fields: [createdBy], references: [id])
    profitAnalysis    ProfitAnalysis[]

    @@map("transport_orders")
}

enum DeliveryStatus {
    ASSIGNED
    IN_TRANSIT
    DELIVERED
    PARTIALLY_DELIVERED
    DELAYED
    CANCELLED
}

// ================================
// EXPENSE MANAGEMENT (NEW)
// ================================

model Expense {
    id          String          @id @default(cuid())
    expenseType ExpenseType     @map("expense_type")
    category    ExpenseCategory
    amount      Decimal         @db.Decimal(12, 2)
    description String?
    referenceId String?         @map("reference_id") // Links to order, truck, etc.
    expenseDate DateTime        @map("expense_date")

    // Location/Department specific
    locationId   String? @map("location_id")
    truckId      String? @map("truck_id")
    departmentId String? @map("department_id")

    // Approval workflow
    status     ExpenseStatus @default(PENDING)
    approvedBy String?       @map("approved_by")
    approvedAt DateTime?     @map("approved_at")

    // Receipt/Document
    receiptUrl    String? @map("receipt_url")
    receiptNumber String? @map("receipt_number")

    createdBy String   @map("created_by")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    location      Location?      @relation(fields: [locationId], references: [id])
    truck         TruckCapacity? @relation(fields: [truckId], references: [truckId])
    createdByUser User           @relation(fields: [createdBy], references: [id])
    approver      User?          @relation("ExpenseApprover", fields: [approvedBy], references: [id])

    @@map("expenses")
}

enum ExpenseType {
    TRUCK_EXPENSE
    TRANSPORT_EXPENSE
    DISTRIBUTION_EXPENSE
    WAREHOUSE_EXPENSE
    FUEL_COST
    MAINTENANCE
    SALARY_WAGES
    OPERATIONAL
    SERVICE_CHARGE
}

enum ExpenseCategory {
    FUEL
    MAINTENANCE
    REPAIRS
    INSURANCE
    DRIVER_WAGES
    SERVICE_CHARGES
    EQUIPMENT
    UTILITIES
    RENT
    OFFICE_SUPPLIES
    MARKETING
    TRANSPORT_SERVICE_FEE
    OTHER
}

enum ExpenseStatus {
    PENDING
    APPROVED
    REJECTED
    PAID
}

// ================================
// PROFIT ANALYSIS SYSTEM (NEW)
// ================================

model ProfitAnalysis {
    id           String       @id @default(cuid())
    analysisType AnalysisType @map("analysis_type")
    referenceId  String?      @map("reference_id")
    period       String?

    // Revenue Breakdown (GROSS REVENUE - what we charge clients)
    totalRevenue        Decimal @map("total_revenue") @db.Decimal(15, 2)
    distributionRevenue Decimal @default(0) @map("distribution_revenue") @db.Decimal(15, 2)
    transportRevenue    Decimal @default(0) @map("transport_revenue") @db.Decimal(15, 2) // Gross transport charges
    warehouseRevenue    Decimal @default(0) @map("warehouse_revenue") @db.Decimal(15, 2)

    // Cost Breakdown
    totalCosts          Decimal @map("total_costs") @db.Decimal(15, 2)
    costOfGoodsSold     Decimal @default(0) @map("cost_of_goods_sold") @db.Decimal(15, 2)
    transportCosts      Decimal @default(0) @map("transport_costs") @db.Decimal(15, 2)
    warehouseCOGS       Decimal @default(0) @map("warehouse_cogs") @db.Decimal(15, 2)
    fuelCosts           Decimal @default(0) @map("fuel_costs") @db.Decimal(15, 2)
    driverWages         Decimal @default(0) @map("driver_wages") @db.Decimal(15, 2)
    truckExpenses       Decimal @default(0) @map("truck_expenses") @db.Decimal(15, 2)
    serviceCharges      Decimal @default(0) @map("service_charges") @db.Decimal(15, 2)
    operationalExpenses Decimal @default(0) @map("operational_expenses") @db.Decimal(15, 2)

    // Profit Metrics
    grossProfit  Decimal @map("gross_profit") @db.Decimal(15, 2) // Revenue - COGS
    netProfit    Decimal @map("net_profit") @db.Decimal(15, 2) // Revenue - All Costs
    profitMargin Decimal @map("profit_margin") @db.Decimal(5, 2)

    // Additional Metrics
    totalOrders       Int     @default(0) @map("total_orders")
    totalPacks        Int     @default(0) @map("total_packs")
    averageOrderValue Decimal @default(0) @map("average_order_value") @db.Decimal(10, 2)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    distributionOrder DistributionOrder? @relation(fields: [referenceId], references: [id], map: "profit_analysis_distribution_order_fkey")
    transportOrder    TransportOrder?    @relation(fields: [referenceId], references: [id], map: "profit_analysis_transport_order_fkey")

    @@map("profit_analysis")
}

enum AnalysisType {
    ORDER
    TRANSPORT_TRIP
    DAILY
    WEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
    LOCATION
    CUSTOMER
    PRODUCT
}

// ================================
// WAREHOUSE ARM
// ================================

model WarehouseInventory {
    id        String @id @default(cuid())
    productId String @map("product_id")

    // Stock Levels (multiple units)
    pallets Int @default(0)
    packs   Int @default(0)
    units   Int @default(0)

    // Inventory Management
    reorderLevel  Int     @default(0) @map("reorder_level")
    maxStockLevel Int?    @map("max_stock_level")
    location      String? // Warehouse location/section

    // Metadata
    lastUpdated DateTime @updatedAt @map("last_updated")
    createdAt   DateTime @default(now()) @map("created_at")

    // Relations
    product Product @relation(fields: [productId], references: [id])

    @@unique([productId, location])
    @@map("warehouse_inventory")
}

model WarehouseSale {
    id          String   @id @default(cuid())
    productId   String   @map("product_id")
    quantity    Int
    unitType    UnitType @map("unit_type")
    unitPrice   Decimal  @map("unit_price") @db.Decimal(10, 2)
    totalAmount Decimal  @map("total_amount") @db.Decimal(10, 2)

    // NEW: Cost tracking for proper profit calculation
    costPerUnit  Decimal @map("cost_per_unit") @db.Decimal(10, 2)
    totalCost    Decimal @map("total_cost") @db.Decimal(10, 2)
    grossProfit  Decimal @map("gross_profit") @db.Decimal(10, 2)
    profitMargin Decimal @map("profit_margin") @db.Decimal(5, 2)

    paymentMethod PaymentMethod @map("payment_method")

    // Customer Info (optional for warehouse sales)
    customerName  String? @map("customer_name")
    customerPhone String? @map("customer_phone")

    // Receipt Details
    receiptNumber String @unique @map("receipt_number")

    // Metadata
    salesOfficer String   @map("sales_officer") // User ID
    createdAt    DateTime @default(now()) @map("created_at")

    // Relations
    product          Product @relation(fields: [productId], references: [id])
    salesOfficerUser User    @relation(fields: [salesOfficer], references: [id])

    @@map("warehouse_sales")
}

model CashFlow {
    id              String          @id @default(cuid())
    transactionType TransactionType @map("transaction_type")
    amount          Decimal         @db.Decimal(12, 2)
    paymentMethod   PaymentMethod   @map("payment_method")
    description     String?
    referenceNumber String?         @map("reference_number")

    // Daily reconciliation
    reconciliationDate DateTime? @map("reconciliation_date") @db.Date
    isReconciled       Boolean   @default(false) @map("is_reconciled")

    // Metadata
    cashier   String   @map("cashier") // User ID
    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    cashierUser User @relation(fields: [cashier], references: [id])

    @@map("cash_flow")
}

enum UnitType {
    PALLETS
    PACKS
    UNITS
}

enum PaymentMethod {
    CASH
    BANK_TRANSFER
    CHECK
    CARD
    MOBILE_MONEY
}

enum TransactionType {
    CASH_IN
    CASH_OUT
    SALE
    EXPENSE
    ADJUSTMENT
}

// ================================
// BUSINESS INTELLIGENCE & KPIs (NEW)
// ================================

model KPIMetrics {
    id         String     @id @default(cuid())
    metricType KPIType    @map("metric_type")
    period     String // YYYY-MM-DD, YYYY-MM, YYYY
    periodType PeriodType @map("period_type")

    // Financial KPIs
    totalRevenue Decimal? @map("total_revenue") @db.Decimal(15, 2)
    totalProfit  Decimal? @map("total_profit") @db.Decimal(15, 2)
    profitMargin Decimal? @map("profit_margin") @db.Decimal(5, 2)
    costRatio    Decimal? @map("cost_ratio") @db.Decimal(5, 2)

    // Operational KPIs
    totalOrders        Int?     @map("total_orders")
    totalPacksSold     Int?     @map("total_packs_sold")
    targetAchievement  Decimal? @map("target_achievement") @db.Decimal(5, 2)
    onTimeDeliveryRate Decimal? @map("on_time_delivery_rate") @db.Decimal(5, 2)

    // Efficiency KPIs
    revenuePerTruckTrip Decimal? @map("revenue_per_truck_trip") @db.Decimal(10, 2)
    costPerPack         Decimal? @map("cost_per_pack") @db.Decimal(8, 2)
    fuelEfficiency      Decimal? @map("fuel_efficiency") @db.Decimal(8, 2)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@unique([metricType, period, periodType])
    @@map("kpi_metrics")
}

enum KPIType {
    OVERALL_PERFORMANCE
    DISTRIBUTION_PERFORMANCE
    TRANSPORT_PERFORMANCE
    WAREHOUSE_PERFORMANCE
    PROFITABILITY
    EFFICIENCY
    TARGET_ACHIEVEMENT
}

enum PeriodType {
    DAILY
    WEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
}

// ================================
// SYSTEM-WIDE CONFIGURATIONS
// ================================

model SystemConfig {
    id          String  @id @default(cuid())
    key         String  @unique
    value       Json
    description String?

    // Metadata
    updatedAt DateTime @updatedAt @map("updated_at")
    updatedBy String   @map("updated_by")

    @@map("system_config")
}
